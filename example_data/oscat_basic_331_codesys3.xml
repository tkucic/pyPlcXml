<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="" productName="CODESYS" productVersion="CODESYS V3.5 SP16" creationDateTime="2020-05-24T16:39:18.0227817" />
  <contentHeader name="BASIC" version="3.31" modificationDateTime="2020-05-03T13:16:44.3823838" organization="OSCAT" author="oscat">
    <Comment>www.oscat.de</Comment>
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation>
          <property name="Author" type="string">oscat</property>
          <property name="Company" type="string">OSCAT</property>
          <property name="Description" type="string">www.oscat.de</property>
          <property name="Project" type="string">oscat_basic_331_codesys3</property>
          <property name="Released" type="boolean">true</property>
          <property name="Title" type="string">BASIC</property>
          <property name="Version" type="version">3.31</property>
          <property name="Version string" type="string" />
        </ProjectInformation>
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="CALENDAR">
        <baseType>
          <struct>
            <variable name="UTC">
              <type>
                <DT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> world time UTC </xhtml>
              </documentation>
            </variable>
            <variable name="YEAR">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> year of LDATE </xhtml>
              </documentation>
            </variable>
            <variable name="MONTH">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> month of LDATE </xhtml>
              </documentation>
            </variable>
            <variable name="DAY">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> day of LDATE </xhtml>
              </documentation>
            </variable>
            <variable name="WEEKDAY">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> weekday of LDATE </xhtml>
              </documentation>
            </variable>
            <variable name="OFFSET">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Time Zone Offset for Local time in minutes </xhtml>
              </documentation>
            </variable>
            <variable name="DST_EN">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> daylight savings time enable </xhtml>
              </documentation>
            </variable>
            <variable name="DST_ON">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> true when daylight savings time os on </xhtml>
              </documentation>
            </variable>
            <variable name="NAME">
              <type>
                <string length="5" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> name of time zone </xhtml>
              </documentation>
            </variable>
            <variable name="LANGUAGE">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> location number pls see location setup </xhtml>
              </documentation>
            </variable>
            <variable name="LONGITUDE">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> longitude of current location </xhtml>
              </documentation>
            </variable>
            <variable name="LATITUDE">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> latitude of current location </xhtml>
              </documentation>
            </variable>
            <variable name="SUN_RISE">
              <type>
                <TOD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> sun_rise for current location </xhtml>
              </documentation>
            </variable>
            <variable name="SUN_SET">
              <type>
                <TOD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> sun_set for current location </xhtml>
              </documentation>
            </variable>
            <variable name="SUN_MIDDAY">
              <type>
                <TOD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> worldtime when sun stands at south position </xhtml>
              </documentation>
            </variable>
            <variable name="SUN_HEIGTH">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> suns heigth at midday, south position </xhtml>
              </documentation>
            </variable>
            <variable name="SUN_HOR">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> sun angle horizontal 0 = north in degrees </xhtml>
              </documentation>
            </variable>
            <variable name="SUN_VER">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> sun angle vertical above horizon in degrees </xhtml>
              </documentation>
            </variable>
            <variable name="NIGHT">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> true between sun_set and sun_rise </xhtml>
              </documentation>
            </variable>
            <variable name="HOLIDAY">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> true when holiday </xhtml>
              </documentation>
            </variable>
            <variable name="HOLY_NAME">
              <type>
                <string length="30" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> name of holiday </xhtml>
              </documentation>
            </variable>
            <variable name="WORK_WEEK">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> current work week </xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a5b9d157-1c1e-4909-9f33-b4a9ef38b2d9</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="COMPLEX">
        <baseType>
          <struct>
            <variable name="re">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="im">
              <type>
                <REAL />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e8ac4e09-b0ab-4efb-93c5-cd575e26493b</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="CONSTANTS_LANGUAGE">
        <baseType>
          <struct>
            <variable name="DEFAULT">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1=english, 2=german 3=french </xhtml>
              </documentation>
            </variable>
            <variable name="LMAX">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="3" />
              </initialValue>
            </variable>
            <variable name="WEEKDAYS">
              <type>
                <array>
                  <dimension lower="1" upper="3" />
                  <dimension lower="1" upper="7" />
                  <baseType>
                    <string length="10" />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <simpleValue value="'Monday'" />
                  </value>
                  <value>
                    <simpleValue value="'Tuesday'" />
                  </value>
                  <value>
                    <simpleValue value="'Wednesday'" />
                  </value>
                  <value>
                    <simpleValue value="'Thursday'" />
                  </value>
                  <value>
                    <simpleValue value="'Friday'" />
                  </value>
                  <value>
                    <simpleValue value="'Saturday'" />
                  </value>
                  <value>
                    <simpleValue value="'Sunday'" />
                  </value>
                  <value>
                    <simpleValue value="'Montag'" />
                  </value>
                  <value>
                    <simpleValue value="'Dienstag'" />
                  </value>
                  <value>
                    <simpleValue value="'Mittwoch'" />
                  </value>
                  <value>
                    <simpleValue value="'Donnerstag'" />
                  </value>
                  <value>
                    <simpleValue value="'Freitag'" />
                  </value>
                  <value>
                    <simpleValue value="'Samstag'" />
                  </value>
                  <value>
                    <simpleValue value="'Sonntag'" />
                  </value>
                  <value>
                    <simpleValue value="'Lundi'" />
                  </value>
                  <value>
                    <simpleValue value="'Mardi'" />
                  </value>
                  <value>
                    <simpleValue value="'Mercredi'" />
                  </value>
                  <value>
                    <simpleValue value="'Jeudi'" />
                  </value>
                  <value>
                    <simpleValue value="'Vendredi'" />
                  </value>
                  <value>
                    <simpleValue value="'Samedi'" />
                  </value>
                  <value>
                    <simpleValue value="'Dimanche'" />
                  </value>
                </arrayValue>
              </initialValue>
            </variable>
            <variable name="WEEKDAYS2">
              <type>
                <array>
                  <dimension lower="1" upper="3" />
                  <dimension lower="1" upper="7" />
                  <baseType>
                    <string length="2" />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <simpleValue value="'Mo'" />
                  </value>
                  <value>
                    <simpleValue value="'Tu'" />
                  </value>
                  <value>
                    <simpleValue value="'We'" />
                  </value>
                  <value>
                    <simpleValue value="'Th'" />
                  </value>
                  <value>
                    <simpleValue value="'Fr'" />
                  </value>
                  <value>
                    <simpleValue value="'Sa'" />
                  </value>
                  <value>
                    <simpleValue value="'Su'" />
                  </value>
                  <value>
                    <simpleValue value="'Mo'" />
                  </value>
                  <value>
                    <simpleValue value="'Di'" />
                  </value>
                  <value>
                    <simpleValue value="'Mi'" />
                  </value>
                  <value>
                    <simpleValue value="'Do'" />
                  </value>
                  <value>
                    <simpleValue value="'Fr'" />
                  </value>
                  <value>
                    <simpleValue value="'Sa'" />
                  </value>
                  <value>
                    <simpleValue value="'So'" />
                  </value>
                  <value>
                    <simpleValue value="'Lu'" />
                  </value>
                  <value>
                    <simpleValue value="'Ma'" />
                  </value>
                  <value>
                    <simpleValue value="'Me'" />
                  </value>
                  <value>
                    <simpleValue value="'Je'" />
                  </value>
                  <value>
                    <simpleValue value="'Ve'" />
                  </value>
                  <value>
                    <simpleValue value="'Sa'" />
                  </value>
                  <value>
                    <simpleValue value="'Di'" />
                  </value>
                </arrayValue>
              </initialValue>
            </variable>
            <variable name="MONTHS">
              <type>
                <array>
                  <dimension lower="1" upper="3" />
                  <dimension lower="1" upper="12" />
                  <baseType>
                    <string length="10" />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <simpleValue value="'January'" />
                  </value>
                  <value>
                    <simpleValue value="'February'" />
                  </value>
                  <value>
                    <simpleValue value="'March'" />
                  </value>
                  <value>
                    <simpleValue value="'April'" />
                  </value>
                  <value>
                    <simpleValue value="'May'" />
                  </value>
                  <value>
                    <simpleValue value="'June'" />
                  </value>
                  <value>
                    <simpleValue value="'July'" />
                  </value>
                  <value>
                    <simpleValue value="'August'" />
                  </value>
                  <value>
                    <simpleValue value="'September'" />
                  </value>
                  <value>
                    <simpleValue value="'October'" />
                  </value>
                  <value>
                    <simpleValue value="'November'" />
                  </value>
                  <value>
                    <simpleValue value="'December'" />
                  </value>
                  <value>
                    <simpleValue value="'Januar'" />
                  </value>
                  <value>
                    <simpleValue value="'Februar'" />
                  </value>
                  <value>
                    <simpleValue value="'März'" />
                  </value>
                  <value>
                    <simpleValue value="'April'" />
                  </value>
                  <value>
                    <simpleValue value="'Mai'" />
                  </value>
                  <value>
                    <simpleValue value="'Juni'" />
                  </value>
                  <value>
                    <simpleValue value="'Juli'" />
                  </value>
                  <value>
                    <simpleValue value="'August'" />
                  </value>
                  <value>
                    <simpleValue value="'September'" />
                  </value>
                  <value>
                    <simpleValue value="'Oktober'" />
                  </value>
                  <value>
                    <simpleValue value="'November'" />
                  </value>
                  <value>
                    <simpleValue value="'Dezember'" />
                  </value>
                  <value>
                    <simpleValue value="'Janvier'" />
                  </value>
                  <value>
                    <simpleValue value="'Février'" />
                  </value>
                  <value>
                    <simpleValue value="'mars'" />
                  </value>
                  <value>
                    <simpleValue value="'Avril'" />
                  </value>
                  <value>
                    <simpleValue value="'Mai'" />
                  </value>
                  <value>
                    <simpleValue value="'Juin'" />
                  </value>
                  <value>
                    <simpleValue value="'Juillet'" />
                  </value>
                  <value>
                    <simpleValue value="'Août'" />
                  </value>
                  <value>
                    <simpleValue value="'Septembre'" />
                  </value>
                  <value>
                    <simpleValue value="'Octobre'" />
                  </value>
                  <value>
                    <simpleValue value="'Novembre'" />
                  </value>
                  <value>
                    <simpleValue value="'Decembre'" />
                  </value>
                </arrayValue>
              </initialValue>
            </variable>
            <variable name="MONTHS3">
              <type>
                <array>
                  <dimension lower="1" upper="3" />
                  <dimension lower="1" upper="12" />
                  <baseType>
                    <string length="3" />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <simpleValue value="'Jan'" />
                  </value>
                  <value>
                    <simpleValue value="'Feb'" />
                  </value>
                  <value>
                    <simpleValue value="'Mar'" />
                  </value>
                  <value>
                    <simpleValue value="'Apr'" />
                  </value>
                  <value>
                    <simpleValue value="'May'" />
                  </value>
                  <value>
                    <simpleValue value="'Jun'" />
                  </value>
                  <value>
                    <simpleValue value="'Jul'" />
                  </value>
                  <value>
                    <simpleValue value="'Aug'" />
                  </value>
                  <value>
                    <simpleValue value="'Sep'" />
                  </value>
                  <value>
                    <simpleValue value="'Oct'" />
                  </value>
                  <value>
                    <simpleValue value="'Nov'" />
                  </value>
                  <value>
                    <simpleValue value="'Dec'" />
                  </value>
                  <value>
                    <simpleValue value="'Jan'" />
                  </value>
                  <value>
                    <simpleValue value="'Feb'" />
                  </value>
                  <value>
                    <simpleValue value="'Mrz'" />
                  </value>
                  <value>
                    <simpleValue value="'Apr'" />
                  </value>
                  <value>
                    <simpleValue value="'Mai'" />
                  </value>
                  <value>
                    <simpleValue value="'Jun'" />
                  </value>
                  <value>
                    <simpleValue value="'Jul'" />
                  </value>
                  <value>
                    <simpleValue value="'Aug'" />
                  </value>
                  <value>
                    <simpleValue value="'Sep'" />
                  </value>
                  <value>
                    <simpleValue value="'Okt'" />
                  </value>
                  <value>
                    <simpleValue value="'Nov'" />
                  </value>
                  <value>
                    <simpleValue value="'Dez'" />
                  </value>
                  <value>
                    <simpleValue value="'Jan'" />
                  </value>
                  <value>
                    <simpleValue value="'Fev'" />
                  </value>
                  <value>
                    <simpleValue value="'Mar'" />
                  </value>
                  <value>
                    <simpleValue value="'Avr'" />
                  </value>
                  <value>
                    <simpleValue value="'Mai'" />
                  </value>
                  <value>
                    <simpleValue value="'Jun'" />
                  </value>
                  <value>
                    <simpleValue value="'Jul'" />
                  </value>
                  <value>
                    <simpleValue value="'Aou'" />
                  </value>
                  <value>
                    <simpleValue value="'Sep'" />
                  </value>
                  <value>
                    <simpleValue value="'Oct'" />
                  </value>
                  <value>
                    <simpleValue value="'Nov'" />
                  </value>
                  <value>
                    <simpleValue value="'Dec'" />
                  </value>
                </arrayValue>
              </initialValue>
            </variable>
            <variable name="DIRS">
              <type>
                <array>
                  <dimension lower="1" upper="3" />
                  <dimension lower="0" upper="15" />
                  <baseType>
                    <string length="3" />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <simpleValue value="'N'" />
                  </value>
                  <value>
                    <simpleValue value="'NNE'" />
                  </value>
                  <value>
                    <simpleValue value="'NE'" />
                  </value>
                  <value>
                    <simpleValue value="'ENE'" />
                  </value>
                  <value>
                    <simpleValue value="'E'" />
                  </value>
                  <value>
                    <simpleValue value="'ESE'" />
                  </value>
                  <value>
                    <simpleValue value="'SE'" />
                  </value>
                  <value>
                    <simpleValue value="'SSE'" />
                  </value>
                  <value>
                    <simpleValue value="'S'" />
                  </value>
                  <value>
                    <simpleValue value="'SSW'" />
                  </value>
                  <value>
                    <simpleValue value="'SW'" />
                  </value>
                  <value>
                    <simpleValue value="'WSW'" />
                  </value>
                  <value>
                    <simpleValue value="'W'" />
                  </value>
                  <value>
                    <simpleValue value="'WNW'" />
                  </value>
                  <value>
                    <simpleValue value="'NW'" />
                  </value>
                  <value>
                    <simpleValue value="'NNW'" />
                  </value>
                  <value>
                    <simpleValue value="'N'" />
                  </value>
                  <value>
                    <simpleValue value="'NNO'" />
                  </value>
                  <value>
                    <simpleValue value="'NO'" />
                  </value>
                  <value>
                    <simpleValue value="'ONO'" />
                  </value>
                  <value>
                    <simpleValue value="'O'" />
                  </value>
                  <value>
                    <simpleValue value="'OSO'" />
                  </value>
                  <value>
                    <simpleValue value="'SO'" />
                  </value>
                  <value>
                    <simpleValue value="'SSO'" />
                  </value>
                  <value>
                    <simpleValue value="'S'" />
                  </value>
                  <value>
                    <simpleValue value="'SSW'" />
                  </value>
                  <value>
                    <simpleValue value="'SW'" />
                  </value>
                  <value>
                    <simpleValue value="'WSW'" />
                  </value>
                  <value>
                    <simpleValue value="'W'" />
                  </value>
                  <value>
                    <simpleValue value="'WNW'" />
                  </value>
                  <value>
                    <simpleValue value="'NW'" />
                  </value>
                  <value>
                    <simpleValue value="'NNW'" />
                  </value>
                  <value>
                    <simpleValue value="'N'" />
                  </value>
                  <value>
                    <simpleValue value="'NNO'" />
                  </value>
                  <value>
                    <simpleValue value="'NO'" />
                  </value>
                  <value>
                    <simpleValue value="'ONO'" />
                  </value>
                  <value>
                    <simpleValue value="'O'" />
                  </value>
                  <value>
                    <simpleValue value="'OSO'" />
                  </value>
                  <value>
                    <simpleValue value="'SO'" />
                  </value>
                  <value>
                    <simpleValue value="'SSO'" />
                  </value>
                  <value>
                    <simpleValue value="'S'" />
                  </value>
                  <value>
                    <simpleValue value="'SSW'" />
                  </value>
                  <value>
                    <simpleValue value="'SW'" />
                  </value>
                  <value>
                    <simpleValue value="'WSW'" />
                  </value>
                  <value>
                    <simpleValue value="'W'" />
                  </value>
                  <value>
                    <simpleValue value="'WNW'" />
                  </value>
                  <value>
                    <simpleValue value="'NW'" />
                  </value>
                  <value>
                    <simpleValue value="'NNW'" />
                  </value>
                </arrayValue>
              </initialValue>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1f1649b0-1f08-441e-a123-09b032bc609b</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="CONSTANTS_LOCATION">
        <baseType>
          <struct>
            <variable name="DEFAULT">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1=germany, 2=austria 3=france 4=belgium-german 5= italien-Südtirol </xhtml>
              </documentation>
            </variable>
            <variable name="LMAX">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="5" />
              </initialValue>
            </variable>
            <variable name="LANGUAGE">
              <type>
                <array>
                  <dimension lower="1" upper="5" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <simpleValue value="2" />
                  </value>
                  <value>
                    <simpleValue value="2" />
                  </value>
                  <value>
                    <simpleValue value="3" />
                  </value>
                  <value>
                    <simpleValue value="2" />
                  </value>
                  <value>
                    <simpleValue value="2" />
                  </value>
                </arrayValue>
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> language spoken in the location </xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>63dceff4-b361-4326-800c-a8d91ec4c15e</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="CONSTANTS_MATH">
        <baseType>
          <struct>
            <variable name="PI">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="3.1415926535897931" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Kreiszahl PI </xhtml>
              </documentation>
            </variable>
            <variable name="PI2">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="6.2831853071795862" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> PI * 2 </xhtml>
              </documentation>
            </variable>
            <variable name="PI4">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="12.566370614359172" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> PI * 4 </xhtml>
              </documentation>
            </variable>
            <variable name="PI05">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1.5707963267949" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> PI / 2 </xhtml>
              </documentation>
            </variable>
            <variable name="PI025">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.785398163397448" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> PI / 4 </xhtml>
              </documentation>
            </variable>
            <variable name="PI_INV">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.318309886183791" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 / PI </xhtml>
              </documentation>
            </variable>
            <variable name="E">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="2.7182818284590451" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Eulersche Konstante e </xhtml>
              </documentation>
            </variable>
            <variable name="E_INV">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.367879441171442" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 / e </xhtml>
              </documentation>
            </variable>
            <variable name="SQ2">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1.4142135623731" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wurzel von 2 </xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>177f03fe-7b14-47c8-a426-2cdeef436051</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="CONSTANTS_PHYS">
        <baseType>
          <struct>
            <variable name="C">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="299792458" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Lichtgeschwindigkeit in m/s </xhtml>
              </documentation>
            </variable>
            <variable name="E">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1.60217653E-19" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> elementarladung in Colomb = A * s </xhtml>
              </documentation>
            </variable>
            <variable name="G">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="9.80665" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Erdbeschleunigung in m / s² </xhtml>
              </documentation>
            </variable>
            <variable name="T0">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-273.15" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> absoluter Nullpunkt in °C </xhtml>
              </documentation>
            </variable>
            <variable name="RU">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="8.314472" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Universelle Gaskonstante in J / (mol · K) </xhtml>
              </documentation>
            </variable>
            <variable name="PN">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="101325" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> NormalDruck in Pa </xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b6e62329-4c48-4f1d-86a2-19ae0a9c3fd8</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="CONSTANTS_SETUP">
        <baseType>
          <struct>
            <variable name="EXTENDED_ASCII">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> setup Parameters </xhtml>
              </documentation>
            </variable>
            <variable name="CHARNAMES">
              <type>
                <array>
                  <dimension lower="1" upper="4" />
                  <baseType>
                    <string length="253" />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <simpleValue value="';&quot;&amp;quot;&amp;&amp;amp;&lt;&amp;lt;&gt;&amp;gt;&amp;euro; &amp;nbsp;¡&amp;iexcl;¢&amp;cent;£&amp;pound;¤&amp;curren;¥&amp;yen;¦&amp;brvbar;§&amp;sect;¨&amp;uml;©&amp;copy;ª&amp;ordf;«&amp;laquo;¬&amp;not;­&amp;shy;®&amp;reg;¯&amp;macr;°&amp;deg;±&amp;plusmn;²&amp;sup2;³&amp;sup3;´&amp;acute;µ&amp;micro;¶&amp;para;·&amp;middot;¸&amp;cedil;¹&amp;sup1;º&amp;ordm;»&amp;raquo;¼&amp;frac14;Û&amp;Ucirc;'" />
                  </value>
                  <value>
                    <simpleValue value="';¾&amp;frac34;¿&amp;iquest;À&amp;Agrave;Á&amp;Aacute;Â&amp;Acirc;Ã&amp;Atilde;Ä&amp;Auml;Å&amp;Aring;Æ&amp;AElig;Ç&amp;Ccedil;È&amp;Egrave;É&amp;Eacute;Ê&amp;Ecirc;Ë&amp;Euml;Ì&amp;Igrave;Í&amp;Iacute;Î&amp;Icirc;Ï&amp;Iuml;Ð&amp;ETH;Ñ&amp;Ntilde;Ò&amp;Ograve;Ó&amp;Oacute;Ô&amp;Ocirc;Õ&amp;Otilde;Ö&amp;Ouml;×&amp;times;Ø&amp;Oslash;Ù&amp;Ugrave;Ú&amp;Uacute;½&amp;frac12;'" />
                  </value>
                  <value>
                    <simpleValue value="';Ü&amp;Uuml;Ý&amp;Yacute;Þ&amp;THORN;ß&amp;szlig;à&amp;agrave;á&amp;aacute;â&amp;acirc;ã&amp;atilde;ä&amp;auml;å&amp;aring;æ&amp;aelig;ç&amp;ccedil;è&amp;egrave;é&amp;eacute;ê&amp;ecirc;ë&amp;euml;ì&amp;igrave;í&amp;iacute;î&amp;icirc;ï&amp;iuml;ð&amp;eth;ñ&amp;ntilde;ò&amp;ograve;ó&amp;oacute;ô&amp;ocirc;õ&amp;otilde;ö&amp;ouml;÷&amp;divide;ø&amp;oslash;ù&amp;ugrave;'" />
                  </value>
                  <value>
                    <simpleValue value="';ú&amp;uacute;û&amp;ucirc;ü&amp;uuml;ý&amp;yacute;þ&amp;thorn;ÿ&amp;yuml;'" />
                  </value>
                </arrayValue>
              </initialValue>
            </variable>
            <variable name="MTH_OFS">
              <type>
                <array>
                  <dimension lower="1" upper="12" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <simpleValue value="0" />
                  </value>
                  <value>
                    <simpleValue value="31" />
                  </value>
                  <value>
                    <simpleValue value="59" />
                  </value>
                  <value>
                    <simpleValue value="90" />
                  </value>
                  <value>
                    <simpleValue value="120" />
                  </value>
                  <value>
                    <simpleValue value="151" />
                  </value>
                  <value>
                    <simpleValue value="181" />
                  </value>
                  <value>
                    <simpleValue value="212" />
                  </value>
                  <value>
                    <simpleValue value="243" />
                  </value>
                  <value>
                    <simpleValue value="273" />
                  </value>
                  <value>
                    <simpleValue value="304" />
                  </value>
                  <value>
                    <simpleValue value="334" />
                  </value>
                </arrayValue>
              </initialValue>
            </variable>
            <variable name="DECADES">
              <type>
                <array>
                  <dimension lower="0" upper="8" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <simpleValue value="1" />
                  </value>
                  <value>
                    <simpleValue value="10" />
                  </value>
                  <value>
                    <simpleValue value="100" />
                  </value>
                  <value>
                    <simpleValue value="1000" />
                  </value>
                  <value>
                    <simpleValue value="10000" />
                  </value>
                  <value>
                    <simpleValue value="10000" />
                  </value>
                  <value>
                    <simpleValue value="100000" />
                  </value>
                  <value>
                    <simpleValue value="1000000" />
                  </value>
                  <value>
                    <simpleValue value="10000000" />
                  </value>
                </arrayValue>
              </initialValue>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d3477ca2-4e8c-4688-8872-a6addb6be8a6</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="ESR_DATA">
        <baseType>
          <struct>
            <variable name="TYP">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="ADRESS">
              <type>
                <string length="10" />
              </type>
            </variable>
            <variable name="DS">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="TS">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="DATA">
              <type>
                <array>
                  <dimension lower="0" upper="7" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a604c0b3-ddf2-4fd3-b0e1-b6bad31a3399</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="FRACTION">
        <baseType>
          <struct>
            <variable name="NUMERATOR">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="DENOMINATOR">
              <type>
                <INT />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>74ee3251-d3ab-48ac-b550-d5640e628960</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="HOLIDAY_DATA">
        <baseType>
          <struct>
            <variable name="NAME">
              <type>
                <string length="30" />
              </type>
            </variable>
            <variable name="DAY">
              <type>
                <SINT />
              </type>
            </variable>
            <variable name="MONTH">
              <type>
                <SINT />
              </type>
            </variable>
            <variable name="USE">
              <type>
                <SINT />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>55194d09-7b2d-45ee-b4b3-4e84540a4271</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="REAL2">
        <baseType>
          <struct>
            <variable name="R1">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> small value </xhtml>
              </documentation>
            </variable>
            <variable name="RX">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> big value </xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>53551506-c042-4606-8762-327e7b0fdf91</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="SDT">
        <baseType>
          <struct>
            <variable name="YEAR">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="MONTH">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="DAY">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="WEEKDAY">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="HOUR">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="MINUTE">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="SECOND">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="MS">
              <type>
                <INT />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1e5ea29c-02ab-4afc-8992-f1bca676b21f</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="TIMER_EVENT">
        <baseType>
          <struct>
            <variable name="TYP">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="CHANNEL">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="DAY">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="START">
              <type>
                <TOD />
              </type>
            </variable>
            <variable name="DURATION">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="LAND">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="LOR">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="LAST">
              <type>
                <DT />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ad189606-94b5-4173-b9b4-6203a525118f</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="VECTOR_3">
        <baseType>
          <struct>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Z">
              <type>
                <REAL />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>beff4b13-8fed-49a8-856c-eebf8e68a388</ObjectId>
          </data>
        </addData>
      </dataType>
    </dataTypes>
    <pous>
      <pou name="_BUFFER_CLEAR" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="PT">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="SIZE">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="ptw">
              <type>
                <pointer>
                  <baseType>
                    <DWORD />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="temp">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="end">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="end32">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* this routine uses 32 bit access to gain speed *)
(* first access bytes till pointer is aligned for 32 bit access *)
temp := pt;
end := temp + UINT_TO_DWORD(size);
end32 := end - 3;
WHILE (pt &lt; end) AND ((temp AND 16#00000003) &gt; 0) DO
	pt^ := 0;
	pt := pt + 1;
	temp := temp + 1;
END_WHILE;
(* pointer is aligned, now copy 32 bits at a time *)
ptw := pt;
WHILE ptw &lt; end32 DO (* *)
	ptw^ := 0;
	ptw := ptw + 4;
END_WHILE;
(* copy the remaining bytes in byte mode *)
pt := ptw;
WHILE pt &lt; end DO
	pt^ := 0;
	pt := pt + 1;
END_WHILE;

_BUFFER_CLEAR := TRUE;

(* revision History
hm 	5. mar. 2008	rev 1.0
	original version

hm	16. mar. 2008	rev 1.1
	added type conversion to avoid warnings under codesys 30
	chaged type of input size to uint
	deleted unused variable i

hm	31. oct. 2008	rev 1.2
	corrected an error while routine would write outside of arrays

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5f0aad9f-fb78-4b26-b8b7-90857bfe74f3</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="_BUFFER_INIT" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="PT">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="SIZE">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="INIT">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="ptw">
              <type>
                <pointer>
                  <baseType>
                    <DWORD />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="temp">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="end">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="end32">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* this routine uses 32 bit access to gain speed *)
(* first access bytes till pointer is aligned for 32 bit access *)
temp := pt;
end := temp + UINT_TO_DWORD(size);
end32 := end - 3;
WHILE (pt &lt; end) AND ((temp AND 16#00000003) &gt; 0) DO
	pt^ := init;
	pt := pt + 1;
	temp := temp + 1;
END_WHILE;
(* pointer is aligned, now copy 32 bits at a time *)
ptw := pt;
temp := SHL(BYTE_TO_DWORD(init),24) OR SHL(BYTE_TO_DWORD(init),16) OR SHL(BYTE_TO_DWORD(init),8) OR BYTE_TO_DWORD(init);
WHILE ptw &lt; end32 DO
	ptw^ := temp;
	ptw := ptw + 4;
END_WHILE;
(* copy the remaining bytes in byte mode *)
pt := ptw;
WHILE pt &lt; end DO
	pt^ := init;
	pt := pt + 1;
END_WHILE;

_BUFFER_INIT := TRUE;

(* revision History
hm 	5. mar. 2008	rev 1.0
	original version

hm	16. mar. 2008	rev 1.1
	added type conversion to avoid warnings under codesys 3.0
	chaged type of input size to uint.

hm	31. oct. 2008	rev 1.2
	corrected an error while routine would write outside of arrays

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8b90ecb1-4862-4bcb-be6c-7c4e128bc7c3</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="_BUFFER_INSERT" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="STR">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="POS">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="PT">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32767" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="SIZE">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="end">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="lx">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">lx := LEN(str);
end := pos + lx;
(* first move the upper part of the buffer to make space for the string *)
FOR i := UINT_TO_INT(size) - 1 TO end BY -1 DO
	pt^[i] := pt^[i-lx];
END_FOR;
(* copy the string *)
_BUFFER_INSERT := _STRING_TO_BUFFER(str, pos, PT, size);


(* revision History
hm 	9. mar. 2008	rev 1.0
	original version

hm	16. mar. 2008	rev 1.1
	changed type of input size to uint

hm	13. may. 2008	rev 1.2
	changed type of pointer to array[1..32767]
	changed size of string to STRING_LENGTH

hm	23. mar. 2009	rev 1.3
	avoid writing to input pos

hm	12. nov. 2009	rev 1.4
	code optimized

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8f47b667-f334-464f-8810-e3095433f546</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="_BUFFER_UPPERCASE" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="PT">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="SIZE">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pos := 0;
WHILE pos &lt; size DO
	PT^[pos] := TO_UPPER(pt^[pos]);
	pos := pos + 1;
END_WHILE;

_BUFFER_UPPERCASE := TRUE;

(* revision History
hm 	20. jan. 2011	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>bef19552-428f-4139-82dc-b97763e1b041</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="_STRING_TO_BUFFER" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="STR">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="POS">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="PT">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32767" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="SIZE">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="ps">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="end">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">ps := ADR(str);
end := MIN(pos + LEN(str), UINT_TO_INT(size));
IF end &gt; 0 THEN end := end -1; END_IF;
FOR i := pos TO end DO
	pt^[i] := ps^;
	ps := ps + 1;
END_FOR;

_STRING_TO_BUFFER := TRUE;

(* revision History

hm 	5. mar. 2008	rev 1.0
	original version

hm	16. mar. 2008	rev 1.1
	changed type of input size to uint

hm	13. may. 2008	rev 1.2
	changed type of pointer to array[1..32767]
	changed size of string to STRING_LENGTH

hm	12. nov. 2009	rev 1.3
	limit end to size - 1

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ffa2002f-20af-49bb-bcbb-4c37818eadc9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BUFFER_COMP" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="PT1">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32767" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="SIZE1">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="PT2">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32767" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="SIZE2">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="START">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="j">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="end">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="firstbyte">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* search for first character match *)
IF size2 &lt;= size1 THEN
	end := size1 - size2;
	firstbyte := PT2^[0];
	FOR i := START TO end DO
		IF PT1^[i] = firstbyte THEN
			(* first character matches, now compare rest of array *)
			j := 1;
			WHILE j &lt; size2 DO
				IF pt2^[j] &lt;&gt; pt1^[j+i] THEN EXIT; END_IF;
				j := j + 1;
			END_WHILE;
			(* when J &gt; size2 a match was found return the position i in buffer1 *)
			IF j = size2 THEN
				BUFFER_COMP := i;
				RETURN;
			END_IF;
		END_IF;
	END_FOR;
END_IF;
BUFFER_COMP := -1;


(*
hm 14. nov. 2008	rev 1.0
	original version

hm	12. nov. 2009	rev 1.1
	performance increase

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1703a4be-04d1-4d26-8804-d0e36a777646</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BUFFER_SEARCH" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="PT">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32767" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="SIZE">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="STR">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="POS">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="IGN">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="ps">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="STRING_LENGTH" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="chx">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="end">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="k">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="lx">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">ps := ADR(STR);
lx := LEN(STR);
end := MIN(SIZE - lx, SIZE - 1);
lx := lx - 1;
FOR i := pos TO end DO
	FOR k := 0 TO lx DO
		IF IGN THEN chx := TO_UPPER(pt^[i+k]); ELSE chx := pt^[i+k]; END_IF;
		IF ps^[k] &lt;&gt; chx THEN EXIT; END_IF;
	END_FOR;
	IF k &gt; lx THEN
		BUFFER_SEARCH := i;
		RETURN;
	END_IF;
END_FOR;
BUFFER_SEARCH := -1;


(* revision History

hm 5. mar. 2008	rev 1.0
	original version

hm	16. mar. 2008	rev 1.1
	chaged type of input size to uint

hm	13. may. 2008	rev 1.2
	changed type of pointer to array[1..32767]
	changed size of string to STRING_LENGTH

hm	12. nov. 2009	rev 1.3
	limit end to array size

hm	25. jan. 2011	rev 1.4
	ign = True will now ignore case
	return -1 if nothing found
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>aafa40fe-2b6b-47be-9a6e-3ae0e8a72fda</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BUFFER_TO_STRING" pouType="function">
        <interface>
          <returnType>
            <string length="STRING_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="PT">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32767" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="SIZE">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="START">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="STOP">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="ps">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="stp">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="sta">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">ps := ADR(BUFFER_TO_STRING);
IF size = 0 THEN RETURN; END_IF;
sta := MIN(start, size -1);
stp := MIN(stop, size -1);

(* check for maximum string_length *)
IF UINT_TO_INT(stp - sta + 1) &gt;= STRING_LENGTH THEN
	stp := sta + INT_TO_UINT(STRING_LENGTH) - 1;
END_IF;

FOR i := sta TO stp DO
	ps^ := pt^[i];
	ps := ps + 1;
END_FOR;

(* terminate the string *)

ps^ := 0;



(* revision History
hm 	5. mar. 2008	rev 1.0
	original version

hm	16. mar. 2008	rev 1.1
	changed type of input size to uint

hm	13. may. 2008	rev 1.2
	changed type of pointer to array[0..32767]
	changed size of string to STRING_LENGTH

hm	12. jun. 2008	rev 1.3
	check for pointer overrun
	change input start and stop to uint
	added type conversions to avoid warnings under codesys 3.0

hm	23. mar. 2009	rev 1.4
	avoid writing to input stop

hm	12. nov. 2009 rev 1.5
	limit start and stop to size -1

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5e5b404b-1dd8-4436-bde4-416151f36c60</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DRIVER_1" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Toggle_Mode">
              <type>
                <BOOL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Timeout">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="off">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF off.Q THEN Q := FALSE; END_IF;
IF rst THEN
	Q := FALSE;
ELSIF set THEN
	Q := TRUE;
ELSIF IN AND NOT edge THEN
	IF toggle_mode THEN q := NOT Q; ELSE q := TRUE; END_IF;
END_IF;
edge := in;
IF timeout &gt; t#0s THEN off(in := Q, PT := Timeout); END_IF;


(* revision history
hm	2. jan 2008		rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>643fac37-568d-445a-84a7-f93963324f5e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DRIVER_4" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Toggle_Mode">
              <type>
                <BOOL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Timeout">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="d0">
              <type>
                <derived name="DRIVER_1" />
              </type>
            </variable>
            <variable name="d1">
              <type>
                <derived name="DRIVER_1" />
              </type>
            </variable>
            <variable name="d2">
              <type>
                <derived name="DRIVER_1" />
              </type>
            </variable>
            <variable name="d3">
              <type>
                <derived name="DRIVER_1" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">D0(Set:=set, in:=in0, rst:=rst, toggle_mode:=toggle_mode, timeout:=timeout);
D1(Set:=set, in:=in1, rst:=rst, toggle_mode:=toggle_mode, timeout:=timeout);
D2(Set:=set, in:=in2, rst:=rst, toggle_mode:=toggle_mode, timeout:=timeout);
D3(Set:=set, in:=in3, rst:=rst, toggle_mode:=toggle_mode, timeout:=timeout);
Q0 := D0.Q;
Q1 := D1.Q;
Q2 := D2.Q;
Q3 := D3.Q;


(* revision history
hm	2. jan 2008		rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e2d9b8c0-eef1-418c-8b16-f987a573656b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DRIVER_4C" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Timeout">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="SX">
              <type>
                <array>
                  <dimension lower="1" upper="7" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <simpleValue value="1" />
                  </value>
                  <value>
                    <simpleValue value="3" />
                  </value>
                  <value>
                    <simpleValue value="7" />
                  </value>
                  <value>
                    <simpleValue value="15" />
                  </value>
                </arrayValue>
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="SN">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="off">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF RST OR off.Q THEN
	SN := 0;
ELSIF IN AND NOT edge THEN
	SN := SN + 1;
	IF SN &gt; 7 OR SX[SN] = 0 THEN SN := 0; END_IF;
END_IF;
edge := in;
IF SN &gt; 0 THEN
	Q0 := SX[SN].0;
	Q1 := SX[SN].1;
	Q2 := SX[SN].2;
	Q3 := SX[SN].3;
ELSE
	Q0 := FALSE;
	Q1 := FALSE;
	Q2 := FALSE;
	Q3 := FALSE;
END_IF;

(* maximaum timeout *)
IF timeout &gt; t#0s THEN off(in := SN &gt; 0, PT := Timeout); END_IF;


(* revision history
hm	23. mar. 2009	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>fa068df6-b002-45f4-a9c4-5d155a49a853</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FLOW_CONTROL" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="REQ">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ENQ">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="T_AUTO">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#60m0s0ms" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="T_DELAY">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1380m0s0ms" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="timer">
              <type>
                <derived name="TP_1D" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">STATUS := 100;
IF RST THEN
	Q := FALSE;
	timer(rst := TRUE);
	timer.RST := FALSE;
	STATUS := 103;
ELSIF ENQ THEN
	IF IN THEN
		status := 101;
	END_IF;
	IF REQ THEN
		(* timer will generate a timed pulse after TP goes high *)
		timer.PT1 := T_AUTO;
		timer.PTD := T_DELAY;
		timer.IN := TRUE;
		STATUS := 102;
	END_IF;
END_IF;


(* set output and run timer *)
timer();
timer.IN := FALSE;
Q := (IN AND ENQ) OR timer.Q;



(* revision history
hm 	28. jun. 2008 	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b201b613-0562-41be-aab6-9e9b39f27984</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_Profile" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="K">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="O">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="M">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="value_0">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="time_1">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="value_1">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="time_2">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="value_2">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="time_3">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="value_3">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="time_10">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="value_10">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="time_11">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="value_11">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="time_12">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="value_12">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="time_13">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="value_13">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="RUN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ET">
              <type>
                <TIME />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="state">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="ta">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tb">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="t0">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="temp">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="va">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="vb">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := DWORD_TO_TIME(T_PLC_MS());

(* determine start condition *)
IF E AND NOT edge THEN
	RUN := TRUE;
	ET := t#0s;
	t0 := tx;
	ta := tx;
	tb := multime(time_1, M);
	va := value_0;
	vb := value_1;
	temp := value_0;
	state := 1;
END_IF;
edge := E;

(* generate startup profile *)
IF run THEN
	CASE state OF
		1:	IF tx - ta &gt;= tb THEN
				ta := ta + tb;
				tb := multime(time_2 - time_1, M);
				va := value_1;
				vb := value_2;
				temp := value_1;
				state := 2;
			ELSE
				temp := ((vb - va) * TIME_TO_REAL(tx - ta) / TIME_TO_REAL(tb) + va);
			END_IF;
		2:	IF tx - ta &gt;= tb THEN
				ta := ta + tb;
				tb := multime(time_3 - time_2, M);
				va := value_2;
				vb := value_3;
				temp := value_2;
				state := 3;
			ELSE
				temp := ((vb - va) * TIME_TO_REAL(tx - ta) / TIME_TO_REAL(tb) + va);
			END_IF;
		3:	IF tx - ta &gt;= tb THEN
				ta := ta + tb;
				tb := multime(time_10 - time_3, M);
				va := value_3;
				vb := value_10;
				temp := value_3;
				state := 4;
			ELSE
				temp := ((vb - va) * TIME_TO_REAL(tx - ta) / TIME_TO_REAL(tb) + va);
			END_IF;
		4 :	IF tx - ta &gt;= tb THEN
				ta := ta + tb;
				tb := multime(time_11 - time_10, M);
				va := value_10;
				vb := value_11;
				temp := value_10;
				IF E THEN state := 5; ELSE state := 6; END_IF;
			ELSE
				temp := ((vb - va) * TIME_TO_REAL(tx - ta) / TIME_TO_REAL(tb) + va);
			END_IF;
		5:	(* extend the signal while E is true *)
			IF E THEN
				ta := tx;
			ELSE
				state := 6;
			END_IF;
		6:	IF tx - ta &gt;= tb THEN
				ta := ta + tb;
				tb := multime(time_12 - time_11, M);
				va := value_11;
				vb := value_12;
				temp := value_11;
				state := 7;
			ELSE
				temp := ((vb - va) * TIME_TO_REAL(tx - ta) / TIME_TO_REAL(tb) + va);
			END_IF;
		7:	IF tx - ta &gt;= tb THEN
				ta := ta + tb;
				tb := multime(time_13 - time_12, M);
				va := value_12;
				vb := value_13;
				temp := value_12;
				state := 8;
			ELSE
				temp := ((vb - va) * TIME_TO_REAL(tx - ta) / TIME_TO_REAL(tb) + va);
			END_IF;
		8:	IF tx - ta &gt;= tb THEN
				temp := value_13;
				run := FALSE;
			ELSE
				temp := ((vb - va) * TIME_TO_REAL(tx - ta) / TIME_TO_REAL(tb) + va);
			END_IF;
	END_CASE;
	Y := temp * K + O;
	ET := tx - t0;
END_IF;

(* revision history
hm	27 feb 2007		rev 1.0
	original version

hm	15. sep2007		rev 1.1
	replaced Time() with T_PLC_MS for compatibility and performance reasons

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>aecdf0d1-6c02-4d85-9792-2660c3b17965</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="INC_DEC" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="CHa">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="CHb">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="dir">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edgea">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="clk">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="clka">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="clkb">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="edgeb">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="axb">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">axb := cha XOR chb;

(* create pulses for channel a *)
clka := cha XOR edgea;
edgea := cha;

clkb := chb XOR edgeb;
edgeb := chb;

(* create pulses for both channels *)
clk := clka OR clkb;

(* set the direction output *)
IF axb AND clka THEN dir := TRUE; END_IF;
IF axb AND clkb THEN dir := FALSE; END_IF;

(* increment or decrement the counter *)
IF clk AND dir THEN cnt := cnt + 1; END_IF;
IF clk AND NOT dir THEN cnt := cnt -1; END_IF;

(* reset the counter if rst active *)
IF rst THEN cnt := 0; END_IF;
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>81f5e27e-8abe-471c-9825-cb335ccc9a2b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="INTERLOCK" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="I1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="I2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TL">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="T1">
              <type>
                <derived name="TOF" />
              </type>
            </variable>
            <variable name="T2">
              <type>
                <derived name="TOF" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* the input signal have a run delay to lockout the other input *)
T1(IN := I1, PT := TL);
T2(IN := I2, PT := TL);

Q1 := I1 AND NOT t2.Q;
Q2 := I2 AND NOT t1.Q;


(* revision history

hm	28 sep 2007		rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4b5f6878-c118-48e5-b690-cf0dcc682b88</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="INTERLOCK_4" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="I0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="I1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="I2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="I3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MODE">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="TP">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="in">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="last">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="old">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="lmode">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* check if enable is active *)
IF E THEN
(* reset all vars when there is a mode change on thy fly *)
	IF mode &lt;&gt; lmode THEN
		out := 0;
		last := 0;
		old := 0;
		lmode := mode;
	END_IF;
	(* load inputs into in *)
	in.0 := I0;
	in.1 := I1;
	in.2 := I2;
	in.3 := I3;
	(* only execute when there is any change *)
	IF in &lt;&gt; last THEN
		(* only execute when inputs have chages state *)
		CASE mode OF
			0:	(* output directly display inputs as bits in byte out *)
				out := in;

			1:	(* the input with the highest number will be acepted *)
				IF in.3 THEN out := 8;
				ELSIF in.2 THEN out := 4;
				ELSIF in.1 THEN out := 2;
				ELSE out := in;
				END_IF;

			2:	(* input last pressed will be displayed only *)
				last := ((in XOR last) AND in);
				IF last.3 THEN out := 8;
				ELSIF last.2 THEN out := 4;
				ELSIF last.1 THEN out := 2;
				ELSE out := last;
				END_IF;

			3:	(* any input active will disable all other inputs *)
				IF (out AND in) = 0 THEN
					IF in.3 THEN out := 8;
					ELSIF in.2 THEN out := 4;
					ELSIF in.1 THEN out := 2;
					ELSE out := in;
					END_IF;
				END_IF;

		END_CASE;
		last := in;
	END_IF;
	tp := out &lt;&gt; old;
	old := out;
ELSE
	out := 0;
	last := 0;
	old := 0;
	lmode := 0;
	tp := FALSE;
END_IF;


(* revision history
hm	24. oct 2008	rev 1.0
	original version

hm	14. mar. 2009	rev 1.1
	replaced double assignments

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d686a97e-3715-4809-a4ca-be821f441c24</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MANUAL" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ON">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="OFF">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MANUAL := NOT OFF AND (IN OR ON);



(* revision history
hm	21. nov 2008	rev 1.0
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>51bf13e9-d81d-43e9-a836-389754fc9db2</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MANUAL_1" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MAN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="M_I">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="S_edge">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="r_edge">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT man THEN
	Q := IN;
	STATUS := 100;
	edge := FALSE;
ELSIF NOT s_edge AND set THEN
	Q := TRUE;
	edge := TRUE;
	status := 101;
ELSIF NOT r_edge AND rst THEN
	Q := FALSE;
	edge := TRUE;
	status := 102;
ELSIF NOT edge THEN
	Q := M_I;
	status := 103;
END_IF;

(* remember levels of manual signals *)
s_edge := SET;
r_edge := RST;



(* revision history
hm	17. jun 2008	rev 1.0
	original version

hm	17. oct 2008	rev 1.1
	deleted unnecessary variable m_edge

hm	14. mar. 2009	rev 1.2
	replaced double assignments

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0894d015-e26b-4390-a64e-a0e4b63d029f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MANUAL_2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ENA">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ON">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="OFF">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MAN">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF ena THEN
	IF NOT ON AND NOT OFF THEN
		Q := IN;
		STATUS := 100;
	ELSIF on AND NOT off THEN
		Q := TRUE;
		STATUS := 101;
	ELSIF NOT on AND off THEN
		q := FALSE;
		STATUS := 102;
	ELSE
		Q := MAN;
		STATUS := 103;
	END_IF;
ELSE
	Q := FALSE;
	STATUS := 104;
END_IF;



(* revision history
hm	22. sep. 2008		rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>efa0f7ff-a06f-465a-a8bc-ee1b4cfde02d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MANUAL_4" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="I0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="I1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="I2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="I3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MAN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="STP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="M0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="M1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="M2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="M3">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="tog">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF man THEN
	IF NOT TOG THEN
		Q0 := M0;
		Q1 := M1;
		Q2 := M2;
		Q3 := M3;
		STATUS := 101;
	END_IF;
	IF STP AND NOT edge THEN
		tog := TRUE;
		CASE pos OF
			0:	Q0 := TRUE;
				Q1 := FALSE;
				Q2 := FALSE;
				Q3 := FALSE;
				STATUS := 110;
			1:	Q0 := FALSE;
				Q1 := TRUE;
				Q2 := FALSE;
				Q3 := FALSE;
				STATUS := 111;
			2:	Q0 := FALSE;
				Q1 := FALSE;
				Q2 := TRUE;
				Q3 := FALSE;
				STATUS := 112;
			3:	Q0 := FALSE;
				Q1 := FALSE;
				Q2 := FALSE;
				Q3 := TRUE;
				STATUS := 113;
		END_CASE;
		pos := INC(pos,1,3);
	END_IF;
ELSE
	Q0 := I0;
	Q1 := I1;
	Q2 := I2;
	Q3 := I3;
	STATUS := 100;
	tog := FALSE;
	pos := 0;
END_IF;

(* remember status of stp *)
edge := STP;



(* revision history
hm	17. jun 2008		rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5d9819a1-e1ed-431b-a460-dcef3e66370a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="PARSET" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="A0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="A1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="X01">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X02">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X03">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X04">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X11">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X12">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X13">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X14">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X21">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X22">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X23">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X24">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X31">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X32">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X33">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X34">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="TC">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="P1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="P2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="P3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="P4">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="X">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <dimension lower="1" upper="4" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="S1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="S2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="S3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="S4">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="last">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="start">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="set">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system_time *)
tx := T_PLC_MS();

(* init sequence *)
IF NOT init THEN
	set.0 := NOT A0;
	init := TRUE;
	X[0,1] := X01;
	X[0,2] := X02;
	X[0,3] := X03;
	X[0,4] := X04;
	X[1,1] := X11;
	X[1,2] := X12;
	X[1,3] := X13;
	X[1,4] := X14;
	X[2,1] := X21;
	X[2,2] := X22;
	X[2,3] := X23;
	X[2,4] := X24;
	X[3,1] := X31;
	X[3,2] := X32;
	X[3,3] := X33;
	X[3,4] := X34;
	P1 := X01;
	P2 := X02;
	P3 := X03;
	P4 := X04;
END_IF;

(* check for input change *)
IF (A0 XOR set.0) OR (A1 XOR set.1) THEN
	(* a new set is selected *)
	set.0 := A0;
	set.1 := A1;
	IF tc &gt; t#0s THEN
		start := TRUE;
		last := tx;
		(* save the step speed for the output changes in S *)
		S1 := (X[set,1] - P1)/DWORD_TO_REAL(TIME_TO_DWORD(tc));
		S2 := (X[set,2] - P2)/DWORD_TO_REAL(TIME_TO_DWORD(tc));
		S3 := (X[set,3] - P3)/DWORD_TO_REAL(TIME_TO_DWORD(tc));
		S4 := (X[set,4] - P4)/DWORD_TO_REAL(TIME_TO_DWORD(tc));
	END_IF;
ELSIF start AND tx - last &lt; TIME_TO_DWORD(tc) THEN
	(* ramp the outputs to the new value *)
	P1 := X[set,1] - S1 * DWORD_TO_REAL(TIME_TO_DWORD(Tc) - tx + last);
	P2 := X[set,2] - S2 * DWORD_TO_REAL(TIME_TO_DWORD(Tc) - tx + last);
	P3 := X[set,3] - S3 * DWORD_TO_REAL(TIME_TO_DWORD(Tc) - tx + last);
	P4 := X[set,4] - S4 * DWORD_TO_REAL(TIME_TO_DWORD(Tc) - tx + last);
ELSE
	(* make sure outputs match the correct set values *)
	start := FALSE;
	P1 := X[set,1];
	P2 := X[set,2];
	P3 := X[set,3];
	P4 := X[set,4];
END_IF;

(* revision history
hm	2.11.2007		rev 1.0
	original version

hm	16. mar. 2008	rev 1.1
	added type conversions to avoid warnings under codesys 3.0

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e706a545-9629-4601-a27c-e0d02981124a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="PARSET2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="X01">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X02">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X03">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X04">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X11">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X12">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X13">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X14">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X21">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X22">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X23">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X24">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X31">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X32">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X33">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="X34">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="L1">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="L2">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="L3">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="TC">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="P1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="P2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="P3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="P4">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="Pset">
              <type>
                <derived name="parset" />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* init sequence *)
IF NOT init THEN
	init := TRUE;
	pset(TC:=TC, X01:=X01, X02:=X02, X03:=X03, X04:=X04, X11:=X11, X12:=X12, X13:=X13, X14:=X14, X21:=X21, X22:=X22, X23:=X23, X24:=X24, X31:=X31, X32:=X32, X33:=X33, X34:=X34);
END_IF;
IF ABS(X) &lt; L1 THEN
	pset(A0 := FALSE, A1 := FALSE);
ELSIF ABS(X) &lt; L2 THEN
	pset(A0 := TRUE, A1 := FALSE);
ELSIF ABS(x) &lt; L3 THEN
	pset(A0 := FALSE, A1 := TRUE);
ELSE
	pset(A0 := TRUE, A1 := TRUE);
END_IF;
P1 := pset.P1;
P2 := pset.P2;
P3 := pset.P3;
P4 := pset.P4;

(* revision history
hm		3.11.2007		rev 1.0
	original version

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5efaffc4-0b91-4dc3-a113-bb63de157f1e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SIGNAL" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SIG">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="TS">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="step">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
          <localVars constant="true">
            <variable name="one">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF in THEN
	(* an alarm is present read system time first *)
	tx := T_PLC_MS();
	(* calculate the step counter which is the lowest 3 bits of (time / ts) *)
	IF ts &gt; t#0s THEN
		step := DWORD_TO_BYTE(tx / TIME_TO_DWORD(ts) AND 16#0000_0007);
	ELSE
		step := DWORD_TO_BYTE(SHR(tx,7) AND 16#0000_0007);
	END_IF;
	(* convert the value 0-7 in step into one bit only (bit 0-7) *)
	step := SHL(one,step);
	(* generate the output signal *)
	Q := (step AND sig) &gt; 0;
ELSE
	Q := FALSE;
END_IF;

(* revision history
hm	13.12.2007		rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>68491bf4-5cfa-444f-a981-006b4a9e083a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SIGNAL_4" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TS">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="S1">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="2#11111111" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="S2">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="2#11110000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="S3">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="2#10101010" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="S4">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="2#10100000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="sig">
              <type>
                <derived name="SIGNAL" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* an alarm is present read system time first *)
(* check if an alarm is present if yes set sig to the alarm pattern otherwise exit the routine *)
IF in1 THEN
	sig(in := TRUE, sig := s1, TS := TS);
ELSIF in2 THEN
	sig(in := TRUE, sig := s2, TS := TS);
ELSIF in3 THEN
	sig(in := TRUE, sig := s3, TS := TS);
ELSIF in4 THEN
	sig(in := TRUE, sig := s4, TS := TS);
ELSE
	sig(in := FALSE);
END_IF;

(* set the output *)
Q := sig.Q;


(* revision history
hm	13.12.2007		rev 1.0
	original version

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>547c6909-bbf2-41cd-8c32-b98b564ee41e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SRAMP" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="A_UP">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="A_DN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="VU_MAX">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="VD_MAX">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LIMIT_HIGH">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LIMIT_LOW">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="V">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="cycle_time">
              <type>
                <derived name="TC_S" />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read the system_time in microseconds *)
cycle_time();

(* assure range of inputs *)
A_up := MAX(0.0, A_UP);
A_dn := MIN(0.0, A_dn);
VU_max := MAX(0.0, VU_max);
VD_max := MIN(0.0, VD_MAX);

(* calculate the output offset *)
IF rst OR NOT init THEN
	init := TRUE;
	Y := 0.0;
	V := 0.0;
ELSIF X = Y THEN
	v := 0.0;
ELSIF X &gt; Y THEN
	(* output is too low &gt;&gt; ramp up and brake at the end *)
	(* accelerate the speed and limit to vu_max *)
	v := MIN(v + A_UP * cycle_time.TC, vu_max);
	(* calculate the max speed to be able to brake and select the lowest *)
	v := MIN(SQRT((Y-X) * 2.0 * A_DN), v);
	(* calculate the output and obey limits *)
	y := LIMIT(limit_low, y + MIN(v * cycle_time.TC, X-Y), limit_high);
ELSIF X &lt; Y THEN
	(* output is too high &gt;&gt; ramp dn and brake at the end *)
	(* accelerate the speed and limit to vd_max *)
	v := MAX(v + A_DN * cycle_time.TC, vd_max);
	(* calculate the max speed to be able to brake and select the lowest *)
	v := MAX(-SQRT((Y-X) * 2.0 * A_UP), v);
	(* calculate the output and obey limits *)
	y := LIMIT(limit_low, y + MAX(v * cycle_time.TC, X-Y), limit_high);
END_IF;


(* revision history
hm	13. mar. 2008	rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	real constants updated to new systax using dot																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											

*)


</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>afa0bc8b-6928-4d72-8ef5-de0c8ccca2bf</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TUNE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SU">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SD">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SS">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.1" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Limit_L">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="LIMIT_H">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="100" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="RST_val">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="SET_val">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="100" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="T1">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#500ms" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="T2">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#2s0ms" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="S1">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="2" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="S2">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="10" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="start">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="start2">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="state">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="in">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="step">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="SPEED">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Y_start">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Y_start2">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := T_PLC_MS();

IF rst THEN
	Y := RST_val;
	state := 0;
ELSIF set THEN
	Y := SET_val;
	state := 0;
ELSIF state &gt; 0 THEN
	(* key has been pushed state machine operating *)
	(* first read the correct input *)
	IF state = 1 THEN
		(* step up *)
		in := su;
	ELSE
		(* step down *)
		in := sd;
	END_IF;
	(* check for single step operation *)
	IF NOT in AND tx - start &lt;= TIME_TO_DWORD(T1) THEN
		Y := Y_start + step;
		state := 0;
	(* check if fast ramp needs to be generated *)
	ELSIF in AND tx - start &gt;= TIME_TO_DWORD(T2) THEN
		Y := Y_start2 + DWORD_TO_REAL(tx - start2) * s2 / speed;
	(* check if slow ramp needs to be generated *)
	ELSIF in AND tx - start &gt;= TIME_TO_DWORD(T1) THEN
		Y := Y_start + DWORD_TO_REAL(tx - start - TIME_TO_DWORD(T1)) * S1 / speed;
		start2 := tx;
		Y_start2 := Y;
	ELSIF NOT in THEN
		state := 0;
	END_IF;
ELSIF su THEN
	(* slow step up *)
	state := 1;
	start := tx;
	step := ss;
	speed := 1000.0;
	Y_start := Y;
ELSIF sd THEN
	(* slow step down *)
	state := 2;
	start := tx;
	step := -ss;
	speed := -1000.0;
	Y_start := Y;
END_IF;

(* make sure output does not exceed limits *)
Y := LIMIT(LIMIT_L, Y, LIMIT_H);

(* revision history
hm	3.11.2007		rev 1.0
	original version

hm	16. mar. 2008	rev 1.1
	added type conversions to avoid warnings under codesys 3.0

hm	11. mar. 2009	rev 1.2
	real constants updated to new systax using dot																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>be3321b5-bced-412d-bb5c-9458955f7d04</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TUNE2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SU">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SD">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="FU">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="FD">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SS">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.1" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="FS">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="5" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Limit_L">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="LIMIT_H">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="100" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="RST_val">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="SET_val">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="100" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="TR">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#500ms" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="S1">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="2" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="S2">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="10" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="start">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="state">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="in">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="step">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="SPEED">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Y_start">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := T_PLC_MS();

IF rst THEN
	Y := RST_val;
	state := 0;
ELSIF set THEN
	Y := SET_val;
	state := 0;
ELSIF state &gt; 0 THEN
	(* key has been pushed state machine operating *)
	(* first read the correct input *)
	CASE state OF
		1 :	(* slow up *)
			in := su;
		2 :	(* slow down *)
			in := sd;
		3 :	(* fast up *)
			in := fu;
		4 :	(* fast down *)
			in := fd;
	END_CASE;
	(* check for single step operation *)
	IF NOT in AND tx - start &lt;= TIME_TO_DWORD(TR) THEN
		Y := Y_start + step;
		state := 0;
	(* check if ramp needs to be generated *)
	ELSIF in AND tx - start &gt;= TIME_TO_DWORD(TR) THEN
		Y := Y_start + DWORD_TO_REAL(tx - start - TIME_TO_DWORD(TR)) * speed;
	ELSIF NOT in THEN
		state := 0;
	END_IF;
ELSIF su THEN
	(* slow step up *)
	state := 1;
	start := tx;
	step := ss;
	speed := s1 * 1.0E-3;
	Y_start := Y;
ELSIF sd THEN
	(* slow step down *)
	state := 2;
	start := tx;
	step := -ss;
	speed := -s1 * 1.0E-3;
	Y_start := Y;
ELSIF fu THEN
	(* fast step up *)
	state := 3;
	start := tx;
	step := fs;
	speed := s2 * 1.0E-3;
	y_start := Y;
ELSIF fd THEN
	(* fast step down *)
	state := 4;
	start := tx;
	step := -fs;
	speed := -s2 * 1.0E-3;
	y_start := Y;
END_IF;

(* make sure output does not exceed limits *)
Y := LIMIT(LIMIT_L, Y, LIMIT_H);

(* revision history
hm	3.11.2007		rev 1.0
	original version

hm	16. 3. 2008	rev 1.1
	added type conversions to avoid warnings in codesys 3.0
	improved performance

hm	11. mar. 2009	rev 1.2
	real constants updated to new systax using dot																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7e476db2-b83f-4313-84b1-e2470fb4d1e1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BAND_B" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="B">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X &lt; B THEN
	BAND_B := 0;
ELSIF X &gt; BYTE#255-B THEN
	BAND_B := 255;
ELSE
	BAND_B := X;
END_IF;



(* revision history
hm	21. nov. 2008	rev 1.0
	original version

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>11f8a954-cfe7-4bf5-aa64-b5d0e50ddc45</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CONTROL_SET1" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Kt">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Tt">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="PI">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PID">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="P_K">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.5" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="PI_K">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.45" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="PI_TN">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.83" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="PID_K">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.6" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="PID_TN">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.5" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="PID_TV">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.125" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="KP">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="TN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="TV">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="KI">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="KD">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF pi AND PID THEN
	KP := 0.0;
	TN := 0.0;
	TV := 0.0;
ELSIF PID THEN
	KP := PID_K * Kt;
	TN := PID_TN * Tt;
	TV := PID_TV * Tt;
ELSIF PI THEN
	KP := PI_K * Kt;
	TN := PI_TN * Tt;
ELSE
	KP := P_K * Kt;
END_IF;

(* KI and KD are calculated *)
IF tn &gt; 0.0 THEN KI := KP / TN; ELSE KI := 0.0; END_IF;
KD := KP * TV;

(* revision history
hm	4. nov 2007	rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	real constants updated to new systax using dot																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>3da13fc8-3fdd-48d1-af62-c1955ac3885a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CONTROL_SET2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="KS">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="TU">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="TG">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="PI">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PID">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="P_K">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="PI_K">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.9" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="PI_TN">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="3.33" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="PID_K">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1.2" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="PID_TN">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="2" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="PID_TV">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.5" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="KP">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="TN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="TV">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="KI">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="KD">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="TX">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF TU &gt; 0.0 AND KS &gt; 0.0 THEN TX := TG / TU / KS; END_IF;
IF pi AND PID THEN
	KP := 0.0;
	TN := 0.0;
	TV := 0.0;
ELSIF PID THEN
	KP := PID_K * TX;
	TN := PID_TN * TU;
	TV := PID_TV * TU;
ELSIF PI THEN
	KP := PI_K * TX;
	TN := PI_TN * TU;
ELSE
	KP := P_K * TX;
END_IF;

(* KI and KD are calculated *)
IF TN &gt; 0.0 THEN KI := KP / TN; ELSE KI := 0.0; END_IF;
KD := KP * TV;

(* revision history
hm	4. nov 2007	rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	real constants updated to new systax using dot																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>da0c41d5-9944-472b-88b2-f071510ccf63</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CTRL_IN" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="SET_POINT">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="ACTUAL">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="NOISE">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* calculate the process error DIFF *)
CTRL_IN := DEAD_ZONE(SET_POINT - ACTUAL, NOISE);


(* revision history
hm 	2. jun. 2008 	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e626a7da-9d8d-49a3-9b0d-112c467183de</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CTRL_OUT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="CI">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="OFFSET">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="MAN_IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LIM_L">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LIM_H">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="MANUAL">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LIM">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">Y := SEL(MANUAL, CI, MAN_IN) + OFFSET;

(* Limit the output *)
IF Y &gt; LIM_L AND Y &lt; LIM_H THEN
	LIM := FALSE;
ELSE
	Y := LIMIT(LIM_L, Y, LIM_H);
	LIM := TRUE;
END_IF;



(* revision history
hm 	2. jun. 2008 	rev 1.0
	original version

hm	5. nov. 2008	rev 1.1
	optimized code
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2334af9f-8346-40d9-8c03-3f72eec7f79c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CTRL_PI" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="ACT">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="SET">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="SUP">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="OFS">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="M_I">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="MAN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="KP">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="KI">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="LL">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-1000" />
              </initialValue>
            </variable>
            <variable name="LH">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="DIFF">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LIM">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="pi">
              <type>
                <derived name="FT_PIWL" />
              </type>
            </variable>
            <variable name="co">
              <type>
                <derived name="CTRL_OUT" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">DIFF := CTRL_IN(SET, ACT, SUP);
pi(in := DIFF, kp := KP, ki := KI, lim_l := LL, lim_h := LH, rst := RST);
co(ci := pi.Y, OFFSET := OFS, man_in := M_I, lim_l := LL, lim_h := LH, MANUAL := MAN);
Y := co.Y;
LIM := co.LIM;


(* revision history
hm 	31.10.2007 		rev 1.0
	original version

hm	3.11.2007		rev 1.1
	added noise input to filter noise
	added output diff
	set limit output false when output is within limits
	overfolw was not set correctly

hm	5. jan 2008		rev 1.2
	improved performance

hm	20. jun. 2008	rev 2.0
	rewritten using new modular approach

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>949219f9-3937-4fdc-ad09-f477af914d6c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CTRL_PID" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="ACT">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="SET">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="SUP">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="OFS">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="M_I">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="MAN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="KP">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="TN">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="TV">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="LL">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-1000" />
              </initialValue>
            </variable>
            <variable name="LH">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="DIFF">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LIM">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="pid">
              <type>
                <derived name="FT_PIDWL" />
              </type>
            </variable>
            <variable name="co">
              <type>
                <derived name="CTRL_OUT" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">DIFF := CTRL_IN(SET, ACT, SUP);
pid(in := DIFF, kp := KP, tn := TN, tv := TV, lim_l := LL, lim_h := LH, rst := RST);
co(ci := pid.Y, OFFSET := OFS, man_in := M_I, lim_l := LL, lim_h := LH, MANUAL := MAN);
Y := co.Y;
LIM := co.LIM;



(* revision history

hm 1.12.2006	 	rev 1.1
	changed algorithm to trapezregel for higher accuracy.

hm 3.1.2007		rev 1.2
	added integ_band to select when the integrator is active.

hm	3.3.2007		rev 1.3
	added default values to inputs KP, TN, TV, LIMIT_L und LIMIT_H.

hm 31.oct 2007	rev 1.4
	total rewrite of the module to avoid failures when one of the limits is 0

hm	3.11.2007	rev 1.5
	added noise input to filter noise
	added output diff
	set limit output false when output is within limits
	overfolw was not set correctly

hm	5. jan 2008	rev 1.6
	improved code for better performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>36eecd8b-fde1-41c3-a5be-87130836ff6e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CTRL_PWM" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="CI">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="MAN_IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="MANUAL">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="F">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="PW">
              <type>
                <derived name="PWM_DC" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PW(F := F, DC := SEL(MANUAL,CI,MAN_IN));
Q := PW.Q;


(* revision history
hm 3. jun. 2008 	rev 1.0
	original version

hm	21. oct. 2008	rev 1.1
	optimized code

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>fa74c46a-e95e-4563-abc5-6c3641d1e2f8</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DEAD_BAND" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="L">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X &gt; L THEN
	DEAD_BAND := X - L;
ELSIF X &lt; -L THEN
	DEAD_BAND := X + L;
ELSE
	DEAD_BAND := 0.0;
END_IF;


(* revision history
hm	2. nov. 2007	rev 1.0
	original version

hm	14. jun. 2008	rev 1.1
	improved performance

hm	18. jan. 2011	rev 1.2
	assign 0 before return
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4ee0db09-3674-4f56-b361-f6bf125a4ec6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DEAD_BAND_A" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="T">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="KL">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="LM">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="L">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tp1">
              <type>
                <derived name="FT_PT1" />
              </type>
            </variable>
            <variable name="tp2">
              <type>
                <derived name="FT_PT1" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* filter the input signal *)
tp1(in := X, T:= T);

(* filter the HF portion to generate a stable L *)
tp2(in := ABS(tp1.out - X), T := MULTIME(T, 4.0));

(* now we determine L which is half the width of the dead band *)
L := MIN(KL * tp2.out, LM);

IF X &gt; L THEN
	Y := X - L;
ELSIF X &lt; -L THEN
	Y := X + L;
ELSE
	Y := 0.0;
END_IF;


(* revision history
hm	14. jun. 2008	rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>069947df-6327-4e92-a174-82d45e48dbd2</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DEAD_ZONE" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="L">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF ABS(x) &gt; L THEN
	dead_zone := X;
ELSE
	DEAD_ZONE := 0.0;
END_IF;

(* revision history
hm	12. feb. 2007	rev 1.0
	original version

hm	14. jun. 2008	rev 1.1
	improved performance

hm	11. mar. 2009	rev 1.2
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>df8a730e-4fac-4d3b-bab4-43cd9ab2c372</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DEAD_ZONE2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="L">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF ABS(x) &gt; L THEN
	Y := X;
ELSIF Y &gt; 0.0 THEN
	Y := L;
ELSE
	Y := -L;
END_IF;



(* revision history

hm	12. feb. 2007	rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>74fddb64-805f-4ec9-9295-675651fc9f59</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_DERIV" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="run">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="out">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="old">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="last">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tc">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := T_PLC_US();
tc := DWORD_TO_REAL(tx - last);
last := tx;

(* init on first startup *)
IF NOT init THEN
	init := TRUE;
	old := in;
ELSIF run AND tc &gt; 0.0 THEN
	out := (in - old) / tc * 1000000.0 * K;
	old := in;
ELSE
	out := 0.0;
END_IF;



(*
hm 3.1.2007			rev 1.1
	added init code for startup
	set the default for K to 1

hm	15. sep 2007	rev 1.2
	replaced Time() with T_PLC_US for compatibility and performance reasons
	increased accuracy and work in microseconds internally

hm 29 oct 2007	rev 1.3
	prohibit calculation when tx - last = 0 to avoid division by 0 and increase accuracy on fast systems

hm	6. nov. 2008	rev 1.4
	improved performance

hm	11. mar. 2009	rev 1.5
	inproved code
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5e9b1c80-1b8f-4a0d-87ee-32e6a36061a8</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_IMP" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="T">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="out">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="t1">
              <type>
                <derived name="FT_PT1" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">T1(in:= in, T:=T);
out := (in - t1.out) * K;

(*
hm 3.1.2007	rev 1.1
	added factor K

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e648711f-b407-4317-838a-c52f946fb781</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_INT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="RUN">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="OUT_MIN">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-1E+37" />
              </initialValue>
            </variable>
            <variable name="OUT_MAX">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1E+37" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LIM">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="INTeg">
              <type>
                <derived name="INTEGRATE" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF rst THEN
	out := 0.0;
ELSE
	integ(X := IN, E := RUN, K := K, Y := out);
END_IF;

(* limit the outputs *)
IF out &gt;= OUT_MAX THEN
	out := out_max;
	LIM := TRUE;
ELSIF out &lt;= out_min THEN
	out := out_min;
	lim := TRUE;
ELSE
	lim := FALSE;
END_IF;


(*
hm 13.12.2006	rev 1.1
	changed to "trapezregel" which increases accuracy
	before out := out + in * time new: out := out + (in + in_last) / 2 * time

hm 15.1.2007		rev 1.2
	added default for k to be 1.

hm	15.9.2007		rev 1.3
	replaced time() with T_PLC_US for compatibility and performance reason
	increased internal accuracy to microseconds

hm 29. oct 2007		rev 1.4
	changed code so int will not be called is time difference is 0 to increase accuracy on systems
	with cycle times below 1ms

hm	2. dec 2007	 	rev 1.5
	changed code for better performance

hm	5. jan 2008		rev 1.6
	further improvements in performance

hm	8. feb 2008		rev 1.7
	deleted limits +/- 1000 now limit is the range of real
	added variables out1 and out2 to extend the resolution
	corrected an error with elapsed time
	deleted unusfull output ET

hm	13. mar 2008	rev 1.8
	changed preset value out_min to -1e37.
	stop integrator at the limits.

hm	16. mar 2008	rev 1.9
	added type conversion to avoid warning under codesys 3.0

hm	2. jun. 2008	rev 2.0
	rewritten with clear code
	limits can now be set without run

hm	3. nov. 2008	rev 2.1
	optimized code using INTEGRATE and LIMX

hm	10. mar. 2009	rev 2.2
	removed nested comments
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>18d4437a-a05e-40de-9438-f7fda2792da0</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_INT2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="RUN">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="OUT_MIN">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-1E+38" />
              </initialValue>
            </variable>
            <variable name="OUT_MAX">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1E+38" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LIM">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="integ">
              <type>
                <derived name="INTEGRATE" />
              </type>
            </variable>
            <variable name="ix">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="val">
              <type>
                <derived name="REAL2" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF RST THEN
	val := R2_SET(0.0);
	out := 0.0;
ELSE
	integ(X := IN, E := RUN, K := K, Y := ix);
	val := R2_ADD(val, ix);
	ix := 0.0;
	OUT := val.RX;
END_IF;

(* check output for limits *)
IF out &gt; OUT_MIN AND out &lt; OUT_MAX THEN
	LIM := FALSE;
ELSE
	OUT := LIMIT(OUT_MIN, OUT, OUT_MAX);
	val := R2_SET(OUT);
	LIM := TRUE;
END_IF;



(*	revision history
hm	2. jun. 2008	rev 1.0
	original version

hm	5. nov. 2008	rev 1.1
	rewritten code using integrate

hm	11. mar. 2009	rev 1.2
	real constants updated to new systax using dot

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c3c36002-9989-4b93-a954-ec4495b770bb</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_PD" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="KP">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="TV">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="diff">
              <type>
                <derived name="FT_DERIV" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* run differentiator *)
diff(IN := IN, K := TV);

(* combine both values *)
Y := KP * (diff.out + IN);



(* revision history
hm 	3. jun. 2008 	rev 1.0
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>42f7c874-bdc6-4d7f-a44f-4ac39ffb455a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_PDT1" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="KP">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="TV">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="T1">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="diff">
              <type>
                <derived name="FT_DERIV" />
              </type>
            </variable>
            <variable name="TP">
              <type>
                <derived name="FT_PT1" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* run differentiator *)
diff(IN := IN, K := TV);

(* Run PT1 filter *)
tp(in := diff.out, T := REAL_TO_TIME(T1));

(* combine both values *)
Y := KP * (tp.out + IN);



(* revision history
hm 	3. jun. 2008 	rev 1.0
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5ecdcf92-8310-40c3-8047-1482bc4bba42</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_PI" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="KP">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="KI">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="ILIM_L">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-1E+38" />
              </initialValue>
            </variable>
            <variable name="ILIM_H">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1E+38" />
              </initialValue>
            </variable>
            <variable name="IEN">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LIM">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="integ">
              <type>
                <derived name="FT_INT" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* run integrator *)
integ(IN := IN, K := KI, RUN := IEN, RST := RST, OUT_MIN := ILIM_L, OUT_MAX := ILIM_H);

(* check if integrator has reached its limits and set overflow *)
LIM := integ.LIM;
Y := KP * IN + integ.Out;



(* revision history
hm 	3. jun. 2008 	rev 2.0
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5b622655-94f3-48a2-a49a-3e6ece0b3b76</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_PID" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="KP">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="TN">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="TV">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="ILIM_L">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-1E+38" />
              </initialValue>
            </variable>
            <variable name="ILIM_H">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1E+38" />
              </initialValue>
            </variable>
            <variable name="IEN">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LIM">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="integ">
              <type>
                <derived name="FT_INT" />
              </type>
            </variable>
            <variable name="diff">
              <type>
                <derived name="FT_DERIV" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* run integrator only if TN &gt; 0 *)
IF TN &gt; 0.0 THEN
	integ(IN := IN, K := 1.0 / TN, RUN := IEN, RST := RST, OUT_MIN := ILIM_L, OUT_MAX := ILIM_H);
ELSE
	integ(RST := FALSE);
END_IF;

(* run differentiator *)
diff(IN := IN, K := TV);

(* combine both values *)
Y := KP * (integ.Out + diff.out + IN);

(* check if integrator has reached its limits and set overflow *)
LIM := integ.LIM;



(* revision history
hm 3. jun. 2008 	rev 2.0
	original version

hm	11. mar. 2009	rev 2.1
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a3da8d94-7f21-4024-88df-c51cdcfbeb99</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_PIDW" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="KP">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="TN">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="TV">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="LIM_L">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-1E+38" />
              </initialValue>
            </variable>
            <variable name="LIM_H">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1E+38" />
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LIM">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="integ">
              <type>
                <derived name="INTEGRATE" />
              </type>
            </variable>
            <variable name="diff">
              <type>
                <derived name="FT_DERIV" />
              </type>
            </variable>
            <variable name="YI">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* run the integrator *)
IF tn = 0.0 OR rst THEN
	integ(E := FALSE, Y := YI);
	YI := 0.0;
ELSE
	integ(X := IN, K := 1.0 / TN, E := NOT LIM, Y := YI);
END_IF;

(* add up integrator and linear part *)
Y := KP * (IN + YI);

(* run differentiator *)
diff(IN := IN, K := TV);

(* set lim before differentiator is added to stop integrator if necessary *)
IF Y &gt; LIM_L AND Y &lt; LIM_H THEN
	LIM := FALSE;
ELSE
	LIM := TRUE;
END_IF;

(* add differential part and limit output Y *)

Y := LIMIT(LIM_L, Y + KP * diff.out, LIM_H);




(* revision history
hm 3. jun. 2008 	rev 1.0
	original version

hm	5. nov. 2008	rev 1.1
	changed code to use integrate

hm	11. mar. 2009	rev 1.2
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>bf65c227-f413-4335-9b9b-84441d75743b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_PIDWL" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="KP">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="TN">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="TV">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="LIM_L">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-1E+38" />
              </initialValue>
            </variable>
            <variable name="LIM_H">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1E+38" />
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LIM">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="piwl">
              <type>
                <derived name="FT_PIWL" />
              </type>
            </variable>
            <variable name="diff">
              <type>
                <derived name="FT_DERIV" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* if rst then *)
IF rst THEN
	piwl(rst := TRUE);
	piwl.RST := FALSE;
ELSE
	(* run PIWL controller first *)
	(* we need to check if TN = 0 and do alternative calls *)
	IF TN = 0.0 THEN
		piwl(in := IN * KP, KP := 1.0, KI := 0.0, LIM_L := LIM_L, LIM_H := LIM_H);
	ELSE
		piwl(in := IN * KP, KP := 1.0, KI := 1.0 / TN, LIM_L := LIM_L, LIM_H := LIM_H);
	END_IF;

	(* run differentiator and add_to_output *)
	diff(IN := IN, K := KP * TV);
	Y := piwl.Y + diff.out;

	(* limit the output *)
	IF Y &lt; LIM_L THEN
		LIM := TRUE;
		Y := LIM_L;
	ELSIF Y &gt; LIM_H THEN
		LIM := TRUE;
		Y := LIM_H;
	ELSE
		LIM := FALSE;
	END_IF;
END_IF;



(* revision history
hm 13. jun. 2008 	rev 1.0
	original version

hm	25. jan 2008	rev 1.1
	multiply differential part with KP

hm	11. mar. 2009	rev 1.2
	real constants updated to new systax using dot

hm	13. nov. 2009	rev 1.3
	fixed code for negative KP

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>28235897-0a0a-46d5-aa71-39717c10137c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_PIW" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="KP">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="KI">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="LIM_L">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-1E+38" />
              </initialValue>
            </variable>
            <variable name="LIM_H">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1E+38" />
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LIM">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="integ">
              <type>
                <derived name="FT_INT" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* run integrator *)
integ(IN := IN, K := KI, RUN := NOT LIM, RST := RST);

(* set output value *)
Y := KP * IN + integ.Out;

(* check for limits and set integrator for anti wind up *)
IF Y &lt; LIM_L THEN
	Y := LIM_L;
	LIM := TRUE;
ELSIF Y &gt; LIM_H THEN
	Y := LIM_H;
	LIM := TRUE;
ELSE
	LIM := FALSE;
END_IF;



(* revision history
hm 	3. jun. 2008 	rev 1.0
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e12f0080-8c81-4b92-acd9-c61cfe5052a6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_PIWL" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="KP">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="KI">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="LIM_L">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-1E+38" />
              </initialValue>
            </variable>
            <variable name="LIM_H">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1E+38" />
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LIM">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="tc">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="t_last">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="in_last">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="i">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="p">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* initialize at power_up *)
IF NOT init OR RST THEN
	init := TRUE;
	in_last := in;
	t_last := T_PLC_US();
	i := 0.0;
	tc := 0.0;
ELSE
	(* read last cycle time in Microseconds *)
	tx := T_PLC_US();
	tc := DWORD_TO_REAL(tx - t_last);
	t_last := tx;

	(* calculate proportional part *)
	p := KP * IN;

	(* run integrator *)
	i := (IN + in_last) * 5.0E-7 * KI * tc + i;
	in_last := IN;

	(* calculate output Y *)
	Y := p + i;

	(* check output for limits *)
	IF Y &gt;= LIM_H THEN
		Y := LIM_H;
		IF ki &lt;&gt; 0.0 THEN
			i := LIM_H - p;
		ELSE
			i := 0.0;
		END_IF;
		LIM := TRUE;
	ELSIF Y &lt;= LIM_L THEN
		Y := LIM_L;
		IF ki &lt;&gt; 0.0 THEN
			i := LIM_L - p;
		ELSE
			i := 0.0;
		END_IF;
		LIM := TRUE;
	ELSE
		LIM := FALSE;
	END_IF;
END_IF;




(* revision history
hm 13. jun. 2008 	rev 1.0
	original version

hm	27. oct. 2008	rev 1.1
	integrator will not be adjusted when ki = 0

hm	25. jan 2009	rev 1.2
	module will also work with negative K

hm	11. mar. 2009	rev 1.3
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ca2e6a5f-e988-4cab-ba82-dc857d996069</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_PT1" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="T">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="out">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := T_PLC_US();

(* startup initialisation *)
IF NOT init OR T = t#0s THEN
	init := TRUE;
	out := K * in;
ELSE
	out := out + (in * K - out) * DWORD_TO_REAL(Tx - last) / TIME_TO_REAL(T) * 1.0E-3;
	IF ABS(out) &lt; 1.0E-20 THEN out := 0.0; END_IF;
END_IF;
last := tx;


(*
hm 1.1.2007	rev 1.1
	corrected error while startup value was not correct
	for very small time values real output would run out of range.

hm 3.1.2007	rev 1.2
	corrected an error for falling edge failures.
	added output faktor K.

hm 27. 2. 2007	rev 1.3
	output will be input during init for definitive startup condition.

hm	15.9.2007	rev 1.4
	changed time() to T_PLC_US() for compatibilitxy resons
	increased internal accuracy to Microseconds instead of Milliseconds

hm	23. oct 2007	rev 1.5
	added out := in to the init statements

hm	30. nov 2007	rev 1.6
	changed out to be K * in during initialization

hm	5. jan 2008	rev 1.7
	improved code for better performance

hm	16. mar. 2008	rev 1.8
	added type conversion to avoid warning under codesys 3.0

hm	14. jun. 2008	rev 1.9
	improved code

hm	11. mar. 2009	rev 1.10
	real constants updated to new systax using dot

hm	18. jan. 2011	rev 1.11
	avoid underrun of out
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b293d651-3b96-412a-991a-d82c5d599e18</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_PT2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="T">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="D">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="out">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="int1">
              <type>
                <derived name="INTEGRATE" />
              </type>
            </variable>
            <variable name="int2">
              <type>
                <derived name="INTEGRATE" />
              </type>
            </variable>
            <variable name="tn">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="I1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="I2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="tn2">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* startup initialisation *)
IF NOT init OR T = T#0s THEN
	init := TRUE;
	out := K * in;
	I2 := out;
ELSE
	TN := TIME_TO_REAL(T) * 1.0E-3;
	tn2 := TN * TN;
	int1(X := in * K / tn2 - I1 * 0.5 * D / TN - I2 / TN2, Y := I1);
	int2(X := I1,Y := I2);
	out := I2;
END_IF;


(* revision history

15.1.2007 hm		rev 1.1
	changed formula to new more acurate formula

hm 15.9.2007		rev 1.2
	deleted unused code for init system time reading tx	

hm	30.11.2007	rev 1.3
	changed out to be K * in during initialization
	avoind divide by 0 if tn = 0

hm	3. nov. 2008	rev 1.4
	optimized code and fixed a problem with init

hm	11. mar. 2009	rev 1.5
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1997d614-1c00-40ba-8b31-db0a54edde83</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_TN16" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="T">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="out">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="trig">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="length">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="16" />
              </initialValue>
            </variable>
            <variable name="X">
              <type>
                <array>
                  <dimension lower="0" upper="15" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := DWORD_TO_TIME(T_PLC_MS());

trig := FALSE;
IF NOT init THEN
	x[cnt] := in;
	init := TRUE;
	last := tx;
ELSIF tx - last &gt;= T / length THEN
	IF cnt = length - 1 THEN cnt := 0; ELSE cnt := cnt + 1; END_IF;
	Out := X[cnt];
	x[cnt] := in;
	last := tx;
	Trig := TRUE;
END_IF;

(* revision history
hm		1. jan 2007	rev 1.0
	original version

hm		16. sep 2007	rev 1.1
	changes time() to T_plc_ms() for compatibility reasons

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>76c8cd62-7f24-477e-9971-428f86c35c67</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_TN64" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="T">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="out">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="trig">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="length">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="64" />
              </initialValue>
            </variable>
            <variable name="X">
              <type>
                <array>
                  <dimension lower="0" upper="63" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := DWORD_TO_TIME(T_PLC_MS());

trig := FALSE;
IF NOT init THEN
	x[cnt] := in;
	init := TRUE;
	last := tx;
ELSIF tx - last &gt;= T / length THEN
	IF cnt = length - 1 THEN cnt := 0; ELSE cnt := cnt + 1; END_IF;
	Out := X[cnt];
	x[cnt] := in;
	last := tx;
	trig := TRUE;
END_IF;

(* revision history
hm		1. jan 2007		rev 1.0
	original version

hm		16. sep 2007	rev 1.1
	changes time() to T_plc_ms() for compatibility reasons

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>cfa0da78-69e3-453e-b55d-9ccdeca5e7f1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_TN8" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="T">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="out">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="trig">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="length">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="8" />
              </initialValue>
            </variable>
            <variable name="X">
              <type>
                <array>
                  <dimension lower="0" upper="7" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tx := DWORD_TO_TIME(T_PLC_MS());
trig := FALSE;
IF NOT init THEN
	x[cnt] := in;
	init := TRUE;
	last := tx;
ELSIF tx - last &gt;= T / length THEN
	IF cnt = length - 1 THEN cnt := 0; ELSE cnt := cnt + 1; END_IF;
	Out := X[cnt];
	x[cnt] := in;
	last := tx;
	trig := TRUE;
END_IF;

(* revision history
hm		1. jan 2007		rev 1.0
	original version

hm		16. sep 2007	rev 1.1
	changes time() to T_plc_ms() for compatibility reasons

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>438bbb1d-7b2c-4991-95c0-ce7f57093f87</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="HYST" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="In">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="ON">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="OFF">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="win">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF ON &gt;= OFF THEN
	IF IN &lt; OFF THEN
		Q := FALSE;
		WIN := FALSE;
	ELSIF  IN &gt; ON THEN
		Q := TRUE;
		WIN := FALSE;
	ELSE
		WIN := TRUE;
	END_IF;
ELSE
	IF IN &gt; OFF THEN
		Q := FALSE;
		WIN := FALSE;
	ELSIF  IN &lt; ON THEN
		Q := TRUE;
		WIN := FALSE;
	ELSE
		WIN := TRUE;
	END_IF;
END_IF;


(* revision history
hm		2.  jun 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>eb0f3089-3b0d-4602-bce8-148a6e9ec075</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="HYST_1" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="In">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="high">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="low">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="win">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF in &lt; low THEN
	Q := FALSE;
	win := FALSE;
ELSIF in &gt; high THEN
	Q := TRUE;
	win := FALSE;
ELSE
	win := TRUE;
END_IF;




(* revision history
hm		4.  aug. 2006	rev 1.0
	original version

hm		2. jun. 2008	rev 1.1
	improved performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>199454a8-30d3-4c93-9f6a-d9c323f0337d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="HYST_2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="VAL">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="HYS">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="WIN">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tmp">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tmp := val - hys * 0.5;
IF in &lt; tmp THEN
	Q := FALSE;
	win := FALSE;
ELSIF in &gt; tmp + hys THEN
	Q := TRUE;
	win := FALSE;
ELSE
	win := TRUE;
END_IF;



(* revision history
hm		4. aug 2006	rev 1.0
	original version

hm		5. jan 2008	rev 1.1
	improved code for better performance

hm		2. jun. 2008	rev 1.2
	improved performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ca6acf61-166f-4737-ab20-dd0b9ceafa26</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="HYST_3" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="hyst">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="val1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="val2">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">X := hyst * 0.5;
IF in &lt; val1 - X THEN
	q1 := TRUE;
ELSIF in &gt; val1 + X THEN
	q1 := FALSE;
END_IF;
IF in &lt; val2 - X THEN
	q2 := FALSE;
ELSIF in &gt; val2 + X THEN
	q2 := TRUE;
END_IF;



(* revision history
hm	22. jan 2007	rev 1.0
	original version

hm	27. dec 2007	rev 1.1
	changed code for better performance

hm	5. jan 2008	rev 1.2
	further performance iprovements

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>db8de9f3-d57d-4e29-9475-8fee4b119ab1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="INTEGRATE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="E">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="X_last">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="last">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*read system time *)
tx := T_PLC_MS();

IF NOT init THEN
	init := TRUE;
	X_last := X;
ELSIF E THEN
	Y := (X + X_LAST) * 0.5E-3 * DWORD_TO_REAL(tx-last) * K + Y;
	X_last := X;
END_IF;
last := tx;



(*
hm 3. nov. 2008	rev 1.0
original version
	
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>42ea4fc4-8a9c-4793-8151-ba746ac3009a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ASTRO" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="m">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="AE">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="PC">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LJ">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Ym">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="YAE">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="YPC">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="YLJ">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">YAE :=	AE
		+ m * 6.6845871535E-012
		+ PC * 206265.0
		+ LJ * 63240.0;
Ym := YAE * 149.597870E9;
YPC := YAE * 4.8481322570E-006;
YLJ := YAE * 1.5812776724E-005;


(*
Länge Meter m SI-Basiseinheit
Astronomische Einheit* AE 1 AE = 149,597 870 · E9 m
Parsec pc 1 pc = 206265 AE = 30,857 · E15 m
Lichtjahr Lj 1 Lj = 9,460 530 · E15 m = 63240 AE = 0,306 59 pc
Ångström Å 1 Å = El0 m
typograph. Punkt p 1 p = 0,376 065 mm  im Druckereigewerbe
inch** in 1 in = 2,54 · E2 m = 25,4 mm***
foot ft 1 ft = 0,3048 m = 30,48 cm
yard yd 1 yd = 0,9144 m
mile mile 1 mile = 1609,344 m
Internat. Seemeile sm 1 sm = 1852 m
Fathom fm 1 fm = 1,829 m  in der Seeschifffahrt
*)

(* revision history

hm	27. mar. 2007	rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	improved code

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>aea1b32e-48d1-405f-9d4e-44c448c54934</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BFT_TO_MS" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="BFT">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">BFT_TO_MS := EXPT(BFT, 1.5) * 0.836;


(* revision history
hm	12. 6. 2008		rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a272451a-0611-46b6-aad9-6e1f56eb6992</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="C_TO_F" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="celsius">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">C_TO_F := celsius * 1.8 + 32.0;


(* revision history

hm	4. aug. 2006	rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8f800ab9-e9af-48d9-b316-5527cc9b3ed2</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="C_TO_K" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="Celsius">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">C_TO_K := Celsius - phys.T0;

(* revision history

hm	4. aug 2006	rev 1.0
	original version

hm	19. aug 2009	rev 1.1
	fixed calculation error

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>54e6b3f0-f68c-4cdf-a2bf-cf5c4e80d8ec</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DEG_TO_DIR" pouType="function">
        <interface>
          <returnType>
            <string length="3" />
          </returnType>
          <inputVars>
            <variable name="DEG">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="L">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="ly">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF L = 0 THEN ly := LANGUAGE.DEFAULT; ELSE ly := MIN(L, LANGUAGE.LMAX); END_IF;
DEG_TO_DIR := LANGUAGE.DIRS[ly, ((SHL(DEG,N-1) + 45) / 90) MOD SHL(INT#2,N)*SHR(INT#8,N)];



(*
DIR := ((SHL(DEG,N-1) + 45) / 90) MOD SHL(INT#2,N);
explanation :
DIR is calculated BY the following formula:
DIR := ((DIR + 45) / 90) MOD 4 if N = 1 digit
North = 0, East = 1 ....
DIR := ((DIR + 22,5) / 45) MOD 8 if N = 2 digit
convert to integer calculation
DIR := ((DIR*2 + 45) / 90) MOD 8
N = 0, NE = 1 ....
ther above formula replaces 2^N with shift for performance
*)



(* revision histroy
hm	11. jun. 2008	rev 1.0
	original release

hm	22. oct. 2008	rev 1.1
	changed size of string variables to 30
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>140a9248-b593-4834-93c0-73dded33381c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DIR_TO_DEG" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="DIR">
              <type>
                <string length="3" />
              </type>
            </variable>
            <variable name="L">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="ly">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF L = 0 THEN ly := LANGUAGE.DEFAULT; ELSE ly := MIN(L, LANGUAGE.LMAX); END_IF;
FOR i := 0 TO 15 DO
	IF language.DIRS[ly, i] = DIR THEN EXIT; END_IF;
END_FOR;
DIR_TO_DEG := SHR(i * 45 + 1, 1);






(* revision histroy
hm	22. oct. 2008	rev 1.1
	original release

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>eea005e9-f93f-4c15-a351-579519ec2152</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ENERGY" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="J">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="C">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Wh">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="YJ">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="YC">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="YWh">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">YJ := J + Wh * 3600.0 + C * 4.1868;
YC := YJ * 0.238845896627496;
YWh := YJ * 2.7777777778E-004;

(*
Arbeit, Energie, Joule* J 1 J = 1 N · m = 1 W · s = (1/3,6) E6 kW · h = 1 kg · m2/s2
Wärmemenge Kilowattstunde kW · h 1 kW · h = 3,6 MJ = 860 kcal
Elektronvolt eV 1 eV = 160,218 92 E21 J
Erg erg 1 erg = 1E7 J
Kalorie calorie 1 calalorie = 4,1868 J = 1,163 E3 W · h
Therm therm 1 therm = 105,50 · 106 J
*)

(* revision history

hm	27. mar. 2007	rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	improved code

hm 16. jan 2010	rev 1.2
	avoid the string cal in comments for codesys import bug


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>62d6f4c2-d524-4d61-a22c-941841ca923e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="F_TO_C" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="fahrenheit">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">F_TO_C := (fahrenheit - 32.0) * 0.5555555555555;

(* revision history
hm	4. aug 2006	rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>42e47a36-227b-43e1-ab19-3d9242796365</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="F_TO_OM" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="F">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">F_TO_OM := math.PI2 * F;


(* revision history
hm	22. jan. 2007	rev 1.0
	original version

hm	18. oct. 2008	rev 1.1
	unsing math constants

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e18b8e7a-f6e2-4a19-b85e-5d481814cb53</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="F_TO_PT" pouType="function">
        <interface>
          <returnType>
            <TIME />
          </returnType>
          <inputVars>
            <variable name="F">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">F_TO_PT := DWORD_TO_TIME(REAL_TO_DWORD(1.0 / F * 1000.0));


(* revision history

hm	4. aug. 2006	rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>504490ec-9b93-4b5b-864c-20ed78cce536</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GEO_TO_DEG" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="D">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="M">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="SEC">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">GEO_TO_DEG := INT_TO_REAL(D) + INT_TO_REAL(M) * 0.016666666666667 + sec * 0.00027777777777778;


(* revision histroy
hm	22. jan. 2009	rev 1.0
	original release


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b2675c36-0a94-404e-b1bf-808e57f8f31b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="K_TO_C" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="Kelvin">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">K_TO_C := Kelvin + phys.T0;


(* revision history

hm	4. aug 2006	rev 1.0
	original version

hm	19. aug 2009	rev 1.1
	fixed calculation error

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>073c1edb-9f9d-443f-850c-2478e088061b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="KMH_TO_MS" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="kmh">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">KMH_TO_MS := kmh * 0.2777777777777;

(* revision history
hm	4. feb 2007		rev 1.0
	original version

hm	6. jan 2008		rev 1.1
	improved performance

*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4ccd5147-bc31-4132-996f-6004070e66fe</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LENGTH" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="m">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="p">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="ft">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="yd">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="mile">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="sm">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fm">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Ym">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Yp">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Yin">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Yft">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Yyd">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Ymile">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Ysm">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Yfm">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">Ym :=	m
		+ p * 0.000376065
		+ in * 0.0254
		+ ft * 0.3048
		+ yd * 0.9144
		+ mile * 1609.344
		+ sm * 1852.0
		+ fm * 1.829;
Yp := Ym * 2659.11478068951;
Yin := Ym * 39.37007874016;
Yft := Ym * 3.28083989501;
Yyd := Ym * 1.09361329834;
Ymile := Ym * 0.00062137119;
Ysm := Ym * 0.00053995680;
Yfm := Ym * 0.54674685621;

(*
Länge Meter m SI-Basiseinheit
Astronomische Einheit* AE 1 AE = 149,597 870 · E9 m
Parsec pc 1 pc = 206265 AE = 30,857 · E15 m
Lichtjahr Lj 1 Lj = 9,460 530 · E15 m = 63240 AE = 0,306 59 pc
Ångström Å 1 Å = El0 m
typograph. Punkt p 1 p = 0,376 065 mm  im Druckereigewerbe
inch** in 1 in = 2,54 · E2 m = 25,4 mm***
foot ft 1 ft = 0,3048 m = 30,48 cm
yard yd 1 yd = 0,9144 m
mile mile 1 mile = 1609,344 m
Internat. Seemeile sm 1 sm = 1852 m
Fathom fm 1 fm = 1,829 m  in der Seeschifffahrt
*)

(* revision history

hm	27. mar. 2007	rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	improved code

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>fd7787b7-636f-4f53-a90f-9aa8f11e1921</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MS_TO_BFT" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="MS">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MS_TO_BFT := REAL_TO_INT(EXPT(MS * 1.196172, 0.666667));


(* revision history
hm	12. 6. 2008		rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>6b15dd2d-603d-41d9-b1b4-6149d7c9e6b8</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MS_TO_KMH" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="ms">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MS_TO_KMH := ms * 3.6;

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>bedab5f1-b71d-4677-af20-6cb61b66fe5a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="OM_TO_F" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="OM">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">OM_TO_F := OM / math.PI2;


(* revision history
hm	22. jan. 2007	rev 1.0
	original version

hm	18. oct. 2008	rev 1.1
	using math constants

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e7da2557-c0b2-4f96-9fde-9eb5426e3979</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="PRESSURE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="mws">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="torr">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="att">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="atm">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="pa">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="bar">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Ymws">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Ytorr">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Yatt">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Yatm">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Ypa">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Ybar">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">Ybar := bar +
		pa * 1.0E-5 +
		0.980665 * att +
		1.01325 * atm +
		0.001333224 * torr +
		0.0980665 * mws;
Ymws := ybar * 10.1971621297793;
Ytorr := ybar * 750.0615050434140;
Yatt := ybar * 1.0197162129779;
yatm := ybar * 0.9869232667160;
Ypa := ybar * 100000.0;


(*
Druck, Pascal Pa 1 Pa = 1 N/m2 = 1 kg/(s2 E m) . 0,75 E 10.2 mmHg
mechanische 1 MPa = 1 N/mm2 . fur Festigkeitsangaben
Spannung Bar bar 1 bar = 105 Pa = 103 mbar = 105 kg/(s2 E m)
Millimeter- mmHg 1 mmHg = 133,322 Pa = 1,333 22 mbar
Quecksilbersaule . nur in Heilkunde zulassig
physik. Atmosphare atm 1 atm = 1,013 25 bar
techn. Atmosphare at 1 at = 1 kp/cm2 = 0,980665 bar
Torr Torr 1 Torr = (101325/760) Pa = 1,333224 mbar
Meter-Wassersaule mWS 1 mWS = 9806,65 Pa = 98,0665 mbar
psi lbf/in2 1 lbf/in2 = 68,947 57 mbar = 6894,757 Pa

*)

(* revision history

hm	27. mar. 2007	rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	improved code

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b0f24e0e-d77e-476e-82e0-42a0f8df92b9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="PT_TO_F" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PT_TO_F := 1000.0 / DWORD_TO_REAL(TIME_TO_DWORD(PT));


(*	revision history
hm	4. aug. 2006	rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5d330437-04fd-43cb-baca-107c0d76116b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SPEED" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="ms">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="kmh">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="kn">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="mh">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Yms">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Ykmh">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Ykn">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Ymh">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">Yms := ms +
		kmh * 0.27777777777778 +
		kn * 0.5144444 +
		mh * 0.44704;
Ykmh := Yms * 3.6;
Ykn := Yms * 1.94384466037535;
Ymh := Yms * 2.23693629205440;

(*
Geschwindigkeit Meter durch Sekunde m/s 1 m/s = 3,6 km/h
km durch (pro) Stunde, nicht Stundenkilometer verwenden
Knoten kn 1 kn = 1 sm/h = 0,5144 m/s

*)

(* revision history
hm	27. mar. 2009	rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	improved code

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>407d342f-1520-428e-9493-120ea7e3cf17</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TEMPERATURE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="K">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="C">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-273.15" />
              </initialValue>
            </variable>
            <variable name="F">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-459.67" />
              </initialValue>
            </variable>
            <variable name="Re">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-218.52" />
              </initialValue>
            </variable>
            <variable name="Ra">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="YK">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="YC">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="YF">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="YRe">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="YRa">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">YK := K + (C + 273.15) + (F + 459.67) * 0.555555555555 + (Re * 1.25 + 273.15) + (Ra * 0.555555555555);
YC := YK -273.15;
YF := YK * 1.8 - 459.67;
YRe := (YK - 273.15) * 0.8;
YRa := YK * 1.8;


(* revision history
hm	21. feb. 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>532b31f5-2ba1-4b99-aa98-878935b81c15</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ALARM_2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LO_1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="HI_1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="LO_2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="HI_2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="HYS">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q1_LO">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1_HI">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2_LO">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2_HI">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tmp">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tmp := X - Hys * 0.5;
IF tmp &gt; LO_1 THEN Q1_LO := FALSE; END_IF;
IF tmp &gt; LO_2 THEN Q2_LO := FALSE; END_IF;
IF tmp &gt; HI_1 THEN Q1_HI := TRUE; END_IF;
IF tmp &gt; HI_2 THEN Q2_HI := TRUE; END_IF;
tmp := tmp + hys;
IF tmp &lt; LO_1 THEN Q1_LO := TRUE; END_IF;
IF tmp &lt; LO_2 THEN Q2_LO := TRUE; END_IF;
IF tmp &lt; HI_1 THEN Q1_HI := FALSE; END_IF;
IF tmp &lt; HI_2 THEN Q2_HI := FALSE; END_IF;



(* revision history
hm	19. may. 2008		rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	improved code
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>72724efb-b923-46d7-9c54-0306d8d75edb</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BAR_GRAPH" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rst">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="trigger_Low">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="trigger_High">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Alarm_low">
              <type>
                <BOOL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Alarm_high">
              <type>
                <BOOL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="log_scale">
              <type>
                <BOOL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="LOW">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q6">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="HIGH">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Alarm">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Status">
              <type>
                <BYTE />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="T1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="T2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="T3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="T4">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="T5">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="temp">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT init THEN
	init := TRUE;
	IF log_scale THEN
		temp := EXP(LN(Trigger_high / Trigger_low) * 0.166666666666666666666);
		T1 := trigger_low * temp;
		T2 := T1 * temp;
		T3 := T2 * temp;
		T4 := T3 * temp;
		T5 := T4 * temp;
	ELSE
		temp := (trigger_high - trigger_low) * 0.142857142;
		T1 := trigger_low + temp;
		T2 := T1 + temp;
		T3 := T2 + temp;
		T4 := T3 + temp;
		T5 := T4 + temp;
	END_IF;
END_IF;

(* clear outputs before checking *)
Q1 := FALSE;
Q2 := FALSE;
Q3 := FALSE;
Q4 := FALSE;
Q5 := FALSE;
Q6 := FALSE;
status := 110;

(* low, high and alarm can only be cleared with rst depending on alarm_low and alarm_high *)
IF NOT alarm_low THEN low := FALSE; END_IF;
IF NOT alarm_high THEN high := FALSE; END_IF;
IF rst THEN
	alarm := FALSE;
	low := FALSE;
	high := FALSE;
END_IF;

(* check and set outputs *)
IF X &lt; trigger_low THEN
	Low := TRUE;
	status := 111;
	IF alarm_low THEN
		alarm := TRUE;
		status := 1;
	END_IF;
ELSIF X &lt; T1 THEN
	Q1 := TRUE;
ELSIF x &lt; t2 THEN
	Q2 := TRUE;
ELSIF x &lt; t3 THEN
	Q3 := TRUE;
ELSIF x &lt; T4 THEN
	Q4 := TRUE;
ELSIF x &lt; T5 THEN
	q5 := TRUE;
ELSIF x &lt; trigger_high THEN
	q6 := TRUE;
ELSE
	high := TRUE;
	status := 112;
	IF alarm_high THEN
		alarm := TRUE;
		status := 2;
	END_IF;
END_IF;

(* revision history
hm	22. feb 2007	rev 1.0
	original version

hm	2. dec 2007		rev 1.1
	chaged code for better performance

hm	6. jan 2008		rev 1.2
	further performance improvement

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>441235cf-0530-4770-b65b-db7d818faf78</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CALIBRATE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="CO">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="CS">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Y_Offset">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Y_Scale">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars retain="true">
            <variable name="offset">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Scale">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* check for calibration *)
IF CO THEN
	OFFSET := Y_Offset - X;
ELSIF CS THEN
	SCALE := Y_scale / (X + OFFSET);
END_IF;
(* calculate output *)
Y := (X + OFFSET) * SCALE;


(* revision history
hm 22.2.2007		rev 1.2
	changed VAR RETAIN PERSISTENT to VAR RETAIN for better compatibility
	wago lon contollers do not support persisitent

hm	11. mar. 2009	rev 1.3
	changed real constants to use dot syntax

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>df5c17b2-38b4-4706-96b4-f767c573dec2</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CYCLE_TIME" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="ct_min">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="ct_max">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="ct_last">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="systime">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="sysdays">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="cycles">
              <type>
                <DWORD />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last_cycle">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tx := DWORD_TO_TIME(T_PLC_MS()) - last_cycle;
IF rst THEN
	ct_min := t#10h;
	ct_max := t#0ms;
	cycles := 0;
ELSIF last_cycle &gt; t#0s THEN
	IF tx &lt; ct_min THEN ct_min := tx;
	ELSIF tx &gt; ct_max THEN ct_max := tx;
	END_IF;
	ct_last := tx;
ELSIF ct_min = t#0s THEN
	ct_min := t#0s - t#1ms;
END_IF;
IF init THEN
	systime := systime + tx;
		IF systime &gt;= t#1d THEN
			systime := systime - t#1d;
			sysdays := sysdays + 1;
		END_IF;
END_IF;
init := TRUE;
last_cycle := last_cycle + tx;
cycles := cycles + 1;

(*	revision history
hm 12.12.2006		rev 1.1
	added cycles output, a dword cycle counter.
hm 10.3.2007			rev 1.2
	changed initialization of ct_min to t#10h for compatibility with siemens s7

hm	16.9.2007		rev 1.2
	changed Time() in T_PLC_MS() for compatibility resons

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b4ceff3e-04e7-4a45-8223-7a3168d2ff37</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DT_SIMU" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="START">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="SPEED">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="DTS">
              <type>
                <DT />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tc">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="last">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="td">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system timer *)
tx := T_PLC_MS();
tc := REAL_TO_DWORD(DWORD_TO_REAL(tx - last) * speed);

IF NOT init THEN
	init := TRUE;
	DTS := Start;
	tc := 0;
	last := tx;
ELSIF SPEED = 0.0 THEN
	DTS := DWORD_TO_DT(DT_TO_DWORD(DTS) + 1);
ELSIF tc &gt;= 1000 THEN
	td := (tc / 1000) * 1000;
	DTS := DTS + DWORD_TO_TIME(td);
	last := last + REAL_TO_DWORD(DWORD_TO_REAL(td) / speed);
END_IF;

(* revision history
hm	11. sep. 2008	rev 1.0
	original version

hm	16. nov	2008	rev 1.1
	added type conversions for compatibility reasons

hm	8.	mar. 2009	rev 1.2
	added increment by cycle mode

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>19e97595-b9cf-4299-b716-c793d19527e9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FLOW_METER" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="VX">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PULSE_MODE">
              <type>
                <BOOL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="UPDATE_TIME">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1s0ms" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="F">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Y">
              <type>
                <UDINT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tl">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="int1">
              <type>
                <derived name="INTEGRATE" />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="e_last">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="x_last">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="y_last">
              <type>
                <UDINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT init THEN	(* init on power up *)
	init := TRUE;
	tl := tx;
	x_last := X;
	y_last := Y;
	int1.K := 2.7777777777777777E-4;
END_IF;

(* run integrator *)
int1(E := NOT (RST OR PULSE_MODE) AND E, X := VX, Y := X);	(* gated operation *)

IF RST THEN		(* reset *)
	X := 0.0;
	Y := 0;
	tl := tx;
	x_last := 0.0;
	y_last := 0;
ELSIF E AND PULSE_MODE THEN	(* check for pulse mode *)
	IF NOT e_last THEN X := X + VX; END_IF;
END_IF;
e_last := E;

(* reduce X to be less than 1 and increase Y respectively *)
IF X &gt; 1.0 THEN
	tmp := FLOOR(X);
	Y := Y + INT_TO_UDINT(tmp);
	X := X - INT_TO_REAL(tmp);
END_IF;

(* calculate the current flow *)
tx := DWORD_TO_TIME(T_PLC_MS());
IF tx - tl &gt;= UPDATE_TIME AND UPDATE_TIME &gt; t#0s THEN
	F := (UDINT_TO_REAL(Y - y_last) + X - x_last) / TIME_TO_REAL(tx - tl) * 3.6E6;
	y_last := Y;
	x_last := X;
	tl := tx;
END_IF;



(* revision history
hm	23. jan. 2011	rev 1.0
	original version

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>6c35a5ec-2815-47c1-a530-9f58e14af80f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="M_D" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="start">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tmax">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#14400m0s0ms" />
              </initialValue>
            </variable>
            <variable name="rst">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="ET">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="run">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="T0">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="startup">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* check for rst input *)
IF rst OR et &gt;= tmax THEN
	pt := t#0ms;
	et := t#0ms;
	startup := FALSE;
	run := FALSE;
END_IF;

(* avoid timers to start when input is true at startup *)
IF NOT startup THEN
	edge := start;
	startup := TRUE;
END_IF;

(* read system timer *)
tx := DWORD_TO_TIME(T_PLC_MS());

(* detect rising edge on start *)
IF start AND NOT edge AND NOT stop THEN
	t0 := tx;
	run := TRUE;
	pt := t#0s;
ELSIF stop AND run THEN
	pt := et;
	run := FALSE;
END_IF;
edge := start;
IF run THEN et := tx - t0; END_IF;

(* revision history
hm		2.5.2007	rev 1.0
	original version

hm		16.9.2007	rev 1.1
	changes time() to T_plc_ms() for compatibility reasons

hm	27. feb 2009	rev 1.2
	deleted unnecessary init with 0
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e97f8fbe-c67f-44d8-84e8-baa1a9357670</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="M_T" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TMAX">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#14400m0s0ms" />
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="ET">
              <type>
                <TIME />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := DWORD_TO_TIME(T_PLC_MS());

IF RST OR ET &gt;= TMAX THEN
	PT :=  t#0s;
	ET := t#0s;
ELSIF IN THEN
	IF NOT edge THEN start := tx; END_IF;
	ET := tx - start;
ELSE
	PT := ET;
END_IF;
edge := IN;



(* revision history
hm	4. aug. 2006	rev 1.0
	original version

hm	2. may. 2007	rev 1.1
	added init variable to avoid unreasonable measurement if falling edge occurs first.
	added et (elapsed time) output to count from 0 at rising edge until a falling edge resets et to 0.
	added reset input.

hm	16. sep. 2007	rev 1.2
	changes time() to T_plc_ms() for compatibility reasons

hm	17. dec. 2008	rev 1.3
	code optimized

hm	10. mar. 2009	rev 1.4
	removed nested comments
	removed double assignments

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>45f8c037-a5e7-4739-931c-62f30a23155e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="M_TX" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tmax">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#14400m0s0ms" />
              </initialValue>
            </variable>
            <variable name="rst">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="TH">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="TL">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="DC">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="F">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="ET">
              <type>
                <TIME />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="rise">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fall">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="startup">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* check FOR rst input *)
IF rst OR (et &gt;= tmax) THEN
	rise := FALSE;
	fall := FALSE;
	startup := FALSE;
	th := t#0ms;
	tl := t#0ms;
	DC := 0.0;
	F := 0.0;
	ET := t#0s;
END_IF;

(* avoid timers to start when input is true at startup *)
IF NOT startup THEN
	edge := in;
	startup := TRUE;
END_IF;

(* read system timer *)
tx := DWORD_TO_TIME(T_PLC_MS());

(* edge trigger rising and falling edge *)
IF in XOR edge THEN
	edge := in;
	(* rising edge starts measurement *)
	IF in THEN
		start := Tx;
		rise := TRUE;
		IF fall THEN tl := start - stop; END_IF;
		IF th &gt; t#0ms AND tl &gt; t#0ms THEN
			dc := TIME_TO_REAL(th) / TIME_TO_REAL(th+tl);
			f := 1000.0 / TIME_TO_REAL(th + tl);
		END_IF;
	(* falling edge starts second cycle measurement *)
	ELSE
		stop := Tx;
		fall := TRUE;
		IF rise THEN th := stop - start; END_IF;
		IF th &gt; t#0ms AND tl &gt; t#0ms THEN
			dc := TIME_TO_REAL(th) /  TIME_TO_REAL(th+tl);
			f := 1000.0 / TIME_TO_REAL(th + tl);
		END_IF;
	END_IF;
END_IF;
IF rise THEN et := tx - start; END_IF;

(* revision history
hm	4. aug. 2006	rev 1.0
	original version

hm	2. mai. 2007	rev 1.1
	made sure that no undefined values would be measured at startup conditions
	added output et
	added rst input
	added tmax input

hm	16. sep. 2007	rev 1.2
	changes time() to T_plc_ms() for compatibility reasons

hm	27. feb. 2009	rev 1.3
	deleted unnecessary init with 0

hm	11. mar. 2009	rev 1.4
	changed real constants to use dot syntax

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e0cfe404-21bd-4a97-9f39-2e3bdd706557</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="METER" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="M1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="M2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="I1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="I2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="MX">
              <type>
                <REAL />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="MR">
              <type>
                <derived name="REAL2" />
              </type>
            </variable>
            <variable name="MX1">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> current consumption value on M1 and M2 </xhtml>
              </documentation>
            </variable>
            <variable name="MX2">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> current consumption value on M1 and M2 </xhtml>
              </documentation>
            </variable>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="last">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="tc">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* measure the last cycle time and make sure we onle execute once every millisecond *)
tx := T_PLC_MS();
IF NOT init THEN
	init := TRUE;
	last := tx;
	mr.RX := mx;
	mr.R1 := 0.0;
ELSIF tx = last THEN
	RETURN;
ELSE
	tc := DWORD_TO_REAL(tx - last) * 0.001;
END_IF;
last := tx;

(* reset *)
IF rst THEN
	mr.R1 := 0.0;
	mr.RX := 0.0;
ELSE
	(* current consumption measurement *)
	IF I1 THEN MX1 := M1; ELSE MX1 := 0.0; END_IF;
	IF I2 THEN MX2 := M2; ELSE MX2 := 0.0; END_IF;
	(* add up the current values in a double real *)
	MR := R2_ADD(MR,(SEL(I1,0.0,mx1) + SEL(I2, 0.0, mx2)) / D * TC);
	(* set the current output value *)
	MX := mr.RX;
END_IF;




(* revision history

hm	16. sep.2007		rev 1.0
	original version

hm	7. feb 2008		rev 1.1
	use new version of ft_int to avoid a counting stop at high values
	deleted unnecessary limits

hm	24. mar. 2008	rev 1.2
	use data_type real2 to extend accuracy to 15 digits total
	do not use ft_int which adds unnecessary overhead

hm	8. feb. 2009	rev 1.3
	changed mx to be I/O
	make sure calculation works for cycle times &lt; 1 ms

hm	8. mar. 2009	rev 1.4
	last was not updated
	code improvements

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>40ac5c64-ad70-4610-a45a-60ff48f7a6e1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="METER_STAT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="DI">
              <type>
                <DATE />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="Last_Day">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Current_Day">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Last_Week">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Current_Week">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Last_Month">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Current_Month">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Last_Year">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Current_Year">
              <type>
                <REAL />
              </type>
            </variable>
          </inOutVars>
          <localVars retain="true">
            <variable name="Year_Start">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Month_Start">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Week_Start">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Day_Start">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="last_run">
              <type>
                <DATE />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF rst THEN
	Last_Day := 0.0;
	Current_Day := 0.0;
	Day_start := IN;
	Last_week := 0.0;
	Current_week := 0.0;
	Week_start := in;
	Last_month := 0.0;
	Current_month := 0.0;
	month_start := in;
	last_year := 0.0;
	current_year := 0.0;
	year_start := in;
ELSE
	Current_Day := IN - Day_Start;
	Current_Week := In - Week_Start;
	Current_Month := IN - Month_Start;
	Current_Year := IN - Year_Start;
END_IF;

IF YEAR_OF_DATE(DI) &gt; YEAR_OF_DATE(last_run) THEN
	(* a new year has started *)
	last_year := current_year;
	current_year := 0.0;
	year_start := in;
	last_month := current_month;
	current_month := 0.0;
	month_start := in;
	last_day := current_day;
	current_day := 0.0;
	day_start := in;
ELSIF MONTH_OF_DATE(DI) &gt; MONTH_OF_DATE(last_run) THEN
	(* a new month has started, january is alrerady done by year change *)
	last_month := current_month;
	current_month := 0.0;
	month_start := in;
	last_day := current_day;
	current_day := 0.0;
	day_start := in;
ELSIF DAY_OF_YEAR(di) &gt; DAY_OF_YEAR(last_run) THEN
	(* day has chaged, first day of year and first day of month has already been taken care of *)
	last_day := current_day;
	current_day := 0.0;
	day_start := in;
END_IF;
IF DAY_OF_WEEK(DI) &lt; DAY_OF_WEEK(last_run) THEN
	(* a new week has started *)
	last_week := current_week;
	current_week := 0.0;
	week_start := in;
END_IF;
last_run := di;

(* revision history
hm	16. sep. 2007	rev 1.0
	original version

hm	7. oct. 2008	rev 1.1
	changed function year_to_year_of_date
	changed function month to month_of_date
	changed function weekday to day_of_week

hm	11. mar. 2009	rev 1.2
	changed real constants to use dot syntax

hm	18. jul. 2009	rev 1.3
	changes all outputs to be I/O
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d6433212-9d0a-414f-8941-a1a1b9cd6de8</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ONTIME" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="SECONDS">
              <type>
                <UDINT />
              </type>
            </variable>
            <variable name="CYCLES">
              <type>
                <UDINT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="last">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ms">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := T_PLC_MS();

(* make sure the first cycle works correctly *)
IF NOT init OR rst THEN
	init := TRUE;
	last := tx;
	ms := 0;
ELSIF RST THEN
	SECONDS := 0;
	CYCLES := 0;
ELSIF IN THEN
	(* add the current milliseconds *)
	ms := (tx - last) + ms;
	IF ms &gt;= 1000 THEN
		seconds := seconds + 1;
		ms := ms - 1000;
	END_IF;
	cycles := cycles + BOOL_TO_UINT(NOT edge);
END_IF;
last := tx;
edge := in;


(* revision history
hm 22.2.2007		rev 1.1
	changed VAR RETAIN PERSISTENT to VAR RETAIN for better compatibility
	wago lon contollers do not support persisitent

hm 2.8.2007		rev 1.2
	adding time up in a real number will automatically lead to the point where 
	small time scales like the cycle time will be below the resolution of real and therefore
	ontime would not increase in small steps as necessary
	the time is now measured internally in two  dwords and be converted to real only for
	output purposes.
	deleted the variable power because it was unnecessary

hm	16.9.2007		rev 1.3
	changes time() to T_plc_ms() for compatibility reasons

hm	2. dec. 2007	rev 1.4
	chaged code for better performance

hm	16. mar. 2008	rev 1.5
	added type conversions to avoid warnings under codesys 3.0

hm	21. oct. 2008	rev 2.0
	changed module for much better performance and allow for external result storage

hm	10. nov. 2008	rev 2.1
	increased internal resolution to milliseconds

hm	16. nov. 2008	rev 2.2
	changed typecast to avoid warnings

hm	17. dec. 2008	rev 2.3
	fixed an error when in would be true for more then 49 days

hm	17. jan 2011	rev 2.4
	init will not clear seconds and cycles, only rst clears these values	

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>96a60a66-5a9d-44ae-9558-156bc3eb38e6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="T_PLC_MS" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <localVars constant="true">
            <variable name="debug">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="offset">
              <type>
                <DWORD />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tx := TIME();
T_PLC_MS := TIME_TO_DWORD(Tx);
(* hier muss die korrektur für step7 stattfinden
plctime muss den vollen wertebereich von time ausnutzen:
wenn bei step7 time -24tage bis plus 24 tage ist dann muss der timer auch beim überlauf auf -24tage springen 
und auf keinen fall auf 0 !!!!
für siemens muss ein weiterer fb im main eingebunden werden der sicherstellt das alle 32 bits durchgezählt werden.
es kann nur ein fb sein den er muss sich das oberste (32te) bit merken.
oder etwa spring s7 bei überlauf auf -24 tage????? dann wäre keine korrektur nötig.
*)
IF debug THEN
	T_PLC_MS := (SHL(T_PLC_MS,N) OR SHL(DWORD#1,N)-1) + OFFSET;
END_IF;

(* revision history
hm	14.9.2007	rev 1.0
	original version

hm	12. nov 2007	rev 1.1
	added temporaray variable tx because some compilers could not handle time() as an argument

hm	16. nov. 2008	rev 1.2
	initialized constants with 0 for compatibility reasons
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c97c6a40-cea5-47e6-afe2-be246a9b28af</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="T_PLC_US" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <localVars constant="true">
            <variable name="debug">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="offset">
              <type>
                <DWORD />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tx := TIME();
T_PLC_US := TIME_TO_DWORD(Tx)*1000;
(* hier muss die korrektur für step7 stattfinden
plctime muss den vollen wertebereich von time ausnutzen:
wenn bei step7 time -24tage bis plus 24 tage ist dann muss der timer auch beim überlauf auf -24tage springen 
und auf keinen fall auf 0 !!!!
für siemens muss ein weiterer fb im main eingebunden werden der sicherstellt das alle 32 bits durchgezählt werden.
es kann nur ein fb sein den er muss sich das oberste (32te) bit merken.
oder etwa spring s7 bei überlauf auf -24 tage????? dann wäre keine korrektur nötig.
*)
IF debug THEN
	T_PLC_US := (SHL(T_PLC_US,N) OR SHL(DWORD#1,N)-1) + OFFSET;
END_IF;

(* revision history
hm	14.9.2007	rev 1.0
	original version

hm	12. nov 2007	rev 1.1
	added temporaray variable tx because some compilers could not handle time() as an argument

hm	16. nov. 2008	rev 1.2
	initialized constants with 0 for compatibility reasons

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>367031e7-ad9b-40ef-85f8-d214da93d053</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TC_MS" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="TC">
              <type>
                <DWORD />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="last">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system timer *)
tx := T_PLC_MS();

IF NOT init THEN
	init := TRUE;
	TC := 0;
ELSE
	tc := tx - last;
END_IF;
last := tx;

(* revision history
hm		13. mar. 2008	rev 1.0
	original version

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>34d2d3ac-ae08-4bb7-8333-e9e7ad24a25c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TC_S" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="TC">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="last">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system timer *)
tx := T_PLC_US();

IF NOT init THEN
	init := TRUE;
	TC := 0.0;
ELSE
	tc := DWORD_TO_REAL(tx - last)*1.0E-6;
END_IF;
last := tx;

(* revision history
hm	13. mar. 2008	rev 1.0
	original version

hm	16. mar 2008	rev 1.1
	added type conversion to avoid warnings under codesys 3.0

hm	11. mar. 2009	rev 1.2
	changed real constants to use dot syntax

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5e2cfe40-706f-40b7-a723-ae19d9accd74</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TC_US" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="TC">
              <type>
                <DWORD />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="last">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system timer *)
tx := T_PLC_US();

IF NOT init THEN
	init := TRUE;
	TC := 0;
ELSE
	tc := tx - last;
END_IF;
last := tx;

(* revision history
hm		13. mar. 2008	rev 1.0
	original version

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>921d0475-e2ca-49bf-aa24-68db7d39c232</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MULTI_IN" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="in_1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in_2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in_3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="default">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in_min">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in_max">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="mode">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="count">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="F1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="F2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="F3">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">F1 :=  in_1 &gt; in_min AND in_1 &lt; in_max;
F2 :=  in_2 &gt; in_min AND in_2 &lt; in_max;
F3 :=  in_3 &gt; in_min AND in_3 &lt; in_max;

CASE mode OF
0:	count := 0;
	IF F1 THEN
		count := count + 1;
		MULTI_IN := in_1;
	ELSE
		MULTI_IN := 0.0;
	END_IF;
	IF F2 THEN
		count := count + 1;
		MULTI_IN := MULTI_IN + in_2;
	END_IF;
	IF F3 THEN
		count := count + 1;
		MULTI_IN := MULTI_IN + in_3;
	END_IF;
	MULTI_IN := SEL(count = 0, MULTI_IN / INT_TO_REAL(count), default);

1:	MULTI_IN := SEL(F1, default, IN_1);

2:	MULTI_IN := SEL(F2, default, IN_2);

3:	MULTI_IN := SEL(F3, default, IN_3);

4:	MULTI_IN := default;

5:	MULTI_IN := SEL(F1, in_max, IN_1);
	IF F2 AND in_2 &lt; MULTI_IN THEN MULTI_IN := in_2; END_IF;
	IF F3 AND in_3 &lt; MULTI_IN THEN MULTI_IN := in_3; END_IF;
	IF MULTI_IN = in_max THEN MULTI_IN := default; END_IF;

6:	MULTI_IN := SEL(F1, in_min, IN_1);
	IF F2 AND in_2 &gt; MULTI_IN THEN MULTI_IN := in_2; END_IF;
	IF F3 AND in_3 &gt; MULTI_IN THEN MULTI_IN := in_3; END_IF;
	IF MULTI_IN = in_min THEN MULTI_IN := default; END_IF;

7:	IF F1 AND F2 AND F3 THEN MULTI_IN := MID3(in_1, in_2, in_3);
	ELSIF F1 AND F2 THEN MULTI_IN := MIN(in_1, in_2);
	ELSIF F1 AND F3 THEN MULTI_IN := MIN(in_1, in_3);
	ELSIF F2 AND F3 THEN MULTI_IN := MIN(in_2, in_3);
	ELSIF F1 THEN MULTI_IN := in_1;
	ELSIF F2 THEN MULTI_IN := in_2;
	ELSIF F3 THEN MULTI_IN := in_3;
	ELSE MULTI_IN := default;
	END_IF;

END_CASE;

(*
hm 1.1.2007		rev 1.1
	changed midr to mid3 function

hm	14. 10. 2008	rev 1.2
	corrected an error for in_3 overrange detection
	improved performance

hm	11. mar. 2009	rev 1.3
	changed real constants to use dot syntax

hm	18. jul. 2009	rev 1.4
	improved performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>96f0e65e-c66a-47f2-96e3-80f28eeef210</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="RES_NI" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="T">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="R0">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars constant="true">
            <variable name="A">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.5485" />
              </initialValue>
            </variable>
            <variable name="B">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.000665" />
              </initialValue>
            </variable>
            <variable name="C">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="2.805E-09" />
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="T2">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">T2 := T * T;
RES_NI := R0 + A * T + B * T2 + C * T2 * T2;

(* revision history

hm	4.8.2006		rev 1.0
	original version

hm	13.9.2007		rev 1.1
	changed coding for better performance

hm	2. dec. 2007	rev 1.2
	changed code for better performance
*)

(*

 Auszug aus DIN 43760 für Ni100

°C		R		°C		R		°C	R		°C		R		°C		R

-60 	69,5 	-10 	94,6 	40 	123,0 	90 		154,9 	140 	190,9
-55 	71,9 	-5 		97,3 	45 	126,0 	95 		158,3 	145 	194,8
-50 	74,3 	0 		100,0 	50 	129,1 	100 	161,8 	150 	198,7
-45 	76,7 	5 		102,8 	55 	132,2 	105 	165,3 	155 	202,6
-40 	79,1 	10 		105,6 	60 	135,3 	110 	168,8 	160 	206,6
-35 	81,6 	15 		108,4 	65 	138,5 	115 	172,4 	165 	210,7
-30 	84,2 	20 		111,2 	70 	141,7 	120 	176,0 	170 	214,8
-25 	86,7 	25 		114,1 	75 	145,0 	125 	179,6 	175 	219,0
-20 	89,3 	30 		117,1 	80 	148,3 	130 	183,3 	180 	223,2
-15 	91,9 	35 		120,0 	85 	151,6 	135 	187,1 	  	 

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e5390e68-687b-473c-bec7-112bae1e95ce</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="RES_NTC" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="T">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="RN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="B">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">RES_NTC := RN * EXP(B * (1.0 / (T+273.15) - 0.00335401643468053));



(* revision history

hm 30. dec. 2008	rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	changed real constants to use dot syntax

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7d86c835-5837-4d24-93fb-65897535d7ff</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="RES_PT" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="T">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="R0">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars constant="true">
            <variable name="A">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.00390802" />
              </initialValue>
            </variable>
            <variable name="B">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-5.802E-07" />
              </initialValue>
            </variable>
            <variable name="C">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-4.2735E-12" />
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="T2">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">T2 := T * T;

IF T &gt;= 0.0 THEN
	RES_PT := R0 * ( 1.0 + A * T + B * T2);
ELSE
	RES_PT := R0 * ( 1.0 + A * T + B * T2 + C * (T - 100.0) * T2 * T);
END_IF;



(* revision history
hm	4. aug. 2006	rev 1.1
	original version

hm	2. dec 2007	rev 1.2
	changed code for better performance

hm	11. mar. 2009	rev 1.3
	changed real constants to use dot syntax

*)


(*
 Auszug aus DIN 43760 für Pt100

°C		R		°C		R		°C	R			°C		R			°C		R			°C		R

-200 	18,49 	-100 	60,25 	0 	100,00 	100 	138,50 	200 	175,84 	300 	212,02
-195 	20,65 	-95 	62,28 	5 	101,95 	105 	140,39 	205 	177,68 	305 	213,80
-190 	22,80 	-90 	64,30 	10 	103,90 	110 	142,29 	210 	179,51 	310 	215,57
-185 	24,94 	-85 	66,31 	15 	105,85 	115 	144,17 	215 	181,34 	315 	217,35
-180 	27,08 	-80 	68,33 	20 	107,79 	120 	146,06 	220 	183,17 	320 	219,12
-175 	29,20 	-75 	70,33 	25 	109,73 	125 	147,94 	225 	184,99 	325 	220,88
-170 	31,32 	-70 	72,33 	30 	111,67 	130 	149,82 	230 	186,82 	330 	222,65
-165 	33,43 	-65 	74,33 	35 	113,61 	135 	151,70 	235 	188,63 	335 	224,41
-160 	35,33 	-60 	76,33 	40 	115,54 	140 	153,58 	240 	190,45 	340 	226,17
-155 	37,63 	-55 	78,32 	45 	117,47 	145 	155,45 	245 	192,26 	345 	227,92
-150 	39,71 	-50 	80,31 	50 	119,40 	150 	157,31 	250 	194,07 	350 	229,67
-145 	41,79 	-45 	82,29 	55 	121,32 	155 	159,18 	255 	195,88 	355 	231,42
-140 	43,87 	-40 	84,27 	60 	123,24 	160 	161,04 	260 	197,69 	360 	233,17
-135 	45,94 	-35 	86,25 	65 	125,16 	165 	162,90 	265 	199,49 	365 	234,91
-130 	48,00 	-30 	88,22 	70 	127,07 	170 	164,76 	270 	201,29 	370 	236,65
-125 	50,06 	-25 	90,19 	75 	128,98 	175 	166,61 	275 	203,08 	375 	238,39
-120 	52,11 	-20 	92,16 	80 	130,89 	180 	168,46 	280 	204,88 	380 	240,13
-115 	54,15 	-15 	94,12 	85 	132,80 	185 	170,31 	285 	206,67 	385 	241,86
-110 	56,19 	-10 	96,09 	90 	134,70 	190 	172,16 	290 	208,45 	390 	243,59
-105 	58,22 	-5 		98,04 	95 	136,60 	195 	174,00 	295 	210,24 	395 	245,31

*)
(*
revision history


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ffe19050-5841-4634-89bc-15da8669e477</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="RES_SI" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="T">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="RS">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="TS">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars constant="true">
            <variable name="A">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.00764" />
              </initialValue>
            </variable>
            <variable name="B">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1.66E-05" />
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="TX">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">TX := T - TS;
RES_SI := RS * ( 1.0 + A * TX + B * TX * TX);

(* revision history
hm	4. aug 2006	rev 1.0
	original version

hm	2. dec 2007	rev 1.1
	changed code for better performance

hm	11. mar. 2009	rev 1.2
	changed real constants to use dot syntax

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>02e8965f-5289-46ac-a707-e32e9e8b9a70</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SENSOR_INT" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="Voltage">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Current">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="RP">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="RS">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="RG">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF current &lt;&gt; 0.0 THEN
	RG := voltage / current;
	SENSOR_INT := RP * ( RG - RS) / ( RP + RS - RG);
END_IF;

(* revisaion history

hm 20.1.2007		rev 1.1
	deleted input R0 which was not needed.

hm	2. dec 2007	rev 1.2
	corrected an error in formula and improoved speed

hm	11. mar. 2009	rev 1.3
	changed real constants to use dot syntax

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c9f61885-a9b4-4d6c-ad57-43d9ef8b8b6b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TEMP_NI" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="Res">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="R0">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">TEMP_NI := (SQRT(0.30085225 - 2.66E-3 * (R0 - Res)) - 0.5485) * 751.8796992;


(* revision history

hm 24.1.2007		rev 1.1
	deleted unused variable A, B, C

hm 10.9.2007		rev 1.2
	changed accuracy to 0.02 degrees to improove performace

hm 17. 12 2007	rev 1.3
	improovements for better performance and higher accuracy

hm	6. jan 2008	rev 1.4
	further performance improvement

hm	10. mar. 2009	rev 1.5
	removed nested comments

*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ba2daeb3-44d6-40a7-b27e-f876451e8214</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TEMP_NTC" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="RES">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="RN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="B">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF res &gt; 0.0 THEN
	TEMP_NTC := B * 298.15 / (B + LN(RES / RN) * 298.15) -273.15;
END_IF;


(* revision history

hm 30. dec. 2008	rev 1.0
	original version

hm	11. mar. 2009	rev 1.1
	changed real constants to use dot syntax

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>65127495-0255-4e4c-af91-f421660e4a74</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TEMP_PT" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="Res">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="R0">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars constant="true">
            <variable name="A">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.0039083" />
              </initialValue>
            </variable>
            <variable name="B">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-5.775E-07" />
              </initialValue>
            </variable>
            <variable name="accuracy">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.01" />
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="step">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="50" />
              </initialValue>
            </variable>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="t1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <DWORD />
                  </baseType>
                </pointer>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">X := A * R0;
Y := B * R0;
IF Res &gt;= R0 THEN
	t1 := X * X - 4.0 * Y * (R0 - Res);
	IF t1 &lt; 0.0 THEN
		TEMP_PT := 10000.0;
	ELSE
		TEMP_PT := (-X + SQRT(t1)) / (2.0 * Y);
	END_IF;
ELSE
	pt := ADR(step);
	(* since the formula cannot be solved this is a successive approximation *)
	TEMP_PT := -100.0;
	WHILE step &gt; accuracy DO
		(* test if result greater or less *)
		IF RES_PT(TEMP_PT, R0) &lt; res THEN TEMP_PT := TEMP_PT + step; ELSE TEMP_PT := TEMP_PT - step; END_IF;
		pt^ := pt^ - 8388608;  (* this is a super fast divide by 2 method for non floating point CPUs *)
		(* the alternative code: step := step * 0.5; *)
	END_WHILE;
END_IF;

(* revision history

rev 1.1 hm 24.1.2007	
	deleted unused variable C

rev 1.2 hm 10.9.2007
	reduced accuracy to 0.02 to shorten execution time

rev 1.3	hm	2. dec 2007
	changed code for better performance

rev	1.4	hm	23. dec 2007
	avoid a negative square root if input values are wrong

rev 1.5 hm	5. jan 2008
	replaced / 2 with * 0.5 for better performance

hm	31. oct. 2008	rev 1.6
	improved performance

hm	11. mar. 2009	rev 1.7
	changed real constants to use dot syntax

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>eec5f185-ac07-4c99-b885-9191d940a15a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TEMP_SI" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="Res">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="RS">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="TS">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">TEMP_SI := (-7.64E-3 + SQRT(Res / RS * 6.64E-5 - 0.803E-5)) * 30120.48193 + TS;



(* revision history

hm 24.1.2007		rev 1.1
	the function would only work for TS = 25, now it works for other values of ts.

hm 10.9.2007		rev 1.2
	changed the function to use successive approcimation to avoid an error generated by a sqrt from a negative result.
	changed accuracy to 0.02 degrees to shorten execution time

hm 17. 12 2007	rev 1.3
	improovements for better performance

hm	6. jan 2008	rev 1.4
	further performance improvement

hm	10. mar. 2009	rev 1.5
	removed nested comments

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e469f09f-dfab-4e69-a94a-6fb6b707ac81</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="_RMP_B" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="DIR">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> true = up </xhtml>
              </documentation>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="TR">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="RMP">
              <type>
                <BYTE />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tl">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tn">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="last_dir">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="start">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system timer *)
tx := DWORD_TO_TIME(T_PLC_MS());

IF E AND init AND (dir = last_dir) AND (RMP &lt;&gt; SEL(DIR, 0, 255)) AND TR = tn THEN
	RMP := FRMP_B(start, DIR, tx - tl, TR);
ELSE
	init := TRUE;
	tl := tx;
	tn := tr;
	start := RMP;
END_IF;
last_dir := dir;



(* revison history
hm	22. oct. 2008	rev 1.0
	original version

hm	20. nov. 2008	rev 1.1
	set default for E to be TRUE
	added init

hm	19. nov. 2011	rev 1.2
	new code
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f5f6bd43-08bf-4d8c-bfb4-cd8ea7e42636</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="_RMP_NEXT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="E">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="TR">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="TF">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="TL">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="DIR">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> upwards = TRUE </xhtml>
              </documentation>
            </variable>
            <variable name="UP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="OUT">
              <type>
                <BYTE />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="rmx">
              <type>
                <derived name="_RMP_B" />
              </type>
            </variable>
            <variable name="dirx">
              <type>
                <derived name="TREND_DW" />
              </type>
            </variable>
            <variable name="t_lock">
              <type>
                <derived name="TP" />
              </type>
            </variable>
            <variable name="xen">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xdir">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">dirx(X := in);

t_lock(in := FALSE, pt := TL);

IF dirx.TU AND (OUT &lt; IN) THEN
	IF NOT xdir AND xen THEN t_lock(in := TRUE); END_IF;
	xen := TRUE;
	xdir := TRUE;
ELSIF dirx.TD AND (OUT &gt; IN) THEN
	IF xdir AND xen THEN t_lock(in := TRUE); END_IF;
	xen := TRUE;
	xdir := FALSE;
ELSIF xen THEN
	IF (xdir AND (out &gt;= in)) OR (NOT xdir AND (out &lt;= in)) THEN
		xen := FALSE;
		IF tl &gt; t#0s THEN t_lock(IN := TRUE); END_IF;
	END_IF;
END_IF;

IF NOT t_lock.Q AND xen THEN
		UP := XDIR;
		DIR := XDIR;
		DN := NOT XDIR;
ELSE
	UP := FALSE;
	DN := FALSE;
END_IF;

rmx(rmp := OUT, E := E AND (UP OR DN) , dir := DIR, tr := SEL(dir, TF, TR));


(* revison history
hm	23. nov. 2008	rev 1.0
	original version

hm	24. jan. 2009	rev 1.1
	deleted unused vars tmp1, tmp2

hm	20. feb. 2009	rev 1.2
	improved algorithm
	added TL

hm	9. mar. 2009	rev 1.3
	input E was ignored
	removed double assignments

hm	18. jul. 2009	rev 1.4
	improved performance

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>3d02d344-3dfb-4d20-813d-123cea3fd76e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="_RMP_W" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="DIR">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="TR">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="RMP">
              <type>
                <WORD />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="tl">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="step">
              <type>
                <DINT />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="last_dir">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tx := T_PLC_MS();
IF E AND init THEN
	(* we need to set tl = tx when direction changes *)
	IF dir XOR last_dir THEN
	 tl := tx;
	 last_dir := dir;
	END_IF;
	(* check_elapsed time and calculate only if necessary *)
	IF tr &gt; t#0s THEN
		step := DWORD_TO_DINT(SHL(tx-tl, 16) / TIME_TO_DWORD(TR));
	ELSE
		step := 65535;
	END_IF;
	IF step &gt; 0 THEN
		(* perform the step on the ramp *)
		tl := tx;
		(* calculate the step response *)
		IF NOT dir THEN step := - step; END_IF;
		rmp := DINT_TO_WORD(LIMIT(0, WORD_TO_DINT(rmp) + step, 65535));
	END_IF;
ELSE
	tl := tx;
	init := TRUE;
END_IF;


(* revison history
hm	22. oct. 2008	rev 1.0
	original version

hm	20. nov. 2008	rev 1.1
	set default for E to be TRUE
	added init

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>22919bab-4175-41c8-89b7-bfd07ad95edf</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GEN_PULSE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="ENQ">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="PTH">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="PTL">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tn">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
IF enq THEN
	tx := DWORD_TO_TIME(T_PLC_MS());
	IF NOT init THEN init := TRUE; tn := tx; END_IF;
	IF tx - tn &gt;= SEL(Q, PTL, PTH) THEN
		Q := NOT Q;
		tn := tn + SEL(Q, PTL, PTH);
	END_IF;
ELSE
	Q := FALSE;
	init := FALSE;
END_IF;


(* revision history
hm	29. jun. 2008	rev 1.0
	original version

hm	23. nov. 2008	rev 1.1
	set default for enq to be true

hm	18. jul. 2009	rev 1.2
	improved performance

hm	13. nov. 2009	rev 1.3
	corrected error

hm	16. feb. 2011	rev 1.4
	corrected an error when timer overflows

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b84655e5-d6b4-4093-8e02-1df75cf535cf</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GEN_PW2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="ENQ">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TH1">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="TL1">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="TH2">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="TL2">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="TS">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TH">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="TL">
              <type>
                <TIME />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="t_high">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="t_low">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="et">
              <type>
                <TIME />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system timer *)
tx := DWORD_TO_TIME(T_PLC_MS());

(* startup initialization *)
IF NOT init THEN
	start := tx;
	init := TRUE;
	TH := T#0s;
	TL := T#0s;
END_IF;

(* timing selection *)
IF TS THEN
	t_high := TH2;
	t_low := TL2;
ELSE
	t_high := TH1;
	t_low := TL1;
END_IF;

(* normal operation *)
IF ENQ THEN
	et := tx - start;
	IF NOT Q THEN
		IF et &gt;= t_low THEN
			Q := TRUE;
			start := tx;
			TL := T#0s;
		ELSE
			TL := et;
		END_IF;
	ELSE
		IF et &gt;= t_high THEN
			Q := FALSE;
			start := tx;
			TH := T#0s;
		ELSE
			TH := et;
		END_IF;
	END_IF;
ELSE
	Q := FALSE;
	TH := T#0s;
	TL := T#0s;
	start := tx;
END_IF;



(* revision history
hm	26. sep. 2008	rev 1.0
	original version

hm	14. mar. 2009	rev 1.1
	removed double assignments

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>969fd7df-14b3-4553-bd4a-9b821a005a9a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GEN_RDM" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="AM">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="OS">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Out">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time and prepare input data *)
tx := DWORD_TO_TIME(T_PLC_MS()) - last;

(* init section *)
IF NOT init THEN
	init := TRUE;
	last := tx;
	tx := t#0s;
END_IF;

(* add last if one cycle is finished *)
IF tx &gt;= pt THEN
	last := last + pt;
	tx := tx - pt;

	(* generate output signal *)
	out := am * (RDM(0) - 0.5) + os;
	q := TRUE;
ELSE
	q := FALSE;
END_IF;

(* revision history

hm	7.2.2007		rev 1.0
	original version

hm	16.9.2007		rev 1.1
	changes time() to T_plc_ms() for compatibility reasons

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>73963004-f4a0-4ac5-a218-2b1bf9819547</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GEN_RDT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Enable">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="Min_Time_ms">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1s0ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> min Taktzeit </xhtml>
              </documentation>
            </variable>
            <variable name="Max_Time_ms">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1s200ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Max Taktzeit </xhtml>
              </documentation>
            </variable>
            <variable name="TP_Q">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#100ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zeit Ausgang auf TRUE </xhtml>
              </documentation>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="xQ">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tonRDMTimer">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zeitbaustein Taktgenerator </xhtml>
              </documentation>
            </variable>
            <variable name="tof_xQ">
              <type>
                <derived name="TOF" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Ausschaltverzögerung Taktgenerator </xhtml>
              </documentation>
            </variable>
            <variable name="tRDMTime">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sollzeit </xhtml>
              </documentation>
            </variable>
            <variable name="rRDMTime">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zufalswert Timer </xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tonRDMTimer ( IN:= Enable , PT:= tRDMTime );
tof_xQ ( IN:= tonRDMTimer.Q , PT:= TP_Q );
XQ := tof_xq.Q;
IF tonRDMTimer.Q THEN
		 xQ := TRUE ;
		 rRDMTime := RDM ( last:= rRDMTime ) ;
		 tRDMTime := REAL_TO_TIME ( rRDMTime * DINT_TO_REAL(TIME_TO_DINT( Max_Time_ms - Min_Time_ms ) + TIME_TO_DINT(Min_Time_ms ))) ;
		 tonRDMTimer ( IN:= FALSE );
END_IF;

(* revision history
J. Schohaus	19. nov 2007	rev 1.0
	origial version

hm	16. mar. 2008			rev 1.1
	added type conversion to avoid warnings under codesys 3.0
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2171bff8-72ff-4c7b-bc1d-c9f060f7a71d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GEN_RMP" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PT">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1s0ms" />
              </initialValue>
            </variable>
            <variable name="AM">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="OS">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="DL">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="OUT">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="temp">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="ltemp">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time and prepare input data *)
tx := DWORD_TO_TIME(T_PLC_MS()) - last;
DL := MODR(dl,1.0);
IF dl &lt; 0.0 THEN dl := 1.0 - dl; END_IF;

(* init section *)
IF NOT init THEN
	init := TRUE;
	last := tx;
	tx := t#0s;
END_IF;

(* add last if one cycle is finished *)
IF tx &gt;= pt THEN
	last := last + pt;
	tx := tx - pt;
END_IF;

(* generate sine wave *)
ltemp := temp;
IF pt &gt; t#0s THEN temp := FRACT(TIME_TO_REAL(tx + MULTIME(pt, dl)) / TIME_TO_REAL(pt)); END_IF;
out := am * temp + os;

(* boolean output Q *)
Q := temp &lt; ltemp;

(* revision history
hm	3. mar 2007		rev 1.0
	original version

hm	17 sep 2007		rev 1.1
	replaced time() with t_plc_ms for compatibilitx reasons

hm	27. nov 2007	rev 1.2
	avoid divide by 0 when pt = 0

ks	26. oct. 2008	rev 1.3
	code optimization

hm	10. mar. 2009	rev 1.4
	changed real constants to use dot syntax
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f0b2d758-8e7f-4ab0-b1d6-cdddc219946c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GEN_SIN" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="AM">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="OS">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="DL">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Out">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="temp">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time and prepare input data *)
tx := DWORD_TO_TIME(T_PLC_MS()) - last;
DL := MODR(dl,1.0);
IF dl &lt; 0.0 THEN dl := 1.0 - dl; END_IF;

(* init section *)
IF NOT init THEN
	init := TRUE;
	last := tx;
	tx := t#0s;
END_IF;

(* add last if one cycle is finished *)
IF tx &gt;= pt THEN
	last := last + pt;
	tx := tx - pt;
END_IF;

(* generate sine wave *)
IF pt &gt; t#0s THEN temp := SIN(math.PI2 * DWORD_TO_REAL(TIME_TO_DWORD(tx + MULTIME(pt, dl))) / DWORD_TO_REAL(TIME_TO_DWORD(pt))); END_IF;
out := am * 0.5 *  temp + os;

(* boolean output Q *)
q := NOT SIGN_R(temp);

(* revision history
hm	22. jan 2007	rev 1.0
	original version

hm	17 sep 2007	rev 1.1
	replaced time() with t_plc_ms for compatibilitx reasons

hm	27. nov 2007	rev 1.2
	avoid divide by 0 when pt = 0

hm	6. jan 2008		rev 1.3
	improved performance

hm	16. mar. 2008	rev 1.4
	added type conversion to avoid warnings under codesys 3.0

hm	18. oct. 2008	rev 1.5
	using math constants

hm	11. mar. 2009	rev 1.6
	changed real constants to use dot syntax

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>be729935-59ca-4674-a00e-de2cb70660f3</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GEN_SQR" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="AM">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="OS">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="DC">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0.5" />
              </initialValue>
            </variable>
            <variable name="DL">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Out">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* check dc = 1 or 0 *)
IF dc = 0.0 THEN
	out := -am * 0.5 + os;
	Q := FALSE;
	RETURN;
ELSIF dc = 1.0 THEN
	out := am * 0.5 + os;
	Q := TRUE;
	RETURN;
END_IF;

(* read system time and prepare input data *)
tx := DWORD_TO_TIME(T_PLC_MS()) - last;
DL := MODR(dl,1.0);
IF dl &lt; 0.0 THEN dl := 1.0 - dl; END_IF;
dc := MODR(dc,1.0);
IF dc &lt; 0.0 THEN dc := 1.0 - dc; END_IF;

(* init section *)
IF NOT init THEN
	init := TRUE;
	last := tx;
	tx := t#0s;
END_IF;

(* add last if one cycle is finished *)
IF tx &gt;= pt THEN
	last := last + pt;
	tx := tx - pt;
END_IF;

(* check if falling or rising edge first *)
IF MULTIME(pt, dl + dc) &gt;= pt THEN
	(* generate falling edge *)
	IF tx &gt;= MULTIME(pt, dl + dc - 1) THEN
		out := -am * 0.5 + os;
		Q := FALSE;
	END_IF;
	(* generate rising edge *)
	IF tx &gt;= MULTIME(pt, dl) THEN
		out := am * 0.5 + os;
		Q := TRUE;
	END_IF;
ELSE
	(* generate rising edge first *)
	IF tx &gt;= MULTIME(pt, dl) THEN
		out := am * 0.5 + os;
		Q := TRUE;
	END_IF;
	(* generate falling edge *)
	IF tx &gt;= MULTIME(pt, dl + dc) THEN
		out := -am * 0.5 +os;
		Q := FALSE;
	END_IF;
END_IF;

(* revision history

hm	12. feb 2007	rev 1.1
	added default value for dc = 0.5

hm	17 sep 2007	rev 1.2
	replaced time() with t_plc_ms for compatibilitx reasons

hm	6. jan 2008	rev 1.3
	improved performance

hm	11. mar. 2009	rev 1.4
	changed real constants to use dot syntax
	set default amplitude to 1.0

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c8c0369d-b4c9-49a6-926b-245590399f3d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="PWM_DC" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="F">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="DC">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="clk">
              <type>
                <derived name="CLK_PRG" />
              </type>
            </variable>
            <variable name="pulse">
              <type>
                <derived name="TP_X" />
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF F &gt; 0.0 THEN
	tmp := 1000.0 / F;
	CLK(PT := REAL_TO_TIME(tmp));
	Pulse(in := clk.Q, pt := REAL_TO_TIME(tmp * DC));
	Q := pulse.Q;
END_IF;

(* revision history

hm	25. feb 2007	rev 1.1
	recoded in st for better performance and better portability

hm	27. nov 2007	rev 1.2
	avoid divide by 0 when F = 0

hm	19. oct. 2008	rev 1.3
	changed type TP_R to TP_X because of name change
	improved performance

hm	11. mar. 2009	rev 1.4
	changed real constants to use dot syntax

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f021ce35-3a59-483f-b659-da7d7f5d1aec</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="PWM_PW" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="F">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="PW">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="clk">
              <type>
                <derived name="CLK_PRG" />
              </type>
            </variable>
            <variable name="pulse">
              <type>
                <derived name="TP_X" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF F &gt; 0.0 THEN
	CLK(PT := REAL_TO_TIME(1000.0 / F));
	Pulse(in := clk.Q, pt := pw);
	Q := pulse.Q;
END_IF;

(* revision history

hm	25. feb 2007	rev 1.1
	recoded in st for better performance and better portability

hm	27. nov 2007	rev 1.2
	avoid divide by 0 when F = 0

hm	9. dec 2007		rev 1.3
	corrected an error with F = 0

hm	19. oct. 2008	rev 1.4
	changed type tp_r to TP_x brecause of name change

hm	11. mar. 2009	rev 1.5
	changed real constants to use dot syntax

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5e4dd744-fdaa-41c3-a0e1-071af30ba135</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="RMP_B" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="UP">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="BUSY">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="HIGH">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="LOW">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="rmp">
              <type>
                <derived name="_RMP_B" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* generate ramp *)
rmp(dir := UP, E := E, TR := PT, rmp := out);

(* set or reset operation *)
IF RST THEN
	out := 0;
ELSIF SET THEN
	out := 255;
END_IF;

(* checks for outputs stable and reset or set busy flag *)
low := out = 0;
high := out = 255;
busy := NOT (low OR high) AND E;


(* revision history

hm 5.10.2006	rev 1.1
	added busy output
hm 17.1.2007	rev 1.2
	renamed input ud to up for better usability
	deleted unused variable step

hm	17.9.2007		rev 1.3
	replaced time() with t_plc_ms() for compatibility reasons

hm	28. sep 2007	rev 1.4
	added outputs on and off
	busy is now disabled while en is false
	new coding for higher accuracy and performance

hm	5. oct 2007	rev 1.5
	added statements to allow for PT to be t#0s output jumps to max or min immediately

hm	25. dec 2007	rev 1.6
	improved code for better performance

hm	16. oct. 2008	rev 1.7
	improved code for better performance

hm	18. oct. 2008	rev 1.8
	added type conversion to avoid warnings
	changed input en to e for compatibility reasons

hm	23. oct. 2008	REV 	2.0
	new code using _RMP_B

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a51d62b3-7aaf-4cd2-89a8-f72c207fef74</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="RMP_SOFT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="VAL">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="PT_ON">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="PT_OFF">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <BYTE />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="rmp">
              <type>
                <derived name="_RMP_B" />
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tmp := SEL(in, 0, val);
IF tmp &gt; out THEN
	(* we need to ramp down *)
	rmp(dir := TRUE, E := TRUE, TR := PT_ON, rmp := out);
	(* make sure out does not surpass tmp *)
	out := MIN(out, tmp);
ELSIF tmp &lt; out THEN
	(* we need to ramp up *)
	rmp(dir := FALSE, E := TRUE, TR := PT_OFF, rmp := out);
	(* make sure out does not surpass tmp *)
	out := MAX(out, tmp);
ELSE
	(* no ramp necessary *)
	rmp(E := FALSE, rmp := out);
END_IF;


(* revision history

hm 22.1.2007	rev 1.1
	deleted unused variables X1 and I, X2 and X3

hm	17.9.2007	rev 1.2
	replaced time() with t_plc_ms() for compatibility reasons

hm	26. oct. 2008	2.0
	new code using _rmp_b
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d84d5267-8399-4307-a612-0d3485f2ba39</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="RMP_W" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="UP">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="out">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="busy">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="high">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="low">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="rmp">
              <type>
                <derived name="_RMP_W" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* generate ramp *)
rmp(dir := UP, E := E, TR := PT, rmp := out);

(* set or reset operation *)
IF RST THEN
	out := 0;
ELSIF SET THEN
	out := 65535;
END_IF;

(* checks for outputs stable and reset or set busy flag *)
low := out = 0;
high := out = 65535;
busy := NOT (low OR high) AND E;


(* revision history:

hm 4.10.2006		rev 1.1
	added the busy output which signals that the ramp is running.

hm 22.1.2007		rev 1.2
	deleted unused variable step

hm	17.9.2007		rev 1.3
	replaced time() with t_plc_ms() for compatibility reasons

hm	28. sep 2007	rev 1.4
	added outputs on and off
	busy is now disabled while en is false
	new coding for higher accuracy and performance

hm	5. oct 2007	rev 1.5
	added statements to allow for PT to be t#0s output jumps to max or min immediately

hm	2. dec 2007	rev 1.6
	corrected an error in calculation of step response

hm	25. dec 2007	rev 1.7
	corrected an error while step response was too slow for fast rise times

hm	16. oct. 2008	rev 1.8
	improved performance

hm	18. oct. 2008	rev 1.9
	renamed inout EN to E for compatibility reasons

hm	23. oct. 2008	rev 2.0
	new code using _RMP_W
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7fec7b19-194e-489d-873a-28b852801474</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="AIN" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="in">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="Bits">
              <type>
                <BYTE />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="sign">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="255" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="low">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="high">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="10" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <localVars constant="true">
            <variable name="ff">
              <type>
                <DWORD />
              </type>
              <initialValue>
                <simpleValue value="16#FFFFFFFF" />
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="temp1">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="temp2">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="sx">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* extract the sign bit *)
IF sign &lt; 32 THEN
	temp1 := SHR(in,sign);
	sx := temp1.0;
ELSE
	sx := FALSE;
END_IF;
temp1 := SHR(ff, 32-bits);
temp2 := in AND temp1;
AIN := (high - low) * DWORD_TO_REAL(temp2) / DWORD_TO_REAL(temp1) + low;
IF sx THEN AIN := -AIN; END_IF;

(* revision history
hm 18.8.2006	rev 1.1
	fixed an error with low value negative and high value 0.

hm 19.1.2007	rev 1.2
	fixed an error with sign bit.

hm	13.9.2007	rev 1.3
	changed code to avoid warning under codesys 2.8.1

hm	2. dec 2007	rev 1.4
	changed code for better performance

hm	16. mar 2008	rev 1.5
	added type conversions to avoid warnings under codesys 30
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>9f189695-b6d4-42f6-9aec-7e6bd571fab2</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="AIN1" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="sign_bit">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="255" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="error_bit">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="255" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="error_code_en">
              <type>
                <BOOL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="error_code">
              <type>
                <DWORD />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="overflow_bit">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="255" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="overflow_code_en">
              <type>
                <BOOL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="overflow_code">
              <type>
                <DWORD />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Bit_0">
              <type>
                <INT />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Bit_N">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="31" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="out_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="out_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="10" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="code_min">
              <type>
                <DWORD />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="code_max">
              <type>
                <DWORD />
              </type>
              <initialValue>
                <simpleValue value="16#FFFFFFFF" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="error_output">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="overflow_output">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="10" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="out">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="sign">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="error">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="overflow">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tB">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* extract error bit *)
error := ((SHR(in,error_bit) AND 16#0000_0001) = 1) OR (error_code_en AND error_code = in);
IF error THEN
	out := error_output;
	RETURN;
END_IF;

(* strip off the data input *)
tb := SHR(SHL(in, 31 - bit_N), 31 - bit_N + Bit_0);

(* extract overflow bit *)
overflow := ((SHR(in,overflow_bit) AND 16#0000_0001) = 1) OR (overflow_code_en AND overflow_code = in) OR (tb &lt; code_min OR tb &gt; code_max);
IF overflow THEN
	out := overflow_output;
	RETURN;
END_IF;

(* extract sign bit *)
sign := (SHR(in,sign_bit) AND 16#0000_0001) = 1;

(* convert in to out *)
out := (DWORD_TO_REAL(tb - code_min) * (out_max - out_min) / DWORD_TO_REAL(code_max - code_min) + out_min);
IF sign THEN out := out * -1.0; END_IF;



(* revision history
hm	23. feb 2008	rev 1.0
	original version

hm	16. mar 2008	rev 1.1
	added type conversions to avoid warnngs under codesys 30

hm	22. apr. 2008	rev 1.2
	corrected error in formula when code_min was set
	corrected error when sign bit was used
	optimized code for better performance

hm	10. mar. 2009	rev 1.3
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>62998ee3-9f8c-4ca4-a60a-ff588e5d9164</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="AOUT" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Bits">
              <type>
                <BYTE />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="sign">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="255" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="low">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="high">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="10" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <localVars constant="true">
            <variable name="ff">
              <type>
                <DWORD />
              </type>
              <initialValue>
                <simpleValue value="2#1" />
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="in2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="sx">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* if sign bit is defined *)
IF sign &lt; 32 THEN
	sx := sign_R(in);
	in2 := ABS(in);
ELSE
	in2 := in;
END_IF;

(* begrenze in auf die zulässigen werte *)
in2 := LIMIT(low, in2, high);

(* Berechne den Ausgangswert *)
Aout := REAL_TO_DWORD((in2 - low) / (high - low) * DWORD_TO_REAL(SHL(ff,bits) -1));
IF sx THEN Aout := SHL(ff,sign) OR Aout; END_IF;

(*
revision history

hm 18.1.2007		rev 1.1
	renamed Modul to aout.
	changed Output to 32 Bit max.
	corrected error with sign bit.

hm	13.9.2007		rev 1.2
	changed code to avoid warning under codesys 2.8.1

hm	2. dec 2007		rev 1.3
	changed code for better performance

hm	23. feb 2008	rev 1.4
	changed code for better performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ba6564b4-a54b-4bfc-ba52-5e8ae141e2ed</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="AOUT1" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Bit_0">
              <type>
                <INT />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Bit_N">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="31" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="sign">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="255" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="low">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="high">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="10" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <localVars constant="true">
            <variable name="ff">
              <type>
                <DWORD />
              </type>
              <initialValue>
                <simpleValue value="2#1" />
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="sx">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="in2">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* if sign bit is defined *)
IF sign &lt; 32 THEN
	sx := SIGN_R(in);
	in2 := ABS(in);
ELSE
	in2 := in;
END_IF;

(* begrenze in auf die zulässigen werte *)
in2 := LIMIT(low, in2, high);

(* Berechne den Ausgangswert *)
AOUT1 := SHL(REAL_TO_DWORD((in2 - low) / (high - low) * DWORD_TO_REAL(SHL(ff,bit_n - Bit_0 + 1) -1)),Bit_0);
IF sx THEN AOUT1 := SHL(ff,sign) OR AOUT1; END_IF;


(* revision history
hm	23. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>631acd3e-94ac-433f-9a05-7ce7daf5d001</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BYTE_TO_RANGE" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="low">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="high">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">BYTE_TO_RANGE := (high - low) * X / 255.0 + low;


(* revision history
hm	9. jan 2008		rev 1.0
	original version

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1cbe67e9-e5c7-4f16-b86a-8081736fe6c4</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DELAY" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="buf">
              <type>
                <array>
                  <dimension lower="0" upper="31" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">stop := LIMIT(0,N,32) - 1;
IF rst OR NOT init THEN
	init := TRUE;
	FOR i := 0 TO stop DO buf[i] := in; END_FOR;
	out := in;
	i := 0;
ELSIF stop &lt; 0 THEN
	out := in;
ELSE
	out := buf[i];
	buf[i] := in;
	i := INC1(i, N);
END_IF;



(* revision history
hm 1.10.2006		rev 1.1
	corrected error in buffer management

hm 19.1.2007		rev 1.2
	changed reset to load the value of in instead of 0

hm	27. oct. 2008	rev 1.3
	improved performance

hm	23. feb.2009	rev 1.4
	corrected an index problem

hm	23. mar. 2009	rev 1.5
	corrected non standard write to input N

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c4e3a1b5-dbfb-4620-9c5c-561a6ccfb7e0</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DELAY_4" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="out1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="out2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="out3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="out4">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="temp">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">out4 := out3;
out3 := out2;
out2 := out1;
out1 := temp;
temp := in;

(* revision history

hm 19.1.2007	rev 1.1
	added variable temp to add 1 delay  for q1

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>6fd22e6d-015f-4be5-a1ae-8783779b0414</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FADE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="IN2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="F">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TF">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="rst">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="rmx">
              <type>
                <derived name="RMP_W" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">rmx(rst := rst AND NOT F, set := rst AND F, pt := TF, up := F);
Y := (in2 - In1) / 65535.0 * WORD_TO_REAL(rmx.out) + in1;


(* code for rev 1.1
IF rst THEN
	rmx(set := F, rst := NOT F);
ELSIF F AND (NOT rmx.high) THEN
	rmx(PT := TF, UP := TRUE, e := TRUE, rst := FALSE, set := FALSE);
ELSIF (NOT F) AND (NOT rmx.low) THEN
	rmx(PT := TF, UP := FALSE, e := TRUE, rst := FALSE, set := FALSE);
ELSE
	rmx(e := FALSE, rst := FALSE, set := FALSE);
END_IF;
Y := (WORD_TO_REAL(rmx.out) * in1 + WORD_TO_REAL(FF - rmx.out) * IN2) / FF;
*)


(* revision history
hm	26. dec 2007	rev 1.0
	original version

hm	18. oct. 2008	rev 1.1
	improved performance
	changed calls for rmp_w because rmp_w has chaged

hm	17. dec. 2008	rev 1.2
	function of input f was inverted

hm	24. jan. 2009	rev 1.3
	delted unused var FF
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>9d1b08ee-9482-41b0-86f5-b4d440f20516</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FILTER_DW" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="T">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <DWORD />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Yi">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := T_PLC_MS();

(* startup initialisation *)
IF NOT init OR T = t#0s THEN
	init := TRUE;
	Yi := DWORD_TO_REAL(X);
ELSE
	Yi := Yi + (DWORD_TO_REAL(X) - DWORD_TO_REAL(Y)) * DWORD_TO_REAL(tx - last) / TIME_TO_REAL(T);
END_IF;
last := tx;

Y := REAL_TO_DWORD(Yi);



(*
hm 10. oct. 2008	rev 1.0
	original version

hm	3. nov. 2008	REV 1.1
	corrected an overflow problem
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7b5de28e-1a61-4f88-8665-cba12126ead1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FILTER_I" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="T">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <INT />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="Yi">
              <type>
                <DINT />
              </type>
            </variable>
            <variable name="last">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := T_PLC_MS();

(* startup initialisation *)
IF NOT init OR T = t#0s THEN
	init := TRUE;
	Yi := INT_TO_DINT(X) * 1000;
ELSE
	(* to increase accuracy of the filter we calculate internal Yi wich is Y * 1000 *)
	Yi := Yi + INT_TO_DINT(X - Y) * DWORD_TO_DINT(tx - last) * 1000 / TIME_TO_DINT(T);
END_IF;
last := tx;
Y := DINT_TO_INT(yi / 1000);



(*
hm 8. nov. 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b5406eeb-c711-492f-8e33-0ddf6e13b15d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FILTER_MAV_DW" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="N">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <DWORD />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="buffer">
              <type>
                <array>
                  <dimension lower="0" upper="31" />
                  <baseType>
                    <DWORD />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* limit N to size of buffer *)
N := MIN(N, 32);

(* startup initialisation *)
IF NOT init OR rst OR N = 0 THEN
	init := TRUE;
	tmp := UINT_TO_INT(N)-1;
	FOR i := 0 TO tmp DO
		buffer[i] := X;
	END_FOR;
	Y := X;
ELSE
	tmp := UINT_TO_INT(N);
	i := INC1(i, tmp);
	Y := Y + (X - buffer[i]) / N;
	buffer[i] := X;
END_IF;




(*
hm 13. oct. 2008	rev 1.0
	original version

hm	27. oct. 2008	rev 1.1
	added typecast to avoid warnings

hm	24. nov. 2008	rev 1.2
	added typecasts to avoid warnings
	avoid divide by 0 if N = 0

hm	23. feb. 2009	rev 1.3
	limit N to max array size

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>96fe32e3-1fe6-4a31-a679-b9b8dfa06e98</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FILTER_MAV_W" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="N">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <WORD />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="buffer">
              <type>
                <array>
                  <dimension lower="0" upper="31" />
                  <baseType>
                    <WORD />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* limit N to size of buffer *)
N := MIN(N, 32);

(* startup initialisation *)
IF NOT init OR rst OR N = 0 THEN
	init := TRUE;
	tmp := UINT_TO_INT(N) - 1;
	FOR i := 0 TO tmp DO
		buffer[i] := X;
	END_FOR;
	Y := X;
ELSE
	tmp := UINT_TO_INT(N);
	i := INC1(i, tmp);
	Y := Y + (X - buffer[i]) / N;
	buffer[i] := X;
END_IF;



(*
hm 13. oct. 2008	rev 1.0
	original version

hm	18. oct. 2008	rev 1.1
	added typecast to avoid warnings

hm	24. nov. 2008	rev 1.2
	added typecasts to avoid warnings
	avoid devide by 0 if N = 0

hm	23. feb. 2009	rev 1.3
	limit N to max array size

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2cea7743-ff67-482b-af91-d36f2795b17a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FILTER_W" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="T">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <WORD />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := T_PLC_MS();

(* startup initialisation *)
IF NOT init OR T = T#0s THEN
	init := TRUE;
	last := tx;
	Y := X;
ELSIF Y = X THEN
	last := tx;
ELSE
	tmp :=  WORD_TO_DWORD(X - Y) * (tx - last) / TIME_TO_DWORD(T);
	IF tmp &lt;&gt; 0 THEN
		Y := DINT_TO_WORD(WORD_TO_DINT(Y) + DWORD_TO_DINT(tmp));
		last := tx;
	END_IF;
END_IF;

(*
hm 10. oct. 2008	rev 1.0
	original version

hm	3. nov. 2008	rev 1.1
	fixed overflow problem in formula

hm	25. jan. 2011	rev 1.2
	fixed error in formula
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>07680d00-9bc2-41f4-b8cc-583909153ae8</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FILTER_WAV" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="W">
              <type>
                <array>
                  <dimension lower="0" upper="15" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="buffer">
              <type>
                <array>
                  <dimension lower="0" upper="15" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="n">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* startup initialisation *)
IF NOT init OR rst THEN
	init := TRUE;
	FOR i := 0 TO 15 DO
		buffer[i] := X;
	END_FOR;
	i := 15;
	Y := X;
ELSE
	i := INC1(i, 16);
	buffer[i] := X;
END_IF;

(* calculate the weighted average *)
Y := 0.0;
FOR n := 0 TO 15 DO
	Y := buffer[i] * W[n] + Y;
	i := DEC1(i, 16);
END_FOR;


(*
hm 	14. oct. 2008	rev 1.0
	original version

hm	27. oct. 2008	rev 1.1
	changed _DEC and _INC to DEC1 and INC1

hm	10. mar. 2009	rev 1.2
	real constants updated to new systax using dot

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c26ff96c-2498-422e-bf61-05b5396fcbd7</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MIX" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="A">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="B">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="M">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MIX := (1.0 - M) * A + M * B;

(* revision history
hm	19. Nov 2007	rev 1.0
	original version

hm	10. mar 2009	rev 1.1
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0e76303d-0221-40ae-8e87-d3aaeaef7848</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MUX_R2" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="IN0">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="IN1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="A">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MUX_R2 := SEL(A, IN0, IN1);


(* revision history
hm	19. jan. 2007	rev 1.0
	original version

hm	16. oct. 2008	rev 1.1
	improved performance


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ae5dc544-5beb-45a3-9bcd-03c6d8cdeb1e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MUX_R4" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="IN0">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="IN1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="IN2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="IN3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="A0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="A1">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF A1 THEN
	MUX_R4 := SEL(A0, IN2, IN3);
ELSE
	MUX_R4 := SEL(A0, IN0, IN1);
END_IF;



(* revision history
hm	19. jan 2007	rev 1.0
	original version

hm	16. oct. 2008	rev 1.1
	improved performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>32331617-e01e-4c47-bdf8-378d26a39468</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="OFFSET" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="O1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="O2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="O3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="O4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Offset_1">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Offset_2">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Offset_3">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Offset_4">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="default">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF D THEN OFFSET := default; ELSE OFFSET := X; END_IF;
IF O1 THEN OFFSET := OFFSET + offset_1; END_IF;
IF O2 THEN OFFSET := OFFSET + offset_2; END_IF;
IF O3 THEN OFFSET := OFFSET + offset_3; END_IF;
IF O4 THEN OFFSET := OFFSET + offset_4; END_IF;



(* revision history
hm	12. jan 2007
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ce816371-709d-4f88-8073-cc978688221f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="OFFSET2" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="O1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="O2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="O3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="O4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Offset_1">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Offset_2">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Offset_3">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Offset_4">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="default">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF D THEN OFFSET2 := default; ELSE OFFSET2 := X; END_IF;
IF O4 THEN OFFSET2 := OFFSET2 + offset_4;
ELSIF O3 THEN OFFSET2 := OFFSET2 + offset_3;
ELSIF O2 THEN OFFSET2 := OFFSET2 + offset_2;
ELSIF O1 THEN OFFSET2 := OFFSET2 + offset_1;
END_IF;</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ba7a80c0-4d91-4e09-ba84-12dc6ff3131b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="OVERRIDE" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="X2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="X3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="E1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="E2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="E3">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF E1 THEN OVERRIDE := X1; END_IF;
IF E2 AND ABS(x2) &gt; ABS(OVERRIDE) THEN OVERRIDE := X2; END_IF;
IF E3 AND ABS(x3) &gt; ABS(OVERRIDE) THEN OVERRIDE := X3; END_IF;

(* revision history
hm	4.11.2007		rev 1.0
	original version

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>cb4ec5e6-1b8f-4c1b-a3c3-d8bb3e61e502</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="RANGE_TO_BYTE" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="low">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="high">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">RANGE_TO_BYTE := INT_TO_BYTE(TRUNC_INT((LIMIT(low, X, high) - low) * 255.0 / (high - low)));


(* revision history
hm	9. jan 2008		rev 1.0
	original version

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>20c2145d-11ff-4cb6-8dda-784b53b83109</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="RANGE_TO_WORD" pouType="function">
        <interface>
          <returnType>
            <WORD />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="low">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="high">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">RANGE_TO_WORD := DINT_TO_WORD(TRUNC_INT((LIMIT(low,X,high)-low) * 65535.0 / (high - low)));


(* revision history
hm	9. jan 2008		rev 1.0
	original version

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ba060be5-dcc5-4fa5-83e7-f9665cbc17e0</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SCALE" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="O">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="MX">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="MN">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SCALE := LIMIT(MN, X * K + O, MX);


(* revision history
hm	16. may. 2008		rev 1.0
	original version
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>3e183adc-0a29-4ac5-bc77-345aecbec482</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SCALE_B" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="I_LO">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="I_HI">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="O_LO">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="O_HI">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF I_HI = I_LO THEN
	SCALE_B := O_LO;
ELSE
	SCALE_B := (O_HI - O_LO) / BYTE_TO_REAL(I_HI - I_LO) * BYTE_TO_REAL(LIMIT(I_LO, X, I_HI));
END_IF

(* revision history
hm	18. may. 2008		rev 1.0
	original version

hm	18. jan 2011		rev 1.1
	avoid division by 0

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>6610630e-86ba-4867-a4ae-45086e2aaf4f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SCALE_B2" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="in1">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="in2">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="O">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in1_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in1_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in2_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in2_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SCALE_B2 := 	(((in1_max - in1_min)* in1 + (in2_max - in2_min)* in2) * 0.003921569 + in1_min + in2_min) * K + O;


(* revision History
hm 19.1.2007		rev 1.1
	changed outputs to real to avoid overflow of integer
	added offset for better cascading of scale functions
	changed from FB to function

hm	6. jan 2008		rev 1.2
	improved performance

hm	26. oct. 2008	rev 1.3
	code optimization

hm	3. nov. 2008	rev 1.4
	used wrong factor in formula

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4e487c6e-916a-4811-b40b-04e64f4b89c4</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SCALE_B4" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="in1">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="in2">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="in3">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="in4">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="O">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in1_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in1_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in2_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in2_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in3_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in3_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in4_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in4_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SCALE_B4 := 	(((in1_max - in1_min)* in1 + (in2_max - in2_min)* in2 + (in3_max - in3_min)* in3 + (in4_max - in4_min)* in4)* 0.003921569 + in1_min + in2_min + in3_min + in4_min) * K + O;


(* revision History
hm 19.1.2007		rev 1.1
	changed outputs to real to avoid overflow of integer
	added offset for better cascading of scale functions
	changed from fb to function

hm	6. jan 2008		rev 1.2
	improved performance

hm	26. oct. 2008	rev 1.3
	optimized code

hm	3. nov. 2008	rev 1.4
	used wrong factor in formula

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d854863a-4341-46ab-88a3-c6790ca32ed5</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SCALE_B8" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="in1">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="in2">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="in3">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="in4">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="in5">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="in6">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="in7">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="in8">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="O">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in1_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in1_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in2_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in2_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in3_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in3_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in4_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in4_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in5_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in5_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in6_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in6_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in7_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in7_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in8_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in8_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SCALE_B8 := 	(((in1_max - in1_min)* in1 + (in2_max - in2_min)* in2 + (in3_max - in3_min)* in3 + (in4_max - in4_min)* in4 +
				(in5_max - in5_min)* in5 + (in6_max - in6_min)* in6 + (in7_max - in7_min)* in7 + (in8_max - in8_min)* in8) * 0.003921569
				 + in1_min + in2_min + in3_min + in4_min + in5_min + in6_min + in7_min + in8_min) * K + O;


(* revision History
hm	19. jan.2007	rev 1.1
	changed outputs to real to avoid overflow of integer
	added offset for better cascading of scale functions

hm	6. jan. 2008	rev 1.2
	improved performance

hm	26. oct. 2008	rev 1.3
	code optimization

hm	3. nov. 2008	rev 1.4
	used wrong factor in formula

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>820006c1-9d5a-41da-9527-93fe6227c25c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SCALE_D" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="I_LO">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="I_HI">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="O_LO">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="O_HI">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF I_HI = I_LO THEN
	SCALE_D := O_LO;
ELSE
	SCALE_D := (O_HI - O_LO) / DWORD_TO_REAL(I_HI - I_LO) * DWORD_TO_REAL(LIMIT(I_LO, X, I_HI) - I_LO) + O_LO;
END_IF;

(* revision history
hm	18. may. 2008	rev 1.0
	original version

hm	13. nov. 2008	rev 1.1
	corrected formula for negative gradient

hm	11. jan 2011	rev 1.2
	avoid division by 0
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>dbaab335-4d9f-4713-b3a0-c145e77a36bc</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SCALE_R" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="I_LO">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="I_HI">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="O_LO">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="O_HI">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF I_LO = I_HI THEN
	SCALE_R := O_LO;
ELSE
	SCALE_R := (O_HI - O_LO) / (I_HI - I_LO) * (LIMIT(I_LO, X, I_HI) - I_LO) + O_LO;
END_IF;


(* revision history
hm	18. may. 2008	rev 1.0
	original version

hm	13. nov. 2008	rev 1.1
	corrected formula for negative gradient

hm	11. jan 2011	rev 1.2
	avoid division by 0

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>cc853f4c-e73d-4151-9654-1c66a1c033e4</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SCALE_X2" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="IN1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="O">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="IN1_MIN">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="IN1_MAX">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="IN2_MIN">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="IN2_MAX">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SCALE_X2 := (SEL(IN1, IN1_MIN, IN1_MAX)+ SEL(IN2, IN2_MIN, IN2_MAX)) * k + o;


(* revision history
hm	19. jan, 2007	rev 1.0
	original version

hm	26. oct. 2008	rev 1.1
	code optimized

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a240e13f-b00c-4610-b4fa-f210a17fc0c9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SCALE_X4" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="IN1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="O">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="IN1_MIN">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="IN1_MAX">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="IN2_MIN">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="IN2_MAX">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="IN3_MIN">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="IN3_MAX">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="IN4_MIN">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="IN4_MAX">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SCALE_X4 := (SEL(IN1,IN1_MIN, IN1_MAX) + SEL(IN2, IN2_MIN, IN2_MAX)+SEL(IN3, IN3_MIN, IN3_MAX)+ SEL(IN4, IN4_MIN, IN4_MAX)) * k + o;


(* revision history
hm	19. jan. 2008	rev 1.0
	original version

hm	26. oct. 2008	rev 1.1
	optimized code
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d695f591-0bba-4334-bd42-73dff0055654</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SCALE_X8" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="in1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="in2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="in3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="in4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="in5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="in6">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="in7">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="in8">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="O">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in1_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in1_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in2_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in2_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in3_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in3_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in4_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in4_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in5_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in5_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in6_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in6_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in7_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in7_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in8_min">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="in8_max">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SCALE_X8 := (SEL(IN1,IN1_MIN, IN1_MAX)+ SEL(IN2,IN2_MIN, IN2_MAX)+SEL(IN3,IN3_MIN, IN3_MAX)+ SEL(IN4,IN4_MIN, IN4_MAX)
				+SEL(IN5,IN5_MIN, IN5_MAX)+ SEL(IN6,IN6_MIN, IN6_MAX)+SEL(IN7,IN7_MIN, IN7_MAX)+ SEL(IN8,IN8_MIN, IN8_MAX)) * k + o;



(* revision history
hm	19. jan. 2008	rev 1.0
	original version

hm	26. oct. 2008	rev 1.1
	optimized code

hm	24. jan. 2008	rev 1.2
	corrected error in formula
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4064d069-942f-4ef2-a2f2-39d48ca12cad</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SEL2_OF_3" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="IN2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="IN3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="D">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="W">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="D12">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D23">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D31">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">D12 := ABS(IN1-IN2) &lt;= D;
D23 := ABS(IN2-IN3) &lt;= D;
D31 := ABS(IN3-IN1) &lt;= D;

IF (D12 AND D23) OR (D12 AND D31) OR (D23 AND D31) THEN
	(* all 3 inputs are valid *)
	Y := (IN1 + IN2 + IN3) * 0.333333333333;
	E := FALSE;
	W := 0;
ELSIF D12 THEN
	(* only inut 1 and 2 are valid *)
	Y := (In1 + IN2) * 0.5;
	E := FALSE;
	W := 3;
ELSIF D23 THEN
	(* only inut 2 and 3 are valid *)
	Y := (In2 + IN3) * 0.5;
	E := FALSE;
	W := 1;
ELSIF D31 THEN
	(* only inut 3 and 1 are valid *)
	Y := (In3 + IN1) * 0.5;
	E := FALSE;
	W := 2;
ELSE
	(* no calculation possible *)
	E := TRUE;
	W := 4;
END_IF;


(* revision history
hm	18. may 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	improved code
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8bb1e73b-91f1-4398-8d2d-0a23c5b0ca3d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SEL2_OF_3B" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TD">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="W">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="TDEL">
              <type>
                <derived name="TON" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">Q := (IN1 AND IN2) OR (IN1 AND IN3) OR (IN2 AND IN3);
TDEL(IN := (in1 XOR in2) OR (in1 XOR in3) OR (in2 XOR in3), PT := TD);
W := TDEL.Q;


(* revision history
hm		19. may 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>504e5b4b-1e45-4859-adc5-7e9456966ca6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SH" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="CLK">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="out">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="trig">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF clk AND NOT edge THEN
	out := in;
	trig := TRUE;
ELSE;
	trig := FALSE;
END_IF;
edge := clk;

(* revision history

hm 16.1.2007	rev 1.1
	added trig output

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>03addff4-4662-4d7c-8fd2-5b9e20928244</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SH_1" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="out">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Trig">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := DWORD_TO_TIME(T_PLC_MS());

IF tx - last &gt;= PT THEN
	last := tx;
	out := in;
	trig := TRUE;
ELSE
	trig := FALSE;
END_IF;

(* revision history

HM	6.1.2007	rev 1.1
	added trig output

HM	17.9.2007	rev 1.2
	replaced time() with T_PLC_MS() for compatibility reasons
*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c28204f8-c3d7-4e2c-b38e-3d77defc3599</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SH_2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="16" />
              </initialValue>
            </variable>
            <variable name="disc">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="out">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="trig">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="avg">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="high">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="low">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="M">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="buf">
              <type>
                <array>
                  <dimension lower="0" upper="15" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="buf2">
              <type>
                <array>
                  <dimension lower="0" upper="15" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="start">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="temp">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="d2">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := DWORD_TO_TIME(T_PLC_MS());
d2 := SHR(disc,1);

IF tx - last &gt;= PT THEN
	last := tx;
	trig := TRUE;

	(* limit M to 0..16 *)
	M := LIMIT(1,N,16);

	(* edge detected lets take the sample *)
	FOR i := M - 1 TO 1 BY -1 DO buf2[i] := buf2[i-1]; END_FOR;
	buf2[0] := in;
	out := in;
	buf := buf2;

	(* sort the ARRAY lowest value AT 0 *)
	FOR start := 0 TO M - 2 DO
		FOR i := start+1 TO M - 1 DO
			IF buf[start] &gt; buf[i] THEN
				temp := buf[start];
				buf[start] := buf[i];
				buf[i] := temp;
			END_IF;
		END_FOR;
	END_FOR;

	(* any calculation with the samples is here *)
	stop := M - 1 - d2;
	start := d2;
	IF NOT even(disc) THEN start := start + 1; END_IF;
	avg := 0;
	FOR i := start TO stop DO avg := avg + buf[i]; END_FOR;
	avg := avg / INT_TO_REAL(stop - start +1);
	low := buf[start];
	high := buf[stop];
ELSE
	Trig := FALSE;
END_IF;

(* revision history
hm 20. jan. 2007	rev 1.1
	added input N to specify the amout of samples for average and high low calculations
	added trig output

hm 10. sep. 2007 	rev 1.2
	an error would be generated if N was set to 0, now n is forced to1 if set to 0.
	index was out of array.

hm	17. sep. 2007	rev 1.3
	replaced time() with t_plc_ms() for compatibility reasons

hm	6. jan. 2008	rev 1.4
	improved performance

hm	14. jun. 2008	rev 1.5
	set default for input N = 16

hm	10. mar. 2009	rev 1.6
	added type conversion for compatibility reasons

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5b847c51-7262-4b72-85a7-bde2c85b151a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SH_T" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF E THEN out := in; END_IF;



(* revision history
hm	1. sep. 2006	rev 1.0
	original version

hm	18. oct. 2008	rev 1.1
	changed input en to e for compatibility reasons

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>607c0f42-4ea2-4d07-9a8f-2b77328b42ef</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="STAIR" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="D">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF D &gt; 0.0 THEN
	STAIR := DINT_TO_REAL(REAL_TO_DINT(X / D)) * D;
ELSE
	STAIR := X;
END_IF;



(* revision history
hm	28 jan 2007		rev 1.0
	original version

hm	27 dec 2007		rev 1.1
	changed code for better performance

hm	6. jan 2008		rev 1.2
	further performance improvement

hm	26. oct. 2008		rev 1.3
	optimized code

hm	10. mar. 2009	rev 1.4
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7139fa71-806a-4850-95ac-8f1b9d85dd87</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="STAIR2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="D">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF D &gt; 0.0 THEN
	IF X &gt;= Y + D OR X &lt;= Y - D THEN Y := FLOOR(X/D) * D; END_IF;
ELSE
	Y := X;
END_IF;



(* revision history
hm	28 jan 2007		rev 1.0
	original version

hm	27. dec 2007	rev 1.1
	changed code for better performance

hm	30. jun. 2008	rev 1.2
	added type conversions to avoid warnings under codesys 3.0																																																																																																																																																																																																																																																											

ks	26. oct. 2008	rev 1.3
	improved code

hm	10. mar. 2009	rev 1.4
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>566e3b9e-0512-49cd-8f67-93466a162c25</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TREND" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TU">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TD">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last_X">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">TU := X &gt; last_X;
TD := X &lt; last_X;
Q := TU OR TD;
D := X - LAST_X;

last_X := X;



(* revision history
hm	21. aug. 2009	rev 1.0
	original version

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7f2f3513-357a-4493-963c-044c6c4dad62</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TREND_DW" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <DWORD />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TU">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TD">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D">
              <type>
                <DWORD />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last_X">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X &gt; last_X THEN
	TU := TRUE;
	TD := FALSE;
	D := X - last_X;
	Q := TRUE;
ELSIF X &lt; last_X THEN
	TD := TRUE;
	TU := FALSE;
	D := last_X - X;
	Q := FALSE;
ELSE
	TU := FALSE;
	TD := FALSE;
	D := 0;
END_IF;
last_X := X;



(* revision history
hm	21. nov. 2008	rev 1.0
	original version

hm	20. feb. 2009	rev 1.1
	added outputs TU, TD and D

hm	14. mar. 2009	rev 1.2
	removed double assignments

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>50921217-4eb0-48c6-9ae5-ead4b3dfac1f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="WORD_TO_RANGE" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="low">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="high">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">WORD_TO_RANGE := (high - low) * WORD_TO_REAL(X) * 0.00001525902189669640 + low;


(* revision history
hm	9. jan 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	improved code
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4cc7a579-2a49-48fc-8431-54b1c135329e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LIST_CLEAN" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="SEP">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="1" upper="LIST_LENGTH" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pw">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="last">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="c">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
          <inOutVars>
            <variable name="LIST">
              <type>
                <string length="LIST_LENGTH" />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(LIST);

last := sep;
REPEAT
   pos := pos + 1;
   c := pt^[pos];
   IF last &lt;&gt; sep OR c &lt;&gt; sep THEN
      pw := pw + 1;
      pt^[pw] := c;
   END_IF;
   last := c;
UNTIL pos &gt;= LIST_LENGTH OR c = 0
END_REPEAT;

IF pw &gt; 1 THEN
  pw := pw - 1;
  IF pt^[pw] = sep THEN pt^[pw] := 0; END_IF;
END_IF;

(* retrun TRUE *)
LIST_CLEAN := TRUE;



(* revision histroy
hm	28. jun. 2008	rev 1.0
	original release

hm	19. jan. 2011	rev 1.1
	changed string(255) to string(LIST_LENGTH)

*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>87ce8a97-e1c1-4845-8be0-a0c279b9cdc8</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LIST_GET" pouType="function">
        <interface>
          <returnType>
            <string length="LIST_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="SEP">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="POS">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="o">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="1" upper="LIST_LENGTH" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="po">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="1" upper="LIST_LENGTH" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="c">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
          <inOutVars>
            <variable name="LIST">
              <type>
                <string length="LIST_LENGTH" />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* load pointers *)
pt := ADR(LIST);
po := ADR(LIST_GET);

(* search for the n-th occurence of a separation character and store position in i *)
WHILE (cnt &lt; pos) AND (i &lt; LIST_LENGTH) AND (pt^[i] &gt; 0) DO
	IF pt^[i] = sep THEN cnt := cnt + 1; END_IF;
	i := i + 1;
END_WHILE;

(* copy the list element to output *)
IF i &lt; LIST_LENGTH THEN c := pt^[i]; END_IF;
WHILE (c &lt;&gt; sep) AND (c &gt; 0) AND (o &lt; LIST_LENGTH) AND (i &lt; LIST_LENGTH) DO
	po^[o] :=pt^[i];
	o := o + 1;
	i := i + 1;
	c := pt^[i];
END_WHILE;

(* terminate the output string *)
po^[o] := 0;



(* revision histroy
hm	20. jun. 2008	rev 1.0
	original release

hm	19. jan. 2011	rev 1.1
	changed string(255) to strring(LIST_LENGTH)

*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>743a005d-5776-47c1-b1cf-a7905a506a88</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LIST_INSERT" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="SEP">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="POS">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="INS">
              <type>
                <string length="LIST_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="1" upper="LIST_LENGTH" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="c">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <string length="LIST_LENGTH" />
              </type>
            </variable>
          </localVars>
          <inOutVars>
            <variable name="LIST">
              <type>
                <string length="LIST_LENGTH" />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* load pointers *)
pt := ADR(LIST);

(* search for the n-th occurence of a separation character and store position in i *)
c := pt^[1];
WHILE (cnt &lt; pos) AND (i &lt; LIST_LENGTH) AND (c &gt; 0) DO
	i := i + 1;
	c := pt^[i];
	IF c = sep THEN cnt := cnt + 1; END_IF;
END_WHILE;

(* copy the new element into the list *)
tmp := CHR_TO_STRING(SEP);
IF i = 0 THEN
	tmp := CONCAT(INS,tmp);
	LIST := INSERT(LIST, tmp, 0);
ELSE
	tmp := CONCAT(tmp, INS);
	LIST := INSERT(LIST, tmp, i - 1);
END_IF;


LIST_INSERT := TRUE;



(* revision histroy
hm	28. jun. 2008	rev 1.0
	original release

hm	17. dec. 2008	rev 1.1
	changes name of function chr to chr_to_string

hm	19. jan. 2011	rev 1.2
	changed string(255) to string(LIST_LENGTH)

*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>3cf8bc29-467c-4cfd-81ac-46e3bffdef6c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LIST_LEN" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="SEP">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="1" upper="LIST_LENGTH" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="l">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
          <inOutVars>
            <variable name="LIST">
              <type>
                <string length="LIST_LENGTH" />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PT := ADR(LIST);
LIST_LEN := 1;
l := LEN(list);
FOR pos := 1 TO l DO
	IF pt^[pos] = SEP THEN LIST_LEN := LIST_LEN + 1; END_IF;
END_FOR;



(* code before rev 1.1
LIST_LEN := COUNT_CHAR(LIST, SEP) + 1;
*)


(* revision histroy
hm	25. jun. 2008	rev 1.0
	original release

hm	16. oct. 2008	rev 1.1
	fixed a problem where list_len would only work up to LIST_LENGTH

hm	19. jan. 2001	rev 1.2
	changed string(255) to string(LIST_LENGTH)

*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>395e37ab-92d7-46e7-a76c-1d060c3fbe66</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LIST_NEXT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SEP">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="LIST">
              <type>
                <string length="LIST_LENGTH" />
              </type>
            </variable>
          </inOutVars>
          <outputVars>
            <variable name="LEL">
              <type>
                <string length="LIST_LENGTH" />
              </type>
            </variable>
            <variable name="NUL">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="1" upper="LIST_LENGTH" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="start">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* load pointers *)
pt := ADR(LIST);
stop := LEN(LIST);

IF rst THEN
	start := 0;
	pos := 1;
	NUL := FALSE;
END_IF;

(* search next occurence of separation character or end of list *)
WHILE pos &lt;= stop DO
	IF pt^[pos] = SEP THEN EXIT; END_IF;
	pos := pos + 1;
END_WHILE;
IF start &lt;= stop THEN
	LEL := MID(LIST, pos - start - 1, start + 1);
	start := pos;
	pos := pos + 1;
ELSE
	LEL := '';
	NUL := TRUE;
END_IF;



(* revision histroy
hm	25. jun. 2008	rev 1.0
	original release

hm	19. jan. 2011	rev 1.1
	changed string(255) to string(LIST_LENGTH)	

*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4cc84108-3ec8-460e-9759-41d8b5b1aef6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LIST_RETRIEVE" pouType="function">
        <interface>
          <returnType>
            <string length="LIST_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="SEP">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="POS">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="o">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="LIST_LENGTH" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="po">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="LIST_LENGTH" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="c">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="p">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="l">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
          <inOutVars>
            <variable name="LIST">
              <type>
                <string length="LIST_LENGTH" />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* load pointers *)
pt := ADR(LIST);
po := ADR(LIST_RETRIEVE);
l := LEN(LIST);

(* search for the n-th occurence of a separation character and store position in i *)
WHILE (cnt &lt; pos) AND (i &lt; LIST_LENGTH) AND (pt^[i] &gt; 0) DO
	IF pt^[i] = sep THEN cnt := cnt + 1; END_IF;
	i := i + 1;
END_WHILE;

p := i;	(* store position for deletion in list *)

(* copy the list element to output *)
IF i &lt; LIST_LENGTH THEN c := pt^[i]; END_IF;
WHILE (c &lt;&gt; sep) AND (c &gt; 0) AND (o &lt; LIST_LENGTH) AND (i &lt; LIST_LENGTH) DO
	po^[o] :=pt^[i];
	o := o + 1;
	i := i + 1;
	c := pt^[i];
END_WHILE;

IF cnt = pos THEN
	IF i = L THEN
		LIST := LEFT(LIST, p - 1);
	ELSE
		LIST := DELETE(LIST, i - p + 1, p + 1);
	END_IF;
END_IF;


(* terminate the output string *)
po^[o] := 0;



(* revision histroy
hm	28. jun. 2008	rev 1.0
	original release

hm	19. jan. 2011	rev 1.1
	changed string(255) to string(LIST_LENGTH)

*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b4d8bccd-a237-4dec-9a23-5ca1a770d6af</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LIST_RETRIEVE_MAX" pouType="function">
        <interface>
          <returnType>
            <string length="LIST_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="SEP">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="1" upper="LIST_LENGTH" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="l">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="last">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="lx">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="mpos">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </localVars>
          <inOutVars>
            <variable name="LIST">
              <type>
                <string length="LIST_LENGTH" />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PT := ADR(LIST);
l := LEN(list);
FOR pos := 1 TO l DO
	IF pt^[pos] = sep THEN
		IF pos - last - 1 &gt; lx THEN
			mpos := last + 1;
			lx := pos - last - 1;
		END_IF;
		last := pos;
	END_IF;
END_FOR;

(* check length of last element *)
IF l - last &gt; lx THEN
	mpos := last + 1;
	lx := l - last;
	LIST_RETRIEVE_MAX := RIGHT(list, lx);
	list := LEFT(list, last - 1);
ELSE
	LIST_RETRIEVE_MAX := MID(LIST, lx, mpos);
	LIST := DELETE(LIST, lx + 1, mpos);
END_IF;



(* revision histroy
hm	22. oct. 2008	rev 1.0
	original release

hm	19. jan. 2011	rev 1.1
	changed string(255) to string(LIST_LENGTH)

*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>9a02e9d6-dced-43c6-934b-72e34623747e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LIST_RETRIEVE_MIN" pouType="function">
        <interface>
          <returnType>
            <string length="LIST_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="SEP">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="1" upper="LIST_LENGTH" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="l">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="last">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="lx">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="mpos">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </localVars>
          <inOutVars>
            <variable name="LIST">
              <type>
                <string length="LIST_LENGTH" />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PT := ADR(LIST);
l := LEN(list);
lx := 255;
FOR pos := 1 TO l DO
	IF pt^[pos] = sep THEN
		IF pos - last - 1 &lt; lx THEN
			mpos := last + 1;
			lx := pos - last - 1;
			(* if we found an element with length 0 then we can stop *)
		END_IF;
		last := pos;
		IF lx = 0 THEN EXIT; END_IF;
	END_IF;
END_FOR;

(* check length of last element *)
IF l - last &lt; lx THEN
	mpos := last + 1;
	lx := l - last;
	LIST_RETRIEVE_MIN := RIGHT(list, lx);
	list := LEFT(list, last - 1);
ELSE
	LIST_RETRIEVE_MIN := MID(LIST, lx, mpos);
	LIST := DELETE(LIST, lx + 1, mpos);
END_IF;



(* revision histroy
hm	23. oct. 2008	rev 1.0
	original release

hm	19. jan. 2011	rev 1.1
	changed string(255) to string(LIST_LENGTH)

*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>371f716e-76c7-4e6a-af96-1e7a5c3813f1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LIST_SORT_L" pouType="function">
        <interface>
          <returnType>
            <string length="LIST_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="SEP">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="element">
              <type>
                <string length="LIST_LENGTH" />
              </type>
            </variable>
            <variable name="sepx">
              <type>
                <string length="1" />
              </type>
            </variable>
          </localVars>
          <inOutVars>
            <variable name="LIST">
              <type>
                <string length="LIST_LENGTH" />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">sepx := CHR_TO_STRING(sep);
WHILE list &lt;&gt; '' DO
	IF list = sepx THEN
		LIST_SORT_L := CONCAT(sepx, LIST_SORT_L);
		list := '';
		RETURN;
	ELSE
		element := LIST_RETRIEVE_MIN(SEP,LIST);
		LIST_SORT_L := CONCAT(LIST_SORT_L, element);
		LIST_SORT_L := CONCAT(LIST_SORT_L, sepx);
	END_IF;
END_WHILE;
(* delete the last separation character *)
LIST_SORT_L := LEFT(LIST_SORT_L, LEN(LIST_SORT_L) - 1);


(* revision histroy
hm	23. oct. 2008	rev 1.0
	original release

hm	17. dec. 2008	rev 1.1
	changes name of function chr to chr_to_string

hm	19. jan. 2011	rev 1.2
	changed string(255) to string(LIST_LENGTH)

*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>13b3577a-0e33-440a-8d03-0a670b33c6d7</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="COUNT_BR" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="UP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="STEP">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="MX">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="255" />
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="CNT">
              <type>
                <BYTE />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last_up">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="last_dn">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF rst THEN
	cnt := 0;
ELSIF set THEN
	cnt := LIMIT(0,in,mx);
ELSIF up AND NOT last_up THEN
	cnt := INT_TO_BYTE(INC(cnt,step,mx));
ELSIF dn AND NOT last_dn THEN
	cnt := INT_TO_BYTE(inc(cnt,-step,mx));
END_IF;
last_up := up;
last_dn := dn;

(* revision history
hm	16. jan 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7811d0eb-b282-4662-8f47-7d95f6c5141a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="COUNT_DR" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="UP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="STEP">
              <type>
                <DWORD />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="MX">
              <type>
                <DWORD />
              </type>
              <initialValue>
                <simpleValue value="16#FFFFFFFF" />
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="CNT">
              <type>
                <DWORD />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last_up">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="last_dn">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF rst THEN
	cnt := 0;
ELSIF set THEN
	cnt := LIMIT(0,in,mx);
ELSIF up AND NOT last_up THEN
	IF STEP &gt; MX - CNT THEN
		CNT := CNT - MX + STEP - 1;
	ELSE
		CNT := CNT + STEP;
	END_IF;
ELSIF dn AND NOT last_dn THEN
	IF STEP &gt; CNT THEN
		CNT := CNT - STEP + MX + 1;
	ELSE
		CNT := CNT - STEP;
	END_IF;
END_IF;
last_up := up;
last_dn := dn;

(* revision history
hm	12. jun 2008	rev 1.0
	original version

hm	20. jan. 2011	rev 1.1
	corrected init value of MX to 16#FFFFFFFF

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>be0a1d3f-7fd4-46fe-9f8d-d65ef74d8d63</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FF_D2E" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="D0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="CLK">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF rst THEN
	Q0 := FALSE;
	Q1 := FALSE;
ELSIF clk AND NOT edge THEN
	Q0 := D0;
	Q1 := D1;
END_IF;
edge := CLK;

(* revision history
hm	25. dec 2007	rev 1.0
	original version

hm	27. dec 2007	rev 1.1
	changed code for better performance

hm	30. oct. 200	rev 1.2
	deleted unnecessary init with 0

hm	14. mar. 2009	rev 1.3
	removed double assignments

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>124cd85c-3246-4ceb-bf9f-850bda9c4001</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FF_D4E" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="D0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="CLK">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF rst THEN
	Q0 := FALSE;
	Q1 := FALSE;
	Q2 := FALSE;
	Q3 := FALSE;
ELSIF clk AND NOT edge THEN
	Q0 := D0;
	Q1 := D1;
	Q2 := D2;
	Q3 := D3;
END_IF;
edge := CLK;

(* revision history
hm	4. aug 2006	rev 1.0
	original version

hm	27. dec 2007	rev 1.1
	changed code for better performance

hm	30. oct. 200	rev 1.2
	deleted unnecessary init with 0

hm	14. mar. 2009	rev 1.3
	removed double assignments

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4b2222e8-2c31-4cc5-88e3-52cded7725cf</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FF_DRE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="CLK">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF rst OR set THEN
	Q := NOT rst;
ELSIF clk AND NOT edge THEN
	Q := D;
END_IF;
edge := CLK;

(* revision history
hm	4. aug 2006		rev 1.0
	original version

hm	27. dec 2007	rev 1.1
	changed code for better performance

hm	30. oct. 2008	rev 1.2
	optimized performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f16dcea6-aba3-4fb3-b515-36b4cfe29c0c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FF_JKE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="J">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="CLK">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="K">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF rst OR set THEN
	Q := NOT rst;
ELSIF clk AND NOT edge THEN
	IF J XOR K THEN Q := J;
	ELSE Q := K XOR Q;
	END_IF;
END_IF;
edge := CLK;

(* revision history
hm	4. aug 2006		rev 1.0
	original version

hm	27. dec 2007	rev 1.1
	changed code for better performance

hm	30. oct. 2008	rev 1.2
	optimized performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>52f4397a-b05e-42f7-8983-390fb66035d9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FF_RSE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="CS">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="CR">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="es">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="er">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF rst THEN
	(* asynchronous reset *)
	Q := FALSE;
ELSIF CR AND NOT er THEN
	(* rising edge on CR *)
	Q := FALSE;
ELSIF CS AND NOT es THEN
	(* rising edge on CS *)
	Q := TRUE;
END_IF;

es := CS;
er := CR;

(* revision history

hm	16. jul. 2008	rev 1.0
	original version

*)



</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2dfb5b30-426b-43c4-8fa5-a1f6087b6911</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SELECT_8" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="E">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="UP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q6">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q7">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="STATE">
              <type>
                <INT />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last_up">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="last_dn">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF rst THEN
	state := 0;
ELSIF set THEN
	state := IN;
ELSIF up AND NOT last_up THEN
	state := inc(state,1,7);
ELSIF dn AND NOT last_dn THEN
	state := inc(state,-1,7);
END_IF;
last_UP := UP;
last_DN := DN;

Q0 := FALSE;
Q1 := FALSE;
Q2 := FALSE;
Q3 := FALSE;
Q4 := FALSE;
Q5 := FALSE;
Q6 := FALSE;
Q7 := FALSE;

IF E THEN
	CASE state OF
		0: Q0 := TRUE;
		1: Q1 := TRUE;
		2: Q2 := TRUE;
		3: Q3 := TRUE;
		4: Q4 := TRUE;
		5: Q5 := TRUE;
		6: Q6 := TRUE;
		7: Q7 := TRUE;
	END_CASE;
END_IF;

(* revision history
hm	16. jan 2008	rev 1.0
	original version

hm	27. feb. 2009	rev 1.1
	renamed input en to e
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d5f5eafc-b104-4914-861e-49c1022dd7fd</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SHR_4E" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="CLK">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="trig">
              <type>
                <derived name="R_TRIG" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* trig.Q signals a rising edge on clk *)
trig(clk := clk);

IF set OR rst THEN
	Q0 := NOT rst;
	Q1 := Q0;
	Q2 := Q0;
	Q3 := Q0;
ELSIF trig.Q THEN
	Q3 := Q2;
	Q2 := Q1;
	Q1 := Q0;
	Q0 := D0;
END_IF;



(* revision history
hm	4. aug. 2006	rev 1.0
	original version

hm	25. oct. 2008	rev 1.1
	optimized code

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>687c9193-6081-478a-bae3-711c80ca8939</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SHR_4UDE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="CLK">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="trig">
              <type>
                <derived name="R_TRIG" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* trig.Q signals a rising edge on clk *)
trig(clk := clk);

IF set OR rst THEN
	Q0 := NOT RST;
	Q1 := Q0;
	Q2 := Q0;
	Q3 := Q0;
ELSIF trig.Q THEN
	IF dn THEN
		Q0 := Q1;
		Q1 := Q2;
		Q2 := Q3;
		Q3 := D3;
	ELSE
		Q3 := Q2;
		Q2 := Q1;
		Q1 := Q0;
		Q0 := D0;
	END_IF;
END_IF;



(* revision history
hm	4. aug. 2006	rev 1.0
	original version

hm	25. oct. 2008	rev 1.1
	optimized code

hm	14. mar. 2009	rev 1.2
	removed double assignments

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>068aa4dc-1f25-4dff-a63a-12cc38937813</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SHR_8PLE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Din">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Dload">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="CLK">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="UP">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="load">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="DOut">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="register">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* flankenerkennung clk wird high und edge war high reset ist nicht aktiv und set ist nicht aktiv *)
IF CLK AND edge AND NOT rst THEN
	edge := FALSE;	(* flanke wurde erkannt und weitere flankenerkennung wird verhindert bis edge wieder true ist *)
	(* hier ist der code für das flankenevent *)
	IF UP THEN						(*shift up *)
		register := SHL(register,1);
		register.0 := Din;
		Dout := register.7;
	ELSE								(* shift down *);
		register := SHR(register,1);
		register.7 := Din;
		Dout := register.0;
	END_IF;
	IF load THEN							(* the byte on Din will be loaded if load = true *)
		register := Dload;
		IF up THEN Dout := register.7; ELSE Dout := register.0; END_IF;
	END_IF;
END_IF;
IF NOT clk THEN edge := TRUE; END_IF;	(* sobald clk wieder low wird warten auf nächste flanke *)
IF rst THEN									(* wenn reset aktiv dann ausgang rücksetzen *)
	register := 0;
	Dout := FALSE;
END_IF;
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4f8580a5-5a0c-4e85-a37d-fd56e52dacce</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SHR_8UDE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D7">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="CLK">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q6">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q7">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="trig">
              <type>
                <derived name="R_TRIG" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* trig.Q signals a rising edge on clk *)
trig(clk := clk);

IF set OR rst THEN
	Q0 := NOT RST;
	Q1 := Q0;
	Q2 := Q0;
	Q3 := Q0;
	Q4 := Q0;
	Q5 := Q0;
	Q6 := Q0;
	Q7 := Q0;
ELSIF trig.Q THEN
	IF dn THEN
		Q0 := Q1;
		Q1 := Q2;
		Q2 := Q3;
		Q3 := Q4;
		Q4 := Q5;
		Q5 := Q6;
		Q6 := Q7;
		Q7 := D7;
	ELSE
		Q7 := Q6;
		Q6 := Q5;
		Q5 := Q4;
		Q4 := Q3;
		Q3 := Q2;
		Q2 := Q1;
		Q1 := Q0;
		Q0 := D0;
	END_IF;
END_IF;



(* revision history
hm	4. aug. 2006	rev 1.0
	original version

hm	25. oct. 2008	rev 1.1
	optimized code

hm	14. mar. 2009	rev 1.2
	removed double assignments

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>81f7e275-fd19-46c3-9683-a42375851153</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TOGGLE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="CLK">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rst">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF rst THEN
	q := 0;
ELSIF clk AND NOT edge THEN
	Q := NOT Q;
END_IF;
edge := clk;

(* revision history

hm	13.9.2007		rev 1.0
	original version

hm	30. oct. 2008	rev 1.1
	deleted unnecessary init

*)



</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>24cbb80a-066c-4427-9784-9da5e6a58463</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LTCH" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="D">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="L">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* as long as L is true, the latch is transparent and and change of D is transferred to Q *)
(* of course only when there is no asynchronous reset *)
IF rst THEN				(* if asynchronous reset then Q=0 *)
	Q := FALSE;
ELSIF L THEN			(* latch is transparent *)
	Q := D;
END_IF;


(* revision history
hm	4. aug 2006		rev 1.0
	original version

hm	27. dec 2007	rev 1.1
	changed code for better performance

hm	30. oct. 2008	rev 1.2
	deleted unnecessary init with 0

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e155ff92-afc8-4cc3-acd5-d846803d6827</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LTCH_4" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="D0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="L">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* as long as L is true, the latch is transparent and and change of D is transferred to Q *)
(* of course only when there is no asynchronous reset *)
IF rst THEN			(* if asynchronous reset then Q=0 *)
	Q0 := FALSE;
	Q1 := FALSE;
	Q2 := FALSE;
	Q3 := FALSE;
ELSIF L THEN			(* latch is transparent *)
	Q0 := D0;
	Q1 := D1;
	Q2 := D2;
	Q3 := D3;
END_IF;

(* revision history
hm	4. aug 2006	rev 1.0
	original version

hm	27. dec 2007	rev 1.1
	changed code for better performance

hm	30. oct. 2008	rev 1.2
	deleted unnecessary init with 0

hm	14. mar. 2009	rev 1.3
	removed double assignments

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>380920c8-7d97-4409-aa66-a43eb8d880e4</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="STORE_8" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Set">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D6">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D7">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Clr">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Rst">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q6">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q7">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF rst OR set THEN
	q0 := NOT rst;
	q1 := q0;
	q2 := q0;
	q3 := q0;
	q4 := q0;
	q5 := q0;
	q6 := q0;
	q7 := q0;
ELSE
	IF D0 THEN Q0 := TRUE; END_IF;
	IF D1 THEN Q1 := TRUE; END_IF;
	IF D2 THEN Q2 := TRUE; END_IF;
	IF D3 THEN Q3 := TRUE; END_IF;
	IF D4 THEN Q4 := TRUE; END_IF;
	IF D5 THEN Q5 := TRUE; END_IF;
	IF D6 THEN Q6 := TRUE; END_IF;
	IF D7 THEN Q7 := TRUE; END_IF;

	IF clr AND NOT edge THEN
		IF q0 THEN q0 := FALSE;
		ELSIF q1 THEN q1 := FALSE;
		ELSIF q2 THEN q2 := FALSE;
		ELSIF q3 THEN q3 := FALSE;
		ELSIF q4 THEN q4 := FALSE;
		ELSIF q5 THEN q5 := FALSE;
		ELSIF q6 THEN q6 := FALSE;
		ELSE q7 := FALSE;
		END_IF;
	END_IF;
	edge := clr;
END_IF;


(* revision history
hm	25.12.2007	rev 1.0
	original version

hm	30. oct. 2008	rev 1.1
	optimized performance

hm	14. mar. 2009	rev 1.2
	removed double assignments

*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e3bb6d14-9fa2-4b80-bf3d-bce54dd4e21b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BCDC_TO_INT" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">BCDC_TO_INT := (in AND 16#0F) + (SHR(in,4) * 10);

(* revision history
hm	13.12.2007	rev 1.0
	original version

hm	30.6.2008	rev 1.1
	changed name BCD_TO_INT to BCDC_TO_INT to avoid collision with util.lib

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>cfe07cc0-6553-4345-9e4a-aee0070fbecb</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BIT_COUNT" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">WHILE in &gt; 0 DO
	IF in.0 THEN Bit_Count := Bit_Count + 1; END_IF;
	in := SHR(in,1);
END_WHILE;



(* revision history
5.7.2007	rev 1.0		original version

10.9.2007	rev 1.1		hm
	changed algorithm for better performace
	the execution time has reduced by a factor of 5
	deleted unused variable temp
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>caed469e-6278-4b93-9696-3954d246135c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BIT_LOAD_B" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="VAL">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="POS">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars constant="true">
            <variable name="dat">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF VAL THEN
	BIT_LOAD_B := in OR SHL(dat,pos);
ELSE
	BIT_LOAD_B := in AND (NOT SHL(dat,pos));
END_IF;


(* revision history
hm	29. feb 2008	rev 1.0
	original version

hm	16. mar 2008	rev 1.1
	change input bit to val for compatibility reasons
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>3170fa88-d793-4379-b0a5-51bcfdc9e34d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BIT_LOAD_B2" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="I">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="D">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="P">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF D THEN
	BIT_LOAD_B2 := ROL(SHR(BYTE#255, 8 - N) OR ROR(i, P), P);
ELSE
	BIT_LOAD_B2 := ROL(SHL(BYTE#255, N) AND ROR(I, P), P);
END_IF;



(* revision history
hm	18. oct. 2008	rev 1.0
	original version


*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>137ee14b-8866-498d-a25c-b2616dbb8392</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BIT_LOAD_DW" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="VAL">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="POS">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars constant="true">
            <variable name="dat">
              <type>
                <DWORD />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF val THEN
	BIT_LOAD_DW := in OR SHL(dat,pos);
ELSE
	BIT_LOAD_DW := in AND (NOT SHL(dat,pos));
END_IF;


(* revision history
hm	29. feb 2008	rev 1.0
	original version

hm	16. mar 2008	rev 1.1
	change input bit to val for compatibility reasons
*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b70bde73-f82d-47bb-a631-4c879cc4935f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BIT_LOAD_DW2" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="I">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="D">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="P">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF D THEN
	BIT_LOAD_DW2 := ROL(SHR(DWORD#4294967295, 32 - N) OR ROR(i, P), P);
ELSE
	BIT_LOAD_DW2 := ROL(SHL(DWORD#4294967295, N) AND ROR(I, P), P);
END_IF;



(* revision history
hm	18. oct. 2008	rev 1.0
	original version


*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c8690866-6a7a-4ff3-8d8f-0b65d010b70a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BIT_LOAD_W" pouType="function">
        <interface>
          <returnType>
            <WORD />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="VAL">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="POS">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars constant="true">
            <variable name="dat">
              <type>
                <WORD />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF val THEN
	BIT_LOAD_W := in OR SHL(dat,pos);
ELSE
	BIT_LOAD_W := in AND (NOT SHL(dat,pos));
END_IF;


(* revision history
hm	29. feb 2008	rev 1.0
	original version

hm	16. mar 2008	rev 1.1
	change input bit to val for compatibility reasons
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7370c29f-a787-44c2-b722-8bc3854a3bf8</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BIT_LOAD_W2" pouType="function">
        <interface>
          <returnType>
            <WORD />
          </returnType>
          <inputVars>
            <variable name="I">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="D">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="P">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF D THEN
	BIT_LOAD_W2 := ROL(SHR(WORD#65535, 16 - N) OR ROR(i, P), P);
ELSE
	BIT_LOAD_W2 := ROL(SHL(WORD#65535, N) AND ROR(I, P), P);
END_IF;



(* revision history
hm	18. oct. 2008	rev 1.0
	original version


*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ec1caf9b-0baf-449c-8947-17afb47e4a6e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BIT_OF_DWORD" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="in">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">BIT_OF_DWORD := (SHR(in,N) AND 16#00000001) &gt; 0;


(* old code used before rev 1.1
temp := SHR(in,n);
Bit_of_Dword := temp.0;
*)


(* revision history
hm	4. aug. 2006	rev 1.0
	original version

hm	29. feb 2008	rev 1.1
	improved performance

hm	6. jun. 2008	rev 1.2
	changes type of input N from byte to int
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8f653a07-d443-4dba-8fc3-4a2953ae5fec</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BIT_TOGGLE_B" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="POS">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">BIT_TOGGLE_B := SHL(BYTE#1, POS) XOR IN;




(* revision history
hm	18. oct. 2008	rev 1.0
	original version


*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8e351c47-90b9-4e13-bdb1-9f23bcfbdb26</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BIT_TOGGLE_DW" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="POS">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">BIT_TOGGLE_DW := SHL(DWORD#1, POS) XOR IN;



(* revision history
hm	18. oct. 2008	rev 1.0
	original version


*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8178e303-473e-4647-86d2-7dc92c39dae5</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BIT_TOGGLE_W" pouType="function">
        <interface>
          <returnType>
            <WORD />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="POS">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">BIT_TOGGLE_W := SHL(WORD#1, POS) XOR IN;



(* revision history
hm	18. oct. 2008	rev 1.0
	original version


*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>bc5619ca-32bc-4e72-86e6-0fe911308d25</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BYTE_OF_BIT" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="B0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="B1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="B2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="B3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="B4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="B5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="B6">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="B7">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">Byte_of_bit := SHL(SHL(SHL(SHL(SHL(SHL(SHL(BOOL_TO_BYTE(B7),1) OR BOOL_TO_BYTE(B6),1) OR BOOL_TO_BYTE(B5),1) OR BOOL_TO_BYTE(B4),1)
	OR BOOL_TO_BYTE(B3),1) OR BOOL_TO_BYTE(B2),1) OR BOOL_TO_BYTE(B1),1) OR BOOL_TO_BYTE(B0);


(* revision history

hm	4. aug 2006		rev 1.0
	original version

hm	18. feb. 2008	rev 1.1
	improved performance

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>add4f04b-5055-4173-a1a5-39ff98c38a8c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BYTE_OF_DWORD" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="in">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="N">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">BYTE_OF_DWORD := DWORD_TO_BYTE(SHR(in,SHL(n,3)));

(* revision history
hm	17. jan 2007	rev 1.0
	original version

hm	2. jan 2008		rev 1.1
	improved performance

hm	30. oct. 2008	rev 1.2
	improved performance
*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a7a6eb36-d2c7-4cf2-9a03-9e7df4e6a752</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BYTE_TO_BITS" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="B0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="B1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="B2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="B3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="B4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="B5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="B6">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="B7">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">B0 := IN.0;
B1 := IN.1;
B2 := IN.2;
B3 := IN.3;
B4 := IN.4;
B5 := IN.5;
B6 := IN.6;
B7 := IN.7;

(* revision history
hm		4. aug 2006	rev 1.0
	original version

hm		16. mar 2008	rev 1.1
	renamed from byte_to_bit to byte_to_bits for compatibility reasons

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>bc906f55-4949-498b-97c1-9caee5cc6321</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BYTE_TO_GRAY" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">BYTE_TO_GRAY := IN XOR SHR(IN,1);

(* revision history
hm	9. nov. 2009	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b6014c03-2de5-49fe-9731-0e004b0094c6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CHECK_PARITY" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="in">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="p">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CHECK_PARITY := NOT p;
WHILE in &gt; 0 DO
	CHECK_PARITY := CHECK_PARITY XOR in.0 XOR in.1 XOR in.2 XOR in.3;
	in := SHR(in,4);
END_WHILE;

(* code before rev 1.2
WHILE in &gt; 0 DO
	IF in.0 THEN cnt := cnt + 1; END_IF;
	in := SHR(in,1);
END_WHILE;
check_parity := even(cnt) XOR P;
*)


(* revision history

rev 1.0 HM  1.oct.2006

rev 1.1 hm	10.sep.2007
	changed algorithm to improove performance

rev 1.2	hm	8 dec 2007
	changed algorithm to improove performance

rev 1.3 hm	18. feb 2008
	changed algorithm to improove performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>594bc979-dfdb-473d-a89a-285edbd89831</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CHK_REAL" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <DWORD />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(X);				(* move real to dword, real_to_dword does not work becasze it treats dword as a number on many systems *)
tmp := ROL(pt^,1);			(* rotate left foir easy checking, sign will be at lease significant digit *)
IF tmp &lt; 16#FF000000 THEN
	CHK_REAL := 16#00;		(* normalized and denormalized numbers *)
ELSIF tmp = 16#FF000000 THEN
	CHK_REAL := 16#20;		(* X is +infinity see IEEE754 *)
ELSIF tmp = 16#FF000001 THEN
	CHK_REAL := 16#40;		(* X is -infinity see IEEE754 *)
ELSE
	CHK_REAL := 16#80;		(* X is NAN see IEEE754 *)
END_IF;


(* revision history
hm	 20. jan. 2011	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>656220cb-df8b-4b81-9c6b-8d8f4218c32b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DEC_2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="D">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="A">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">Q0 := D AND NOT A;
Q1 := D AND A;

(* revision history
hm 3.3.2007	rev 1.1
	rewritten in ST for better compatibility

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>94bbeb88-c444-43ff-9a0f-429b22d6d1df</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DEC_4" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="D">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="A0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="A1">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">Q0 := D AND NOT A0 AND NOT A1;
Q1 := D AND A0 AND NOT A1;
Q2 := D AND NOT A0 AND A1;
Q3 := D AND A0 AND A1;

(* revision history
hm 3.3.2007	rev 1.1
	rewritten in ST for better compatibility

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>db9ecfcf-e459-454c-a991-0aaf9560b230</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DEC_8" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="D">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="A0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="A1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="A2">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q6">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q7">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="X">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">X.0 := A0; X.1 := A1; X.2 := A2;

Q0 := FALSE;
Q1 := FALSE;
Q2 := FALSE;
Q3 := FALSE;
Q4 := FALSE;
Q5 := FALSE;
Q6 := FALSE;
Q7 := FALSE;

CASE X OF
	0 : Q0 := D;
	1 : Q1 := D;
	2 : Q2 := D;
	3 : Q3 := D;
	4 : Q4 := D;
	5 : Q5 := D;
	6 : Q6 := D;
	7 : Q7 := D;
END_CASE;



(* revision history
hm 3. mar. 2007	rev 1.1
	rewritten in ST for better compatibility

hm	26. oct. 2008	rev 1.2
	code optimized

hm	28. mar. 2009	rev 1.3
	replaced multiple assignments
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4e8dbfd7-b8a5-4e09-8075-23b0fc50ba73</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DW_TO_REAL" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <DWORD />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <REAL />
                  </baseType>
                </pointer>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(X);
DW_TO_REAL := pt^;

(* revision history
hm	18. apr. 2008
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4d546cc2-ad5b-490e-981e-e13b30c07b53</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DWORD_OF_BYTE" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="B3">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="B2">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="B1">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="B0">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">DWORD_OF_BYTE := SHL(SHL(SHL(BYTE_TO_DWORD(B3),8) OR BYTE_TO_DWORD(B2),8) OR BYTE_TO_DWORD(B1),8) OR BYTE_TO_DWORD(B0);


(* revision history
hm	24. jan 2007	rev 1.0
	original version

hm 2. jan 2008	rev 1.1
	inproved performance

hm	23. apr. 2008	rev 1.2
	reverse order of inputs to be more logical

hm	18. jul. 2009	rev 1.3
	added type conversions for compatibility reasons
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4b46121b-3640-49a0-a659-400ad32eb973</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DWORD_OF_WORD" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="W1">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="W0">
              <type>
                <WORD />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">DWORD_OF_WORD := SHL(WORD_TO_DWORD(W1),16) OR WORD_TO_DWORD(W0);


(* revision history

hm	18. jul. 2009	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5f71df9d-e9de-4aa6-a789-b8af8ac41121</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GRAY_TO_BYTE" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">GRAY_TO_BYTE := SHR(IN,4) XOR IN;
GRAY_TO_BYTE := SHR(GRAY_TO_BYTE,2) XOR GRAY_TO_BYTE;
GRAY_TO_BYTE := SHR(GRAY_TO_BYTE,1) XOR GRAY_TO_BYTE;

(* revision history
hm	9. nov. 2009	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>eb1f2d0b-c256-4671-934e-0df8683b4751</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="INT_TO_BCDC" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">INT_TO_BCDC := SHL(INT_TO_BYTE(IN / INT#10),4) OR INT_TO_BYTE(in MOD INT#10);

(* revision history
hm	13.12.2007
	original version

hm	30.6.2008	rev 1.1
	changed name INT_TO_BCD to INT_TO_BCDC to avoid collision with util.lib
	corrected error in code

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>89354b12-55e2-4e16-b86c-723b98179bec</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MUX_2" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="D0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="A0">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MUX_2 := SEL(A0, D0, D1);


(*
revision history:
hm	5.10.2006		rev 1.1
	changed to ST Langage for better portability.

hm	16. oct. 2008	rev 1.2
	improved performance

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a5db44f2-f509-49e6-b923-a78dce07bd59</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MUX_4" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="D0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="A0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="A1">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF A1 THEN
	MUX_4 := SEL(A0, D2, D3);
ELSE
	MUX_4 := SEL(A0, D0, D1);
END_IF;


(*
revision history:
hm 	5.10.2006		rev 1.1
	rewritten to ST for better portability

hm	16. oct. 2008	rev 1.2
	improved performance

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>eec632e8-6b65-4a36-a7e5-9e9f23555a64</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="PARITY" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="in">
              <type>
                <DWORD />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">WHILE in &gt; 0 DO
	PARITY := PARITY XOR in.0 XOR in.1 XOR in.2 XOR in.3;
	in := SHR(in,4);
END_WHILE;

(* code before rev 1.2
WHILE in &gt; 0 DO
	IF in.0 THEN cnt := cnt +1; END_IF;
	in := SHR(in,1);
END_WHILE;
IF (cnt MOD 2) = 1 THEN parity := TRUE; ELSE parity := FALSE; END_IF;
*)

(* revision history

rev 1.0 hm 1 sep 2006
	original version

rev 1.1 hm 10.9.2007
	changed algorithm to improve performance

rev 1.2	hm	8 dec 2007
	changed algorithm to improve performance

rev 1.3	hm	18 feb 2008
	changed algorithm to improve performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7298fb20-6a56-42e6-a17c-3fffe431fd6b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="REAL_TO_DW" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <DWORD />
                  </baseType>
                </pointer>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(X);
REAL_TO_DW := pt^;

(* revision history
hm	18. apr. 2008
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>063878ae-ca8b-4485-86aa-958e7ee016a8</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="REFLECT" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="D">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="L">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">REFLECT := 0;
FOR i := 1 TO L DO
	REFLECT := SHL(REFLECT, 1) OR BOOL_TO_DWORD(D.0);
	D := SHR(D, 1);
END_FOR;
REFLECT := REFLECT OR SHL(D, L);

(* revision history
hm	 16. jan 2011
	new module

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ffbcbea8-862d-46a6-97da-f31a43d19d59</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="REVERSE" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">REVERSE := SHL(in,7) OR SHR(in,7) OR (ROR(in,3) AND 2#01000100) OR (ROL(in,3) AND 2#00100010)
	OR (SHL(in,1) AND 2#00010000) OR (SHR(in,1) AND 2#00001000);


(* revision history
hm		9.oct 2007		rev 1.0
	original version

hm		18. feb 2008	rev 1.1
	improved performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a52b3dd3-b7c6-4419-af6e-b808011072a5</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SHL1" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars constant="true">
            <variable name="temp">
              <type>
                <DWORD />
              </type>
              <initialValue>
                <simpleValue value="16#FFFFFFFF" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SHL1 := SHR(temp,32-N) OR SHL(IN,N);


(* revision history
hm	14.9.2007		rev 1.0
	original version

hm	27. dec 2007	rev 1.1
	changed code for better performance

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a81b41eb-b012-48f7-8688-8452dbca9220</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SHR1" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars constant="true">
            <variable name="temp">
              <type>
                <DWORD />
              </type>
              <initialValue>
                <simpleValue value="16#FFFFFFFF" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SHR1 := SHL(temp,32-N) OR SHR(IN,N);

(* revision history
hm	14.9.2007		rev 1.0
	original version

hm	27. dec 2007	rev 1.1
	changed code for better performance

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>6374febc-1f0b-4736-90d7-9a3630840e1e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SWAP_BYTE" pouType="function">
        <interface>
          <returnType>
            <WORD />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <WORD />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SWAP_BYTE := ROL(in,8);


(* revision history
hm		4. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1d26072c-24cd-4b2a-950e-e0c3f58cd61e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SWAP_BYTE2" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">Swap_Byte2 := (ROR(in,8) AND 16#FF00FF00) OR (ROL(in,8) AND 16#00FF00FF);

(* revision history
hm		4. feb 2008	rev 1.0
	original version

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f46b3aca-cc3f-457c-90d7-9e883051934a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="WORD_OF_BYTE" pouType="function">
        <interface>
          <returnType>
            <WORD />
          </returnType>
          <inputVars>
            <variable name="B1">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="B0">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">WORD_OF_BYTE := SHL(BYTE_TO_WORD(B1),8) OR BYTE_TO_WORD(B0);

(* revision history
hm	24. jan 2007	rev 1.0
	original version

hm	2. jan 2008	rev 1.1
	improved performance

hm	19. feb 2008	rev 1.2
	replaced and with or for better compatibility

hm	23. apr. 2008	rev 1.3
	reverse order of inputs to be more logical

hm	18. jul. 2009	rev 1.4
	added type conversions for compatibility reasons

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>78f0f7e5-9be5-4b67-b552-3fe0457cf7c7</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="WORD_OF_DWORD" pouType="function">
        <interface>
          <returnType>
            <WORD />
          </returnType>
          <inputVars>
            <variable name="in">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="N">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">WORD_OF_DWORD := DWORD_TO_WORD(SHR(in,SHL(n,4)));

(* revision history
hm	17. jan 2007	rev 1.0
	original version

hm	2. jan 2008		rev 1.1
	improved performance

hm	30. oct. 2008	rev 1.2
	improved performance
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f19ea3f3-12bd-4df1-b580-9c2a669b0cc5</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="A_TRIG" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="RES">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="D">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last_in">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">D := IN - LAST_IN;
Q := ABS(D) &gt; res;
IF Q THEN last_in := IN; END_IF;
D := IN - LAST_IN;


(* revision history

hm 	16. jul. 2008	rev 1.0
	original version released

hm	25. oct. 2008	rev 1.1
	code optimization
	a_trig now also works for res = 0

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5ee8529f-9dca-4668-86fe-b099d10ce193</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="B_TRIG" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="CLK">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">Q := clk XOR edge;
edge := CLK;


(* revision history
hm		4. aug. 2006	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c2fdab2a-57ca-4223-a7ae-86b56eedee2c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CLICK_CNT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="TC">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <derived name="TP" />
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="-1" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* Q shall only be active for one cycle only *)
Q := FALSE;

IF in AND NOT edge AND NOT tx.q THEN
	(* a rising edge on in sets the counter to 0 *)
	cnt := 0;
ELSIF tx.Q AND NOT IN AND edge THEN
	(* count falling edges when tp.q is true *)
	cnt := cnt + 1;
ELSIF NOT tx.Q THEN
	Q := cnt = N;
	cnt := -1;
END_IF;

(* remember the status of IN *)
edge := IN;
tx(in := IN, pt := TC);


(* revision history

hm 	16. jul. 2008	rev 1.0
	original version released


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4bad6b9a-1897-4119-91a6-d55cf9ec7356</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CLICK_DEC" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TC">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <derived name="TP" />
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="-1" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* Q shall only be active for one cycle only *)
IF in = FALSE THEN
	Q0 := FALSE;
	Q1 := FALSE;
	Q2:= FALSE;
	Q3 := FALSE;
END_IF;

IF in AND NOT edge AND NOT tx.q THEN
	(* a rising edge on in sets the counter to 0 *)
	cnt := 0;
ELSIF tx.Q AND NOT IN AND edge THEN
	(* count falling edges when tp.q is true *)
	cnt := cnt + 1;
ELSIF NOT tx.Q THEN
	CASE cnt OF
		0 : Q0 := TRUE;
		1 : Q1 := TRUE;
		2 : Q2 := TRUE;
		3 : Q3 := TRUE;
	END_CASE;
	cnt := -1;
END_IF;

(* remember the status of IN *)
edge := IN;
tx(in := IN, pt := TC);



(* revision history

hm 17. jul. 2008	rev 1.0
	original version released

hm	14. mar. 2009	rev 1.1
	removed double assignments

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>93d576cc-b401-4e8d-b091-14901ef54946</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CLK_DIV" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="clk">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rst">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q6">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q7">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="cnt">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF rst THEN
	cnt:= 0;
	Q0 := 0;
	Q1 := 0;
	Q2 := 0;
	Q3 := 0;
	Q4 := 0;
	Q5 := 0;
	Q6 := 0;
	Q7 := 0;
ELSIF clk THEN
	cnt:= cnt +1;
	Q0 := cnt.0;
	Q1 := cnt.1;
	Q2 := cnt.2;
	Q3 := cnt.3;
	Q4 := cnt.4;
	Q5 := cnt.5;
	Q6 := cnt.6;
	Q7 := cnt.7;
END_IF;

(* revision history
hm	4. aug. 2006	rev 1.0
	original version

hm	2. jan 2008		rev 1.1
	improved performance

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a0bd8950-f406-45c0-8e38-fc74b664d233</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CLK_N" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="stime">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="clk">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">stime := SHR(T_PLC_MS(),N);
clk := stime.0;
Q := clk XOR edge;
edge := CLK;

(* revision history
hm	16. dec 2007		rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>bd4308b5-4519-4fda-8066-12c7805dab79</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CLK_PRG" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PT">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#10ms" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := DWORD_TO_TIME(T_PLC_MS());

(* initialize on startup *)
IF NOT init THEN
	init := TRUE;
	last := tx - pt;
END_IF;

(* generate output pulse when next_pulse is reached *)
Q := tx - last &gt;= pt;
IF Q THEN last := tx; END_IF;


(* revision hiostory

hm 25 feb 2007	rev 1.1
	rewritten code for higher performance
	pt can now be changed during runtime

hm	17. sep 2007	rev 1.2
	replaced time() with t_plc_ms() for compatibility reasons

hm	25. oct. 2008	rev 1.3
	optimized code

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>59d89b5b-4fe4-433d-82a8-e0bcbd578f55</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CLK_PULSE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="CNT">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="RUN">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="tn">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tx := T_PLC_MS();		(* read system *)
Q := FALSE;				(* reset Q we generate pulses only for one cycle *)
RUN := CNT &lt; N;

IF NOT init OR RST THEN
	init := TRUE;
	CNT := 0;
	tn := tx - TIME_TO_DWORD(PT);
	RUN := FALSE;
ELSIF (cnt &lt; N OR N = 0) AND tx - tn &gt;= TIME_TO_DWORD(PT) THEN		(* generate a pulse *)
	CNT := CNT + 1;
	Q := TRUE;
	tn := tn + TIME_TO_DWORD(PT);
END_IF;



(* revision history
hm		4. aug 2006		rev 1.0
	original version

hm		17. sep 2007	rev 1.1
	replaced time() with T_PLC_S() for compatblity reasons

hm		16. feb. 2011	rev 1.2
	fixed an error when timer overflows 
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d4868424-390c-4e6b-8b11-76a36ea449f5</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CYCLE_4" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="E">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="T0">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="T1">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="T2">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="T3">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="S0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SX">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="SL">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="STATE">
              <type>
                <INT />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system timer *)
tx := DWORD_TO_TIME(T_PLC_MS());
(* init on first cycle *)
IF NOT init THEN
	init := TRUE;
	last := tx;
END_IF;

IF E THEN
	IF SL THEN
		(* when sx &gt; 0 then the state sx is forced to start *)
		state:= LIMIT(0,SX,3);
		last := tx;
		(* this is to avoid to reset sx from the calling programm it does work fine on codesys but i am not sure about other systems, because we are writing to an input *)
		SL := FALSE;
	ELSE
		CASE state OF
			0 :	(* wait for T0 and switch to next cycle *)
				IF tx - last &gt;= T0 THEN
					state := 1;
					last := tx;
				END_IF;
			1 : (* wait for T1 over 1st cycle *)
				IF tx - last &gt;= T1 THEN
					state := 2;
					last := tx;
				END_IF;
			2 : (* wait for T1 over 1st cycle *)
				IF tx - last &gt;= T2 THEN
					state := 3;
					last := tx;
				END_IF;
			3 : (* wait for T2 over 2nd cycle *)
				IF tx - last &gt;= T3 THEN
					IF S0 THEN State := 0; END_IF; (* if S0 is false, the sequence stops at state 3 *)
					last := tx;
				END_IF;
		END_CASE;
	END_IF;
ELSE
	state := 0;
	last := tx;
END_IF;



(*
hm	3. nov. 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c3966816-50ce-40a6-8f99-c35feadafd7f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="D_TRIG" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in">
              <type>
                <DWORD />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="X">
              <type>
                <DWORD />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last_in">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">Q := in &lt;&gt; last_in;
X := in - last_in;
last_in := in;


(* revision history

hm 	4.09.2007		rev 1.0
	original version released

hm	19. feb. 2008	rev 1.1
	performance improvement
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d13f3da8-706c-4b7d-9e15-08ba1393880a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GEN_BIT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in0">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="in1">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="in2">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="in3">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="clk">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="steps">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="rep">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="rst">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="run">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="r0">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="r1">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="r2">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="r3">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="rx">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* check if number of runs is finished or rep = 0 which means continuous *)

IF clk AND NOT rst THEN
	run := (rep = 0) OR (rx &lt;= rep);
	IF run THEN
		(* check for step counter reached and reset to 0 if cnt = steps *)
		IF cnt = steps THEN
			cnt := 0;
		END_IF;

		(* when cnt = 0 then reload the inputs into the registers *)
		IF cnt = 0 THEN
			r0 := in0;
			r1 := in1;
			r2 := in2;
			r3 := in3;
		END_IF;

		(* when cnt &lt; steps, shift the lowest bits to the outputs *)
		IF (cnt &lt; steps) THEN
			Q0 := r0.0;
			Q1 := r1.0;
			Q2 := r2.0;
			Q3 := r3.0;
			r0 := SHR(r0,1);
			r1 := SHR(r1,1);
			r2 := SHR(r2,1);
			r3 := SHR(r3,1);
		END_IF;

		(* increment the step counter *)
		cnt := cnt +1;
		IF (cnt = steps) AND (rep &lt;&gt; 0) THEN rx := rx +1; END_IF;
		IF (rx &gt; rep) AND (rep &lt;&gt; 0) THEN run := FALSE; END_IF;
	END_IF;
ELSE
	IF rst THEN
		run := FALSE;
		Q0 := FALSE;
		Q1 := FALSE;
		Q2 := FALSE;
		Q3 := FALSE;
		r0 := 0;
		r1 := 0;
		r2 := 0;
		r3 := 0;
		cnt := 0;
		rx := 1;
	END_IF;
END_IF;



(* revision histroy
hm	4 aug 2006	rev 1.0
	original version

hm 15. oct. 2008	rev 1.1
	improved performance

hm	14. mar. 2009	rev 1.2
	removed double assignments

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d2c48fd8-4e4d-41b7-bdf6-142e22dad2d6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GEN_SQ" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tn">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := T_PLC_MS();

IF NOT init THEN
	init := TRUE;
	tn := tx;
	Q := TRUE;
ELSIF tx - tn &gt;= SHR(TIME_TO_DWORD(PT),1) THEN
	Q := NOT Q;
	tn := tn + SHR(TIME_TO_DWORD(pt),1);
END_IF;


(* revision history
hm	4. aug 2006	rev 1.0
	original version

hm	17. sep 2007	rev 1.1
	replaced time() with T_PLC_MS() for compatibility reasons

hm	18. jul. 2009	rev 1.2
	improved accuracy

hm	16. feb 2011	rev 1.3
	corrected an error with timer overflow 
*)



</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a466fda1-7094-484c-99fd-c372a15a5038</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SCHEDULER" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="E0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="E1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="E2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="E3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="T0">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="T1">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="T2">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="T3">
              <type>
                <TIME />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="s0">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="s1">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="s2">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="s3">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="c">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system_time *)
tx := DWORD_TO_TIME(T_PLC_MS());

IF NOT init THEN
	init := TRUE;
	s0 := tx - T0;
	s1 := tx - T1;
	s2 := tx - T2;
	s3 := tx - T3;
END_IF;

Q0 := FALSE;
Q1 := FALSE;
Q2 := FALSE;
Q3 :=FALSE;

CASE c OF
	0: 	IF tx - s0 &gt;= T0 THEN
			Q0 := E0;
			s0 := tx;
		END_IF;
		c := 1;
	1: 	IF tx - s1 &gt;= T1 THEN
			Q1 := E1;
			s1 := tx;
		END_IF;
		c := 2;
	2: 	IF tx - s2 &gt;= T2 THEN
			Q2 := E2;
			s2 := tx;
		END_IF;
		c := 3;
	3: 	IF tx - s3 &gt;= T3 THEN
			Q3 := E3;
			s3 := tx;
		END_IF;
		c := 0;
END_CASE;


(* revision history

hm 28. sep. 2008	rev 1.0
	original version

hm	14. mar. 2009	rev 1.1
	removed double assignments

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f2489a90-a13d-41e8-835a-8c59fdaf2700</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SCHEDULER_2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="E0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="E1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="E2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="E3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="C0">
              <type>
                <UINT />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="C1">
              <type>
                <UINT />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="C2">
              <type>
                <UINT />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="C3">
              <type>
                <UINT />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="O0">
              <type>
                <UINT />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="O1">
              <type>
                <UINT />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="O2">
              <type>
                <UINT />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="O3">
              <type>
                <UINT />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="sx">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">Q0 := E0 AND (sx MOD C0 - O0 = 0);
Q1 := E1 AND (sx MOD C1 - O1 = 0);
Q2 := E2 AND (sx MOD C2 - O2 = 0);
Q3 := E3 AND (sx MOD C3 - O3 = 0);

(* increment cycle counter every cycle *)
sx := sx + 1;


(* revision history
hm 29. sep. 2008		rev 1.0
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7cd1a237-ce97-4fb7-a94d-3e8972342ea3</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SEQUENCE_4" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in0">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="in1">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="in2">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="in3">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="start">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rst">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wait0">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="delay0">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="wait1">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="delay1">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="wait2">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="delay2">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="wait3">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="delay3">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="stop_on_error">
              <type>
                <BOOL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="QX">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="run">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="step">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="-1" />
              </initialValue>
            </variable>
            <variable name="status">
              <type>
                <BYTE />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read sps timer *)
tx := DWORD_TO_TIME(T_PLC_MS());

(* initialize on startup *)
IF NOT init THEN
	last := tx;
	init := TRUE;
	status := 110;
END_IF;

(* asynchronous reset *)
IF rst THEN
	step := -1;
	Q0 := 0;
	Q1 := 0;
	Q2 := 0;
	Q3 := 0;
	status := 110;
	run := 0;

(* edge on start input restarts the sequencer *)
ELSIF start AND NOT edge THEN
	step := 0;
	last := tx;
	status := 111;
	Q0 := 0;
	Q1 := 0;
	Q2 := 0;
	Q3 := 0;
	run := 1;
END_IF;
edge := start;

(* check if stop on status is necessary *)
IF status &gt; 0 AND status &lt; 100 AND stop_on_error THEN RETURN; END_IF;

(* sequence is running *)
IF run AND step = 0 THEN
	IF NOT q0 AND in0 AND tx - last &lt;= wait0 THEN
		Q0 := TRUE;
		last := tx;
	ELSIF NOT q0 AND tx - last &gt; wait0 THEN
		status := 1;
		run := FALSE;
	ELSIF q0 AND tx - last &gt;= delay0 THEN
		step := 1;
		last := tx;
	END_IF;
END_IF;
IF run AND step = 1 THEN
	IF NOT q1 AND in1 AND tx - last &lt;= wait1 THEN
		Q0 := FALSE;
		Q1 := TRUE;
		last := tx;
	ELSIF NOT q1 AND Tx - last &gt; wait1 THEN
		status := 2;
		q0 := FALSE;
		run := FALSE;
	ELSIF q1 AND tx - last &gt;= delay1 THEN
		step := 2;
		last := tx;
	END_IF;
END_IF;
IF run AND step = 2 THEN
	IF NOT q2 AND in2 AND tx - last &lt;= wait2 THEN
		Q1 := FALSE;
		Q2 := TRUE;
		last := tx;
	ELSIF NOT q2 AND Tx - last &gt; wait2 THEN
		status := 3;
		q1 := FALSE;
		run := FALSE;
	ELSIF q2 AND tx - last &gt;= delay2 THEN
		step := 3;
		last := tx;
	END_IF;
END_IF;
IF run AND step = 3 THEN
	IF NOT q3 AND in3 AND tx - last &lt;= wait3 THEN
		Q2 := FALSE;
		Q3 := TRUE;
		last := tx;
	ELSIF NOT q3 AND Tx - last &gt; wait3 THEN
		status := 4;
		q2 := FALSE;
		run := FALSE;
	ELSIF q3 AND tx - last &gt;= delay3 THEN
		step := -1;
		q3 := FALSE;
		run := FALSE;
		status := 110;
	END_IF;
END_IF;
QX := q0 OR q1 OR q2 OR q3;

(*
hm 1.10.06		rev 1.1
	corrected delay logic to be after event and not before
	added any output

hm 1.12.06		rev 1.2
	corrected failure in sequence logic.
	added init at startup to prevent from initial error after start.

hm 17.1.2007		rev 1.3
	changed output fault to status for better compatibility with other modules (ESR).
	added stop on error functionality and setup variable
	default for inputs in0..3 is true.
	renamed variable state to step

hm	17.sep 2007	rev 1.4
	replaced time() with T_PLC_MS() for compatibility reasons

hm	13. mar. 2009	rev 1.5
	renamed output any to qx for compatibility resons

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>36a16cad-b80c-4e0d-8cf4-b84e56ec2afc</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SEQUENCE_64" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="START">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SMAX">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="PROG">
              <type>
                <array>
                  <dimension lower="0" upper="63" />
                  <baseType>
                    <TIME />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="STATE">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="-1" />
              </initialValue>
            </variable>
            <variable name="TRIG">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system timer *)
tx := DWORD_TO_TIME(T_PLC_MS());
TRIG := FALSE;

IF RST THEN
	STATE := -1;

(* start sequence *)
ELSIF START AND NOT edge THEN
	STATE := 0;
	last := tx;
	TRIG := TRUE;

(* sequence generator *)
ELSIF (STATE &gt;= 0) THEN
	IF (tx - last) &gt;= PROG[STATE] THEN
		STATE := INC2(STATE, 1, -1, SMAX);
		last := tx;
		TRIG := TRUE;
	END_IF;
END_IF;

edge := START;



(* revision history
hm	29. jun. 2008
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4b686313-4164-473c-a8a7-f2b7d97862cb</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SEQUENCE_8" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in0">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="in1">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="in2">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="in3">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="in4">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="in5">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="in6">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="in7">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="start">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rst">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wait0">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="delay0">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="wait1">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="delay1">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="wait2">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="delay2">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="wait3">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="delay3">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="wait4">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="delay4">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="wait5">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="delay5">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="wait6">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="delay6">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="wait7">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="delay7">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="stop_on_error">
              <type>
                <BOOL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q6">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q7">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="QX">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="run">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="step">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="-1" />
              </initialValue>
            </variable>
            <variable name="status">
              <type>
                <BYTE />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read sps timer *)
tx := DWORD_TO_TIME(T_PLC_MS());

(* initialize on startup *)
IF NOT init THEN
	last := tx;
	init := TRUE;
	status := 110;
END_IF;

(* asynchronous reset *)
IF rst THEN
	step := -1;
	Q0 := 0;
	Q1 := 0;
	Q2 := 0;
	Q3 := 0;
	Q4 := 0;
	Q5 := 0;
	Q6 := 0;
	Q7 := 0;
	status := 110;
	run := 0;

(* edge on start input restarts the sequencer *)
ELSIF start AND NOT edge THEN
	step := 0;
	last := tx;
	status := 111;
	Q0 := 0;
	Q1 := 0;
	Q2 := 0;
	Q3 := 0;
	Q4 := 0;
	Q5 := 0;
	Q6 := 0;
	Q7 := 0;
	run := 1;
END_IF;
edge := start;

(* check if stop on error is necessary *)
IF status &gt; 0 AND status &lt; 100 AND stop_on_error THEN RETURN; END_IF;

(* sequence is running *)
IF run AND step = 0 THEN
	IF NOT q0 AND in0 AND tx - last &lt;= wait0 THEN
		Q0 := TRUE;
		last := tx;
	ELSIF NOT q0 AND tx - last &gt; wait0 THEN
		status := 1;
		run := FALSE;
	ELSIF q0 AND tx - last &gt;= delay0 THEN
		step := 1;
		last := tx;
	END_IF;
END_IF;
IF run AND step = 1 THEN
	IF NOT q1 AND in1 AND tx - last &lt;= wait1 THEN
		Q0 := FALSE;
		Q1 := TRUE;
		last := tx;
	ELSIF NOT q1 AND Tx - last &gt; wait1 THEN
		status := 2;
		q0 := FALSE;
		run := FALSE;
	ELSIF q1 AND tx - last &gt;= delay1 THEN
		step := 2;
		last := tx;
	END_IF;
END_IF;
IF run AND step = 2 THEN
	IF NOT q2 AND in2 AND tx - last &lt;= wait2 THEN
		Q1 := FALSE;
		Q2 := TRUE;
		last := tx;
	ELSIF NOT q2 AND Tx - last &gt; wait2 THEN
		status := 3;
		q1 := FALSE;
		run := FALSE;
	ELSIF q2 AND tx - last &gt;= delay2 THEN
		step := 3;
		last := tx;
	END_IF;
END_IF;
IF run AND step = 3 THEN
	IF NOT q3 AND in3 AND tx - last &lt;= wait3 THEN
		Q2 := FALSE;
		Q3 := TRUE;
		last := tx;
	ELSIF NOT q3 AND Tx - last &gt; wait3 THEN
		status := 4;
		q2 := FALSE;
		run := FALSE;
	ELSIF q3 AND tx - last &gt;= delay3 THEN
		step := 4;
		last := tx;
	END_IF;
END_IF;
IF run AND step = 4 THEN
	IF NOT q4 AND in4 AND tx - last &lt;= wait4 THEN
		Q3 := FALSE;
		Q4 := TRUE;
		last := tx;
	ELSIF NOT q4 AND Tx - last &gt; wait4 THEN
		status := 5;
		q3 := FALSE;
		run := FALSE;
	ELSIF q4 AND tx - last &gt;= delay4 THEN
		step := 5;
		last := tx;
	END_IF;
END_IF;
IF run AND step = 5 THEN
	IF NOT q5 AND in5 AND tx - last &lt;= wait5 THEN
		Q4 := FALSE;
		Q5 := TRUE;
		last := tx;
	ELSIF NOT q5 AND Tx - last &gt; wait5 THEN
		status := 6;
		q4 := FALSE;
		run := FALSE;
	ELSIF q5 AND tx - last &gt;= delay5 THEN
		step := 6;
		last := tx;
	END_IF;
END_IF;
IF run AND step = 6 THEN
	IF NOT q6 AND in6 AND tx - last &lt;= wait6 THEN
		Q5 := FALSE;
		Q6 := TRUE;
		last := tx;
	ELSIF NOT q6 AND Tx - last &gt; wait6 THEN
		status := 7;
		q5 := FALSE;
		run := FALSE;
	ELSIF q6 AND tx - last &gt;= delay6 THEN
		step := 7;
		last := tx;
	END_IF;
END_IF;
IF run AND step = 7 THEN
	IF NOT q7 AND in7 AND tx - last &lt;= wait7 THEN
		Q6 := FALSE;
		Q7 := TRUE;
		last := tx;
	ELSIF NOT q7 AND Tx - last &gt; wait7 THEN
		status := 8;
		q6 := FALSE;
		run := FALSE;
	ELSIF q7 AND tx - last &gt;= delay7 THEN
		step := -1;
		Q7 := FALSE;
		Run := FALSE;
		status := 110;
	END_IF;
END_IF;
QX := q0 OR q1 OR q2 OR q3 OR q4 OR q5 OR q6 OR q7;

(*
hm 1.10.06		rev 1.1
	corrected delay logic to be after event and not before
	added any output

hm 1.12.06		rev 1.2
	corrected failure in sequence logic.
	added init at startup to prevent from initial statuss after start.

hm 17.1.2007		rev 1.3
	changed output fault to status for better compatibility with other modules (ESR)
	added stop on error functionality and setup variable
	default for inputs in0..7 is true.
	renames variable state to step

hm	17.sep 2007	rev 1.4
	replaced time() with T_PLC_MS() for compatibility reasons

hm	13. mar. 2009	rev 1.5
	renamed output any to qx for compatibility resons

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>23517de6-9991-4231-9f75-991654a200af</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TMAX" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Z">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="last_in">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system timer *)
tx := DWORD_TO_TIME(T_PLC_MS());

Z := FALSE;

IF NOT in THEN
	Q := FALSE;
ELSIF IN AND NOT last_in THEN
	Q := TRUE;
	start := tx;
ELSIF (tx - start &gt;= PT) AND Q THEN
	Q := FALSE;
	Z := TRUE;
END_IF;

last_in := IN;



(* revision history
hm	20. jul. 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>54a7ca13-229a-4bbe-bd1e-6dfb25903cd9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TMIN" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="pm">
              <type>
                <derived name="TP" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pm(in := IN, PT := PT);
Q := IN OR pm.Q;


(* revision history
hm	21. jul. 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c70e0e6d-6e6d-4680-bd84-c57c68770a74</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TOF_1" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system timer *)
tx := DWORD_TO_TIME(T_PLC_MS());

IF RST THEN
	Q := FALSE;
ELSIF IN THEN
	Q := TRUE;
	start := tx;
ELSIF tx - start &gt;= PT THEN
	Q := FALSE;
END_IF;




(* revision history
hm	17. jul. 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c3a64b61-d42c-4972-a66d-6153460ab486</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TONOF" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="T_ON">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="T_OFF">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="X">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="old">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="mode">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF IN XOR old THEN
  X(IN := FALSE, PT := SEL(IN,T_OFF,T_ON));
  mode := IN;
  old := IN;
END_IF;
X(IN := TRUE);
IF X.Q THEN Q := mode;END_IF;

(* revision history
hm	10. dec 2007	rev 1.0
	original version

hm	17. sep. 2007	rev 1.1
	improved performance

hm	21. jul. 2009	rev 1.2
	fixed a timing probelm


*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>bf09bac8-f63d-4ef7-b394-16bf877720ac</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TP_1" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="ix">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system timer *)
tx := DWORD_TO_TIME(T_PLC_MS());

IF RST THEN
	Q := FALSE;
ELSIF IN AND NOT ix THEN
	Q := TRUE;
	start := tx;
ELSIF tx - start &gt;= PT THEN
	Q := FALSE;
END_IF;

ix:= IN;



(* revision history
hm	28. jun. 2008
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>aa44bd28-5ab8-427d-8f13-a3345a65c7ca</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TP_1D" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PT1">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="PTD">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="W">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="ix">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system timer *)
tx := DWORD_TO_TIME(T_PLC_MS());

IF RST THEN
	Q := FALSE;
	rst := FALSE;
	W := FALSE;
ELSIF W THEN
	IF tx - start &gt;= PTD THEN
		W := FALSE;
	END_IF;
ELSIF IN AND NOT ix THEN
	Q := TRUE;
	start := tx;
	in := FALSE;
ELSIF tx - start &gt;= PT1 THEN
	Q := FALSE;
	W := TRUE;
	start := tx;
END_IF;

ix := IN;



(* revision history
hm	28. jun. 2008
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d6a42c0a-23d8-47cd-a510-43a8da2d3a72</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TP_X" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ET">
              <type>
                <TIME />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system_time *)
tx := DWORD_TO_TIME(T_PLC_MS());

(* rising edge trigger *)
IF IN AND NOT edge THEN
	start := tx;
	Q := PT &gt; t#0ms;
ELSIF Q THEN
	ET := tx - start;
	IF ET &gt;= PT THEN
		Q := FALSE;
		ET := t#0ms;
	END_IF;
END_IF;
edge := IN;

(* revision history
hm	4. aug 2006		rev 1.0
	original version

hm	17. sep 2007	rev 1.1
	replaced time() with T_PLC_MS() for compatibility reasons

hm	19. oct. 2008	rev 1.2
	renamed to TP_R to TP_X for compatibility reasons

hm	17. dec. 2008	rev 1.3
	code optimized

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5d0bad27-a609-4137-a975-c850813f1169</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FIFO_16" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Din">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="RD">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="WD">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Dout">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="EMPTY">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="FULL">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="fifo">
              <type>
                <array>
                  <dimension lower="0" upper="n" />
                  <baseType>
                    <DWORD />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="pr">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pw">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
          <localVars constant="true">
            <variable name="n">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="16" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> changing this value will chage the number of stored elements in the fifo </xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF RST THEN
	pw := pr;
	FULL := FALSE;
	EMPTY := TRUE;
	Dout := 0;
ELSIF E THEN
	IF NOT EMPTY AND RD THEN
		Dout := fifo[pr];
		pr := INC1(pr,n);
		EMPTY := pr = pw;
		FULL := FALSE;
	END_IF;
	IF NOT FULL AND WD THEN
		fifo[pw] := Din;
		pw := INC1(pw,n);
		FULL := pw = pr;
		EMPTY := FALSE;
	END_IF;
END_IF;


(* revision history

hm	4. aug. 2006	rev 1.0
	original version

hm	19. feb 2008	rev 1.1
	performance improvements

hm	17. oct. 2008	rev 1.2
	improved performance

ks	27. oct. 2008	rev 1.3
	optimized coding

hm	14. mar. 2009	rev 1.4
	removed double assignments

hm 24. jul. 2009	rev 2.0
	chaged inputs E and WR to E, WD and WR
	allow read and write in one cycle

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>72ef28ae-d891-45e6-9848-73d80e703472</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FIFO_32" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Din">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="RD">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="WD">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Dout">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="EMPTY">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="FULL">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="fifo">
              <type>
                <array>
                  <dimension lower="0" upper="n" />
                  <baseType>
                    <DWORD />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="pr">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pw">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
          <localVars constant="true">
            <variable name="n">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="32" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> changing this value will chage the number of stored elements in the fifo </xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF RST THEN
	pw := pr;
	FULL := FALSE;
	EMPTY := TRUE;
	Dout := 0;
ELSIF E THEN
	IF NOT EMPTY AND RD THEN
		Dout := fifo[pr];
		pr := INC1(pr,n);
		EMPTY := pr = pw;
		FULL := FALSE;
	END_IF;
	IF NOT FULL AND WD THEN
		fifo[pw] := Din;
		pw := INC1(pw,n);
		FULL := pw = pr;
		EMPTY := FALSE;
	END_IF;
END_IF;

(* revision history
hm	4. aug. 2006	rev 1.0
	original version

hm	19. feb 2008	rev 1.1
	performance improvements

hm	17. oct. 2008	rev 1.2
	improved performance

ks	27. oct. 2008 rev 1.3
	improved code

hm	14. mar. 2009	rev 1.4
	removed double assignments

hm 24. jul. 2009	rev 2.0
	chaged inputs E and WR to E, WD and WR
	allow read and write in one cycle

*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ca5ef9ce-0210-49c9-9c24-b51e9d949d0d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="STACK_16" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Din">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="RD">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="WD">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Dout">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="EMPTY">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="FULL">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="stack">
              <type>
                <array>
                  <dimension lower="0" upper="n" />
                  <baseType>
                    <DWORD />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="pt">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
          <localVars constant="true">
            <variable name="n">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="15" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> changing this value will chage the number of stored elements in the fifo </xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF RST THEN
	(* asynchronous reset for the fifo *)
	pt := 0;
	EMPTY := TRUE;
	FULL := FALSE;
	Dout := 0;
ELSIF E THEN
	IF NOT EMPTY AND RD THEN
		(* read one element *)
		pt := pt - 1;
		Dout := stack[pt];
		EMPTY := pt = 0;
		FULL := FALSE;
	END_IF;
	IF NOT FULL AND WD THEN
		(* write one element *)
		stack[pt] := Din;
		pt := pt + 1;
		FULL := pt &gt; n;
		EMPTY := FALSE;
	END_IF;
END_IF;


(* revision history
hm	4. aug. 2006	rev 1.0
	original version

hm	19. feb 2008	rev 1.1
	performance improvements

hm	17. oct. 2008	rev 1.2
	deleted unnecessary init with 0

hm	27. oct. 2008	rev 1.3
	optimized performance

hm	25. jul 2009	rev 2.0
	changed inputs to allow simultsaneous read and write
*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>893fe7d9-707b-4351-a79b-4170a50a7fc2</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="STACK_32" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Din">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="RD">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="WD">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Dout">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="EMPTY">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="FULL">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="stack">
              <type>
                <array>
                  <dimension lower="0" upper="n" />
                  <baseType>
                    <DWORD />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="pt">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
          <localVars constant="true">
            <variable name="n">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="31" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> changing this value will chage the number of stored elements in the fifo </xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF RST THEN
	(* asynchronous reset for the fifo *)
	pt := 0;
	EMPTY := TRUE;
	FULL := FALSE;
	Dout := 0;
ELSIF E THEN
	IF NOT EMPTY AND RD THEN
		(* read one element *)
		pt := pt - 1;
		Dout := stack[pt];
		EMPTY := pt = 0;
		FULL := FALSE;
	END_IF;
	IF NOT FULL AND WD THEN
		(* write one element *)
		stack[pt] := Din;
		pt := pt + 1;
		FULL := pt &gt; n;
		EMPTY := FALSE;
	END_IF;
END_IF;


(* revision history
hm	4. aug. 2006	rev 1.0
	original version

hm	19. feb 2008	rev 1.1
	performance improvements

hm	17. oct. 2008	rev 1.2
	deleted unnecessary init with 0

ks	27. oct. 2008	rev 1.3
	optimized performance

hm	25. jul 2009	rev 2.0
	changed inputs to allow simultsaneous read and write

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>3da2af65-2831-4db8-aa11-0e654b8d32b7</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CRC_GEN" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="PT">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="SIZE">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="PL">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="PN">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="INIT">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="REV_IN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="REV_OUT">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="XOR_OUT">
              <type>
                <DWORD />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="shift">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="dx">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="bits">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* align polygon *)
shift := 32 - PL;
PN := SHL(PN, shift);

(* load first 4 bytes into register minimum message size is 4 bytes
	for smaller messages fill with 0#s at the beginning*)
FOR pos := 0 TO 3 DO
	IF REV_IN THEN CRC_GEN := SHL(CRC_GEN, 8) OR REVERSE(PT^[pos]); ELSE CRC_GEN := SHL(CRC_GEN, 8) OR PT^[pos]; END_IF;
END_FOR;
pos := 4;

(* xor with init value *)
CRC_GEN := CRC_GEN XOR SHL(init, shift);

(* calculate CRC for each byte *)
WHILE pos &lt; size DO
	IF REV_IN THEN DX := REVERSE(PT^[pos]); ELSE DX := PT^[pos]; END_IF;
	pos := pos + 1;
	(* crc calculation for one byte *)
	FOR bits := 0 TO 7 DO
		IF CRC_GEN.31 THEN
			CRC_GEN := (SHL(CRC_GEN, 1) OR BOOL_TO_DWORD(DX.7)) XOR PN;
		ELSE
			CRC_GEN := SHL(CRC_GEN, 1) OR BOOL_TO_DWORD(DX.7);
		END_IF;
		dx := SHL(dx, 1);
	END_FOR;
END_WHILE;

(* all bytes are processed, need to finish the registers 32 bits *)
FOR bits := 0 TO 31 DO
	IF CRC_GEN.31 THEN
		CRC_GEN := (SHL(CRC_GEN, 1) OR BOOL_TO_DWORD(DX.7)) XOR PN;
	ELSE
		CRC_GEN := SHL(CRC_GEN, 1) OR BOOL_TO_DWORD(DX.7);
	END_IF;
END_FOR;

(* final XOR *)
CRC_GEN := SHR(CRC_GEN, shift) XOR XOR_OUT;

(* reverse the crc_out put if necessary *)
IF REV_OUT THEN CRC_GEN := REFLECT(CRC_GEN, PL); END_IF;


(* typical crc polynoms

CRC-4-ITU 			x4 + x + 1 					(ITU G.704, p. 12) 	0x3 or 0xC (0x9)
CRC-5-ITU 			x5 + x4 + x2 + 1 			(ITU G.704, p. 9) 	0x15 or 0x15 (0x0B) Bluetooth
CRC-5-USB 			x5 + x2 + 1 				(use: USB token packets) 	0x05 or 0x14 (0x9)
CRC-6-ITU 			x6 + x + 1 					(ITU G.704, p. 3) 	0x03 or 0x30 (0x21)
CRC-7 				x7 + x3 + 1 				(use: telecom systems, MMC) 	0x09 or 0x48 (0x11)
CRC-8-ATM 			x8 + x2 + x + 1 				(use: ATM HEC) 	0x07 or 0xE0 (0xC1)
CRC-8-CCITT 		x8 + x7 + x3 + x2 + 1 		(use: 1-Wire bus) 	0x8D or 0xB1 (0x63)
CRC-8-Dallas/Maxim 	x8 + x5 + x4 + 1 			(use: 1-Wire bus) 	0x31 or 0x8C (0x19)
CRC-8 				x8 + x7 + x6 + x4 + x2 + 1 	0xD5 or 0xAB (0x57)
CRC-8-SAE J1850 	x8 + x4 + x3 + x2 + 1 		0x1D or 0xB8
CRC-10 				x10 + x9 + x5 + x4 + x + 1 	0x233 or 0x331 (0x263)
CRC-12 				x12 + x11 + x3 + x2 + x + 1 (use: telecom systems) 	0x80F or 0xF01 (0xE03)
CRC-15-CAN 			x15 + x14 + x10 + x8 + x7 + x4 + x3 + 1 	0x4599 or 0x4CD1 (0x19A3)
CRC-16-Fletcher 	Not a CRC; see Fletcher's checksum 	Used in Adler-32 A &amp; B CRCs
CRC-16-CCITT 	x16 + x12 + x5 + 1 (XMODEM,X.25, V.41, Bluetooth, PPP, IrDA; known as "CRC-CCITT") 	0x1021 or 0x8408 (0x0811)
CRC-16-IBM 	x16 + x15 + x2 + 1 (USB, many others; also known as "CRC-16") 	0x8005 or 0xA001 (0x4003)
CRC-24-Radix-64 	x24 + x23 + x18 + x17 + x14 + x11 + x10 + x7 + x6 + x5 + x4 + x3 + x + 1 	0x864CFB or 0xDF3261 (0xBE64C3)
CRC-32-Adler 	Not a CRC; see Adler-32 	See Adler-32
CRC-32-MPEG2 	x32 + x26 + x23 + x22 + x16 + x12 + x11 + x10 + x8 + x7 + x5 + x4 + x2 + x + 1 	0x04C11DB7 or 0xEDB88320 (0xDB710641) Also used in IEEE 802.3
CRC-32-IEEE 802.3 	x32 + x26 + x23 + x22 + x16 + x12 + x11 + x10 + x8 + x7 + x5 + x4 + x2 + x + 1 (V.42) 	0x04C11DB7 or 0xEDB88320 (0xDB710641)
CRC-32C (Castagnoli) 	x32 + x28 + x27 + x26 + x25 + x23 + x22 + x20 + x19 + x18 + x14 + x13 + x11 + x10 + x9 + x8 + x6 + 1 	0x1EDC6F41 or 0x82F63B78 (0x05EC76F1)
CRC-64-ISO 	x64 + x4 + x3 + x + 1 (use: ISO 3309) 	0x000000000000001B or 0xD800000000000000 (0xB000000000000001)
CRC-64-ECMA-182 	x64 + x62 + x57 + x55 + x54 + x53 + x52 + x47 + x46 + x45 + x40 + x39 + x38 + x37 + x35 + x33 + x32 + x31 + x29 + x27 + x24 + x23 + x22 + x21 + x19 + x17 + x13 + x12 + x10 + x9 + x7 + x4 + x + 1
(as described in ECMA-182 p.63) 	0x42F0E1EBA9EA3693 or 0xC96C5795D7870F42 (0x92D8AF2BAF0E1E85)
*)



(* revision history

hm	9.6.2007		rev 1.0		
	original version 

hm	11.9.2007		rev 1.1
	deleted unused variable i

hm	9. oct 2007 	rev 1.2
	added init code for crc and xor_out
	added refelct in and reflect_out (rev_in und Rev_out)

hm	2. jan 2008	rev 1.3
	small changes for performance improvements

hm	16. mar. 2008	rev 1.4
	changed type of input size to uint

hm	10. mar. 2009	rev 1.5
	removed nested comments

hm	16. jan. 2011	rev 2.0
	new version
*)


</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e61d6a3c-9ea6-4ab6-b71e-36ef89619e8d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MATRIX" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="x1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="x2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="x3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="x4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="X5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Release">
              <type>
                <BOOL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="code">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="TP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="y1">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="y2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="y3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="y4">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="line">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="X">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> scan line inputs </xhtml>
              </documentation>
            </variable>
            <variable name="L">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> scan line status </xhtml>
              </documentation>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="temp">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">TP := FALSE;
CODE := 0;
(* read scan lines *)
X[line].0 := X1;
X[line].1 := X2;
X[line].2 := X3;
X[line].3 := X4;
X[line].4 := X5;

(* compare for change *)
FOR i := 0 TO 3 DO
	IF X[i] &lt;&gt; L[i] THEN
		(* scan line information has changed code need to be found and generated *)
		temp := x[i] XOR L[i];
		IF temp.0 THEN
			CODE := 1;
			code.7 := X[i].0;
			L[i].0 := X[i].0;
		ELSIF temp.1 THEN
			code := 2;
			code.7 := X[i].1;
			L[i].1 := X[i].1;
		ELSIF temp.2 THEN
			code := 3;
			code.7 := X[i].2;
			L[i].2 := X[i].2;
		ELSIF temp.3 THEN
			CODE := 4;
			CODE.7 := X[i].3;
			L[i].3 := X[i].3;
		ELSIF temp.4 THEN
			CODE := 5;
			CODE.7 := X[i].4;
			L[i].4 := X[i].4;
		END_IF;
		TP := TRUE;
		CODE.4 := Line.0;
		CODE.5 := Line.1;
		CODE.6 := Line.2;

		(* check if release codes need to be killed *)
		IF NOT release AND CODE &lt; 127 THEN
			CODE := 0;
			TP := FALSE;
		END_IF;
		EXIT;
	END_IF;
END_FOR;

(* increment scan line every cycle *)
line := (line + 1) AND 2#0000_0011;
temp := SHL(BYTE#1,line);
Y1 := temp.0;
Y2 := temp.1;
Y3 := temp.2;
Y4 := temp.3;




(* revision history
hm		10.6.2007	rev 1.0		
	original version 


hm		11.9.2007	rev 1.1		
	deleted unused variables k and old_code

hm		23.12.2007	rev 1.2
	added exit statement in for loop instead of i:=5

hm		26. oct. 2008	rev 1.3
	code optimized

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e4f669b0-5683-4575-9b33-25b7a2a2f015</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="PIN_CODE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="CB">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PIN">
              <type>
                <string length="8" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="TP">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="POS">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tp := FALSE;
IF e THEN
	IF CB = CODE(pin, pos) THEN
		pos := pos + 1;
		IF pos &gt; LEN(PIN) THEN
			(* proper code is detected *)
			TP := TRUE;
			pos := 1;
		END_IF;
	ELSE
		pos := 1;
	END_IF;
END_IF;


(* revision history
hm	30. oct. 2008	rev 1.0		
	original version 


*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0b86ef17-fe88-49d3-bc6f-192b34071c6b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ACOSH" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">ACOSH := LN(SQRT(X * X - 1.0) + X);

(* revision history
hm		12 jan 2007	rev 1.0
	original version

hm		2. dec 2007	rev 1.1
	changed code for better performance

hm	16. mar. 2007		rev 1.2
	changed sequence of calculations to improve performance

hm	10. mar. 2009		rev 1.3
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f4622c46-fe6d-4187-bf67-28ae374fc334</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ACOTH" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">ACOTH := LN((x+1.0)/(x-1.0))*0.5;

(* revision history
hm		12 jan 2007	rev 1.0
	original version

hm		5. jan 2008	rev 1.1
	improved code for better performance

hm	10. mar. 2009		rev 1.2
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>9501ab7f-8564-4484-9408-c96cffee1bb7</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="AGDF" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">AGDF := LN((1.0 + SIN(X)) / COS(X));

(* comment
the current implementation gives sufficient accuracy only up to X = 1.57 or an output &gt; 10.
is X closer to PI/2 then the function is more and more unreliable
*)



(* revision history
hm	27. apr. 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5a06d39d-bc3b-4b6c-a3a1-8fcfcf0470e0</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="_ARRAY_ABS" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">stop := SHR(size,2)-1;
FOR i := 0 TO stop DO
	PT^[i] := ABS(PT^[i]);
END_FOR;
_ARRAY_ABS := TRUE;


(* revision history
hm	2. apr 2008		rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8791eef6-68c4-4bad-809e-d029f81d57ba</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="_ARRAY_ADD" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">stop := SHR(size,2)-1;
FOR i := 0 TO stop DO
	PT^[i] := PT^[i] + X;
END_FOR;
_ARRAY_ADD := TRUE;


(* revision history
hm	2. apr 2008		rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1965684d-3994-4b9b-80fd-df48d069ef5d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="_ARRAY_INIT" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="init">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">stop := SHR(size,2)-1;
FOR i := 0 TO stop DO
	pt^[i] := init;
END_FOR;

_array_init := TRUE;

(* revision History

hm 6.1.2007		rev 1.1
	change type of function to bool
	added  array_init := true to set output true.

hm	14.11.2007	rev 1.2
	changed stop calculation to be more efficient

hm	16.3. 2008		rev 1.3
	changed type of input size to uint
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>51484e79-15a8-4485-b3eb-a3b0199ea409</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="_ARRAY_MEDIAN" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">_ARRAY_SORT(pt,size);
stop := SHR(size,2)-1;
IF EVEN(UINT_TO_INT(stop)) THEN
	_ARRAY_MEDIAN := pt^[SHR(stop,1)];
ELSE
	i := SHR(stop,1);
	_ARRAY_MEDIAN := (pt^[i] + pt^[i+1]) * 0.5;
END_IF;

(* old code
stop := (size - SIZEOF(pt)) / SIZEOF(pt);
FOR i := 0 TO stop - 1 DO
	FOR m := i + 1 TO stop DO
		IF pt^[i] &gt; pt^[m] THEN
			temp := pt^[i];
			pt^[i] := pt^[m];
			pt^[m] := temp;
		END_IF;
	END_FOR;
END_FOR;
IF even(stop) THEN
	_array_median := pt^[stop/2];
ELSE
	i := stop/2;
	_array_median := (pt^[i] + pt^[i+1])/2;
END_IF;
*)
(* revision history
hm 	3.3.2007		rev 1.1
	corrected an error, changed the statement line 14	i := TRUNC(stop/2); to i := stop/2;

hm		22. sep 2007	rev 1.2
	changed algorithm to use _array_soft for performance reasons

hm		8. oct 2007		rev 1.3
	deleted unused variables m and temp

hm		14. nov 2007	rev 1.4
	corrected a problem with size calculation

hm		16.3. 2008		rev 1.5
	changed type of input size to uint
	performance improvements
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2d45333c-3d69-4f1e-8fe7-df4e72009f97</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="_ARRAY_MUL" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">stop := SHR(size,2)-1;
FOR i := 0 TO stop DO
	PT^[i] := PT^[i] * X;
END_FOR;
_ARRAY_MUL := TRUE;


(* revision history
hm	2. apr 2008		rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5b7d0a5c-ae80-4239-8887-c672de72fde7</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="_ARRAY_SHUFFLE" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="temp">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">stop := UINT_TO_INT(SHR(size,2)-1);
FOR i := 0 TO stop DO
        pos := RDM2(i+pos,0,stop);
        (* swap elements *)
        temp := pt^[i];
        pt^[i] := pt^[pos];
        pt^[pos] := temp;
END_FOR;

_ARRAY_SHUFFLE := TRUE;


(* revision History
hm 	4. mar 2008	rev 1.0
	original version

hm	16. mar. 2008	rev 1.1
	changed type of input size to uint

hm	30. mar. 2008	rev 1.2
	changed last in rdm2 fromm pos to i + pos to allow for more randomness

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>dcb064c0-7d3c-442a-a40c-c559f389941b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="_ARRAY_SORT" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="PT">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="1" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="SIZE">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="stack_count">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Laufvariable Stack</xhtml>
              </documentation>
            </variable>
            <variable name="stack">
              <type>
                <array>
                  <dimension lower="1" upper="32" />
                  <baseType>
                    <UINT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Stackgröße~ 1,6*Log(n)/log(2) </xhtml>
              </documentation>
            </variable>
            <variable name="links">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Anfangselement des Arrays </xhtml>
              </documentation>
            </variable>
            <variable name="rechts">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Endelement des Arrays </xhtml>
              </documentation>
            </variable>
            <variable name="pivot">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> temporärer Schwellwert für Tauschbedingung </xhtml>
              </documentation>
            </variable>
            <variable name="i">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Laufvariable1 </xhtml>
              </documentation>
            </variable>
            <variable name="j">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Laufvariable2 </xhtml>
              </documentation>
            </variable>
            <variable name="ende_innen">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Ende innere Schleife </xhtml>
              </documentation>
            </variable>
            <variable name="ende_aussen">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Ende äußere Schleife </xhtml>
              </documentation>
            </variable>
            <variable name="tmp">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Hilfsvariable zum Tauschen von Werten </xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* Startwerte zur Arraygröße *)
links := 1;					(* Anfangselement des Arrays *)
rechts := SHR(size,2);		(* Endelement des Arrays *)
stack_count := 1;			(* Laufvariable Stack *)

WHILE NOT ende_aussen DO						(* äußere Schleife *)
	IF links &lt; rechts THEN
		pivot := PT^[SHR(rechts+links,1)];			(* Wert des mittleren Elements als Pivot-Wert *)
		i := links -1;
		j := rechts +1;

		(* innere Schleife, teile Feld *)
		ende_innen := FALSE;
		REPEAT

			(* steigende Reihenfolge *)
			REPEAT	i := i+1;	UNTIL (PT^[i] &gt;= pivot) OR NOT (i &lt; rechts)	END_REPEAT;
			REPEAT	j := j-1;	UNTIL (PT^[j] &lt;= pivot) OR NOT (j &gt; links)	END_REPEAT;


			(*sinkende Reihenfolge *)
(*			REPEAT	i := i+1;	UNTIL (PT^[i] &lt;= pivot) OR NOT (i &lt; rechts)	END_REPEAT	*)
(*			REPEAT	j := j-1;	UNTIL (PT^[j] &gt;= pivot) OR NOT (j &gt; links)	END_REPEAT	*)

			IF i &gt;= j THEN
				ende_innen := TRUE;
			ELSE
				   tmp := PT^[j];
				PT^[j] := PT^[i];
				PT^[i] := tmp;
			END_IF;

		UNTIL ende_innen END_REPEAT;

		(* Push stack *)
		stack[stack_count] := rechts;		(* rechten Teil später sortieren *)
		IF Stack_count &lt; 32 THEN
			stack_count := stack_count +1;
		ELSE
			ende_aussen := TRUE;
			_ARRAY_SORT := FALSE;					(* Fehler: Stack zu klein *)
		END_IF;

		(* linken Teil sortiern *)
		rechts := MAX(links, i-1);

	ELSE

		IF stack_count = 1 THEN
			ende_aussen := TRUE;
		ELSE

			links := rechts+1;

			(* pop stack *)
			stack_count := stack_count -1;		(* jetzt rechten Teil sortierne *)
			rechts:= stack[stack_count];
		END_IF;

	END_IF;

END_WHILE;

_ARRAY_SORT := TRUE;				(* Sortierung beendet *)


(* algorithm used before rev 2.0

size := SHR(size,2);
size2 := UINT_TO_INT(SHR(size,1));
FOR i := SIZE2  TO 1 BY -1 DO
	j:=i;
    WHILE j &lt;= SIZE2 DO
     	stop := j * 2 + 1;
        IF stop &gt; UINT_TO_INT(SIZE) THEN stop := stop - 1;
        ELSIF pt^[stop-1] &gt; pt^[stop] THEN stop := stop - 1;
		END_IF;
        IF pt^[j] &lt; pt^[stop] THEN
         	temp := pt^[j];
            pt^[j] := pt^[stop];
            pt^[stop] := temp;
        END_IF;
        j := stop;
    END_WHILE;
END_FOR;

*)

(* heapsort
FOR heapsize := UINT_TO_INT(size) TO 1 BY -1 DO
	popmax := pt^[1];
	pt^[1] := pt^[heapsize];
   	i := 1;
	hs2 := SHR(heapsize,1);
	WHILE i &lt;= hs2 DO
       	stop := i * 2 + 1;  
        	IF stop &gt; heapsize THEN stop := stop - 1;
        	ELSIF pt^[stop-1] &gt; pt^[stop] THEN stop := stop - 1;
	 	END_IF;
        	IF pt^[i] &lt; pt^[stop] THEN
            		temp := pt^[i];
            		pt^[i] := pt^[stop];
            		pt^[stop] := temp;
        	END_IF;
        	i := stop;
    	END_WHILE;
	pt^[heapsize] := popmax;
END_FOR;

_ARRAY_SORT2 := TRUE;
*)

(* old algorithm bubble sort used before rev 1.2
stop := (size - SIZEOF(pt)) / SIZEOF(pt);
FOR i := 0 TO stop - 1 DO
	FOR m := i + 1 TO stop DO
		IF pt^[i] &gt; pt^[m] THEN
			temp := pt^[i];
			pt^[i] := pt^[m];
			pt^[m] := temp;
		END_IF;
	END_FOR;
END_FOR;
_array_sort := TRUE;

*)


(* revision history

hm 	6.1.2007 	rev 1.1
	changed return value to true

hm	22. sep 2007	rev 1.2
	changed sorting algorithm to heap sort for performance reasons

hm 	14. nov 2007	rev 1.3
	changed calculation of stop to be more efficient

hm	15 dec 2007	rev 1.4
	added function return true

hm	5. jan 2008		rev 1.5
	improved performance

hm	16. mar. 2008	rev 1.6
	changed type of input size to uint

hm	28. mar. 2008	rev 1.7
	changed input f to pt

hm	19. jan. 2011	rev 2.0
	new faster algorithm using qucksort (Alexander Drikitis)

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>9fd8439d-0611-4b6a-a44f-68257cf850b3</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ARRAY_AVG" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">stop := SHR(size,2)-1;
ARRAY_AVG := pt^[0];
FOR i := 1 TO stop DO
	ARRAY_AVG := ARRAY_AVG + pt^[i];
END_FOR;
ARRAY_AVG := ARRAY_AVG / UINT_TO_REAL(stop + 1);


(* revision history
hm	2. oct 2007		rev 1.0
	original version

hm	12. dec 2007	rev 1.1
	chaged code for better performance

hm	16. mar. 2008	rev 1.2
	changed input size to uint

hm	10. mar. 2009	rev 1.3
	added type conversion for compatibility reasons
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2691be3f-7d4e-4d2b-a6c2-6a88a370ce5d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ARRAY_GAV" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">stop := SHR(size,2)-1;
ARRAY_GAV := 1.0;
FOR i := 0 TO stop DO
	IF pt^[i] &gt; 0.0 THEN
		ARRAY_GAV := ARRAY_GAV * pt^[i];
	ELSE
		ARRAY_GAV := 0.0;
		RETURN;
	END_IF;
END_FOR;
ARRAY_GAV := SQRTN(ARRAY_GAV,UINT_TO_INT(stop)+1);


(* revision history
hm	2. apr 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>92081f24-29f4-486a-936f-9ca7ab6b5f5b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ARRAY_HAV" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">stop := SHR(size,2)-1;
FOR i := 0 TO stop DO
	IF pt^[i] &lt;&gt; 0.0 THEN
		ARRAY_HAV := ARRAY_HAV + 1.0 / pt^[i];
	ELSE
		ARRAY_HAV := 0.0;
		RETURN;
	END_IF;
END_FOR;
ARRAY_HAV := UINT_TO_REAL(stop + 1) / ARRAY_HAV;


(* revision history
hm	2. apr 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8ac236cc-83a3-44f0-891c-46b6053b4593</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ARRAY_MAX" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">stop := (size -SIZEOF(pt)) / SIZEOF(pt);
array_max := pt^[0];
FOR i := 1 TO stop DO
	IF pt^[i] &gt; array_max THEN array_max := pt^[i]; END_IF;
END_FOR;

(* revision history
hm	2. oct 2006		rev 1.0
	original version

hm	16. mar. 2008	rev 1.1
	changed input size to uint
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a2283e34-42c9-4d2f-99e4-4f1d933965ab</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ARRAY_MIN" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">stop := (size - SIZEOF(pt)) / SIZEOF(pt);
array_min := pt^[0];
FOR i := 1 TO stop DO
	IF pt^[i] &lt; array_min THEN array_min := pt^[i]; END_IF;
END_FOR;


(* revision history
hm		2. oct. 2006
	original version

hm		16. mar. 2008
	changed type of input size to uint

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a5299bc4-0c41-4892-b381-5a5a4147c210</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ARRAY_SDV" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* standard deviation is simply the square root of the variance *)

array_sdv := SQRT(array_var(pt, size));

(* revision history
hm 	1.4.2007		rev 1.0
	function created

hm	16. mar. 2008	rev 1.1
	changed type of input size to uint

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>744fe302-01cc-4b33-bad1-ffc01a25de30</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ARRAY_SPR" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="array_max">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="array_min">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">stop := (size -SIZEOF(pt)) / SIZEOF(pt);
array_min := pt^[0];
array_max := pt^[0];
FOR i := 1 TO stop DO
	IF pt^[i] &gt; array_max THEN array_max := pt^[i];
	ELSIF pt^[i] &lt; array_min THEN array_min := pt^[i];
	END_IF;
END_FOR;
array_spr := array_max - array_min;


(* revision history
hm 	2. oct. 2006	rev 1.0
	original version

hm	16. mar. 2008	rev 1.1
	changed type of input size to uint

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>790a64f0-06bd-4289-aa25-baa05d8133ac</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ARRAY_SUM" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">stop := (size -SIZEOF(pt)) / SIZEOF(pt);
array_sum := pt^[0];
FOR i := 1 TO stop DO
	array_sum := array_sum + pt^[i];
END_FOR;

(* revision history
hm 	2. oct. 2006	rev 1.0
	function created

hm	16. mar. 2008	rev 1.1
	changed type of input size to uint

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>120c33f5-f3ef-4d05-ac43-94d5aa143154</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ARRAY_TREND" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="x">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="stop2">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">stop := SHR(size,2)-1;
stop2 := SHR(stop,1);
FOR i := 0 TO stop2 DO x := x - pt^[i]; END_FOR;
IF EVEN(UINT_TO_INT(stop)) THEN
	FOR i := stop2 TO stop DO X := X + pt^[i]; END_FOR;
ELSE
	FOR i := stop2 + 1 TO stop DO X := X + pt^[i]; END_FOR;
END_IF;
ARRAY_TREND := x / UINT_TO_REAL(stop2 + 1);

(* revision history
hm	2 oct 2007	rev 1.0
	original version

hm	12 dec 2007	rev 1.1
	changed code for better performance

hm	16. mar. 2008	rev 1.2
	changed type of input size to uint

hm	10. mar. 2009	rev 1.3
	added type conversions for compatibility reasons
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e6903e99-5a12-4258-bd64-bc1a6d70cdc2</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ARRAY_VAR" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="avg">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* at first we calualte the arithmetic average of the array *)

stop := SHR(size,2)-1;
avg := pt^[0];
FOR i := 1 TO stop DO
	avg := avg + pt^[i];
END_FOR;
avg := avg / UINT_TO_REAL(stop + 1);

(* in a second run we calculate the variance of the array *)

array_var := (pt^[0] - avg) * (pt^[0] - avg);
FOR i := 1 TO stop DO
	array_var := array_var + (pt^[i] - avg) * (pt^[i] - avg);
END_FOR;
ARRAY_VAR := ARRAY_VAR / UINT_TO_REAL(stop);

(* revision history
hm 	1.4.2007	rev 1.0
	function created

hm	12.12.2007	rev 1.1
	changed code for better performance

hm	16. mar. 2008	rev 1.2
	changed type of input size to uint

hm	10. mar. 2009	rev 1.3
	added type conversions for compatibility reasons
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0d94a61a-b340-4a42-a681-47195dcd29dc</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="IS_SORTED" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="32000" />
                      <baseType>
                        <REAL />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">stop := UINT_TO_INT(SHR(size,2)-2);
FOR i := 0 TO stop DO
	IF pt^[i] &gt; pt^[i+1] THEN
		IS_SORTED := FALSE;
		RETURN;
	END_IF;
END_FOR;

IS_SORTED := TRUE;

(* revision history

hm 	29. mar. 2008 	rev 1.0
	original version

hm	4. apr. 2008	rev 1.1
	added type conversion to avoid warnings under codesys 3.0
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c0ebae0b-4808-480c-940e-278f07ae79e0</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ASINH" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">ASINH := LN(SQRT(X * X + 1.0)+X);

(* revision history
hm		12 jan 2007	rev 1.0
	original version

hm		2. dec 2007	rev 1.1
	changed code for better performance

hm		16.3. 2007		rev 1.2
	changed sequence of calculations to improve performance

hm	10. mar. 2009		rev 1.3
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a3b610e8-5d58-4523-9083-be3825b6c627</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ATAN2" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X &gt; 0.0 THEN
	ATAN2 := ATAN(Y/X);
ELSIF X &lt; 0.0 THEN
	IF Y &gt;=0.0 THEN
		ATAN2 := ATAN(Y/X) + MATH.PI;
	ELSE
		ATAN2 := ATAN(Y/X) - MATH.PI;
	END_IF;
ELSIF Y &gt; 0.0 THEN
	ATAN2 := MATH.PI05;
ELSIF Y &lt; 0.0 THEN
	ATAN2 := -MATH.PI05;
ELSE
	ATAN2 := 0.0;
END_IF;


(* revision history
hm	20.  apr. 2008	rev 1.0
	original version

hm	18. oct. 2008	rev 1.1
	changed to use math constants

hm	10. mar. 2009	rev 1.2
	real constants updated to new systax using dot

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d2e6a04c-e896-4fd3-89d5-955c446650c1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ATANH" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">ATANH := LN((1.0 + x)/(1.0 - x)) * 0.5;


(* revision history
hm		12 jan 2007	rev 1.0
	original version

hm		5. jan 2008	rev 1.1
	improved code for better performance

hm	10. mar. 2009		rev 1.2
	real constants updated to new systax using dot

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1554ac22-af08-48c3-aaed-0f37504d7d28</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BETA" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">BETA := GAMMA(X) * GAMMA(Y) / GAMMA(x + y);


(* revision history
hm	26. oct. 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>9785ef3c-7e54-44d5-9669-d49a0807e50a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BINOM" pouType="function">
        <interface>
          <returnType>
            <DINT />
          </returnType>
          <inputVars>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="K">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF 2 * K &gt; n THEN
	k := n - k;
END_IF;
IF k &gt; n THEN
	RETURN;
ELSIF k = 0 OR k = n THEN
	BINOM := 1;
ELSIF k = 1 THEN
	BINOM := n;
ELSE
	BINOM := n;
	n := n + 1;
	FOR i := 2 TO k DO
		BINOM := BINOM * (n - i) / i;
	END_FOR;
END_IF;



(*
binomialkoeffizient(n, k)
1  wenn k = 0 return 1
2  wenn 2k &gt; n
3      dann führe aus ergebnis \leftarrow binomialkoeffizient(n, n-k)
4  sonst führe aus ergebnis \leftarrow n
5          von i \leftarrow 2 bis k
6              führe aus ergebnis \leftarrow ergebnis \cdot (n + 1 - i)
7                        ergebnis \leftarrow ergebnis : i
8  return ergebnis
*)



(* revision history
hm	25. oct. 2008	rev 1.0
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1d18c8c8-7df5-4058-b94b-c4b40f88c50a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CAUCHY" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="T">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="U">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="tmp">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tmp := x - t;
CAUCHY := math.PI_INV * U / (U*U + tmp*tmp);



(* revision hisdtory
hm	26. oct. 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d16fa3c7-5e3b-4648-afc8-9d8395bf3a94</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CAUCHYCD" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="T">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="U">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CAUCHYCD := 0.5 + math.PI_INV * ATAN((X - T) / U);



(* revision hisdtory
hm	26. oct. 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>eccf1b66-fff7-4040-aa1c-9bbe7fe2b7c9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CEIL" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CEIL := REAL_TO_INT(x);
IF CEIL &lt; X THEN
	CEIL := CEIL + 1;
END_IF;


(* revision history
hm	7. feb. 2007	rev 1.0
	original version

hm	21. mar. 2008	rev 1.1
	use REAL_TO_INT instead of trunc for compatibility reasons

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>dd27053b-d539-4dd8-aa6e-5e0550542f8e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CEIL2" pouType="function">
        <interface>
          <returnType>
            <DINT />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CEIL2 := REAL_TO_DINT(X);
IF DINT_TO_REAL(CEIL2) &lt; X THEN
	CEIL2 := CEIL2 + 1;
END_IF;


(* revision history
hm	21. mar. 2008	rev 1.0
	original version

hm	4. apr. 2008	rev 1.1
	added type conversion to avoid warnings under codesys 3.0

hm	30. jun. 2008	rev 1.2
	added type conversion to avoid warnings under codesys 3.0

hm	10. mar. 2009	rev 1.3
	use correct statement real_to_DINT

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>74f9cc72-fcc1-492f-8fc0-075cc435588f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CMP" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="tmp">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tmp := ABS(x);
IF tmp &gt; 0.0 THEN
	tmp := EXP10(INT_TO_REAL(FLOOR(LOG(tmp))-N+1));
ELSE
	tmp := EXP10(tmp);
END_IF;
CMP := ABS(X - Y) &lt; tmp;


(* revision history
hm	12. mar. 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	added type conversion for compatibility reasons
*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>dcf68e16-ada9-4fd4-b4fe-8e8cbb3035ef</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CABS" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CABS := HYPOT(x.re, x.im);


(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>add604f3-22b2-496f-b09a-ab358fb32d6b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CACOS" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="Y">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">y := CACOSH(x);
CACOS.re := y.im;
CACOS.im := -y.re;



(* revision history
hm	21. feb 2008	rev 1.0
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b113b9a2-978e-4c06-b808-d429834366a6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CACOSH" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="Y">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">y.re := (X.re - X.im)*(X.re + X.im) - 1.0;
y.im := 2.0 * X.re * X.im;
y    := CSQRT(y);
y.re := y.re + x.re;
y.im := y.im + x.im;
CACOSH  := CLOG(y);



(* revision history
hm	21. feb 2008	rev 1.0
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ce292351-160c-45c7-8d1b-4862cac2e10b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CADD" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
            <variable name="Y">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CADD.re := x.re + y.re;
CADD.im := x.im + y.im;


(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c89c680b-1797-4059-a025-94372b141d95</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CARG" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CARG := ATAN2(X.im, X.re);



(* revision history
hm	21. feb. 2008	rev 1.0
	original version

hm	20. apr. 2008	rev 1.1
	use ATAN2 instead of ATAN
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>41514a79-73f1-4dd6-a888-7c437adf9b9c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CASIN" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="Y">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">y.re := -x.im;
y.im := x.re;
y := CASINH(y);
CASIN.re := y.im;
CASIN.im := -y.re;



(* revision history
hm	21. feb 2008	rev 1.0
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>867aaba1-1a0b-4e79-a5ba-cea8111607e5</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CASINH" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="Y">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">y.re := (X.re - X.im)*(X.re + X.im) + 1.0;
y.im := 2.0 * X.re * X.im;
y    := CSQRT(y);
y.re := y.re + x.re;
y.im := y.im + x.im;
CASINH  := CLOG(y);



(* revision history
hm	21. feb 2008	rev 1.0
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4482faf9-19cf-4b87-9944-bb546e9f1e93</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CATAN" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="r2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="num">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="den">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">r2 := x.re * x.re;
den := 1.0 - r2 - x.im * x.im;
CATAN.re := 0.5 * ATAN(2.0 * x.re / den);
num := x.im + 1.0;
num := r2 + num * num;
den := x.im - 1.0;
den := r2 + den * den;
CATAN.im := 0.25 * (LN(num)-LN(den));

(* revision history
hm	21. feb 2008	rev 1.0
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>aaef1289-7359-47b2-bf2f-08e34def3cc0</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CATANH" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="num">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="den">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">i2 := x.im * x.im;
num := 1.0 + x.re;
num := i2 + num * num;
den := 1.0 - x.re;
den := i2 + den * den;
CATANH.re := 0.25 * (LN(num) - LN(den));
den := 1 - x.re * x.re - i2;
CATANH.im := 0.5 * ATAN(2.0 * x.im / den);

(* revision history
hm	21. feb 2008	rev 1.0
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4edd355d-4e2c-49f2-9b1e-1e19e1335c0f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CCON" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CCON.re := x.re;
CCON.im := -x.im;


(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0395b812-6f6f-4f5f-bff2-df7a0f17e00a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CCOS" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CCOS := CCOSH(CSET(-X.im, X.re));


(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d1287463-6738-470d-83f0-bb0e5e5f525c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CCOSH" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CCOSH.re := cosH(x.re) * COS(x.im);
CCOSH.im := sinH(x.re) * SIN(x.im);


(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7e202e1d-ed8d-4cea-87b2-df9fa0fdd14c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CDIV" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
            <variable name="Y">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="Temp">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">temp := Y.re * Y.re + Y.im * Y.im;
CDIV.re := (X.re * Y.re + X.im * Y.im) / temp;
CDIV.im := (X.im * Y.re - X.re * Y.im) / temp;

(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>26102a05-f936-4e1c-9902-33c52f014a14</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CEXP" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="Temp">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">temp := EXP(X.re);
CEXP.re := temp * COS(X.im);
CEXP.im := temp * SIN(X.im);


(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>49aa96aa-92e2-4316-b7bc-7e2f744f974a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CINV" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="temp">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">temp := X.re * X.re + X.im * X.im;
CINV.re := X.re / temp;
CINV.im := -X.im / temp;

(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>aaaea73e-a5cf-4129-bb40-e8cf77ee4fe1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CLOG" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CLOG.re := LN(HYPOT(X.re, X.im));
CLOG.im := ATAN2(X.im, X.re);


(* revision history
hm	21. feb 2008	rev 1.0
	original version

hm	20. apr. 2008	rev 1.1
	use ATAN2 instead of ATAN
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>41034bc5-5079-4717-bd4f-997cc937d398</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CMUL" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
            <variable name="Y">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CMUL.re := X.re * Y.re - X.im * Y.im;
CMUL.im := X.re * Y.im + X.im * Y.re;

(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d88fab79-ad12-49a7-ab63-abafa94465c7</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CPOL" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="L">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="A">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CPOL.re := L * COS(A);
CPOL.im := L * SIN(A);


(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b74acd1d-2fed-4369-a48c-73747644e289</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CPOW" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
            <variable name="Y">
              <type>
                <derived name="Complex" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CPOW := CEXP(CMUL(Y,CLOG(X)));


(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4b3a1ea7-c788-413c-aab8-82c6e118f126</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CSET" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="RE">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="IM">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CSET.re := RE;
CSET.im := IM;

(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b55cdd9d-2e93-4252-8d16-ddaeae236669</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CSIN" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CSIN.re := cosH(X.im) * SIN(X.re);
CSIN.im := sinH(X.im) * COS(X.re);


(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>69299b0c-b7af-4f17-89cb-fbe95fd6b6af</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CSINH" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CSINH.re := sinH(X.re) * COS(X.im);
CSINH.im := cosH(X.re) * SIN(X.im);


(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>9a931e59-f77a-4032-a2fc-f0ecb2c4d4fb</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CSQRT" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="temp">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">temp := HYPOT(x.re, x.im);
CSQRT.re :=  SQRT(0.5 * (temp + x.re));
CSQRT.im :=  sgn(x.im) * SQRT(0.5 * (temp - x.re));


(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ae1248d8-5fde-4687-b6dd-08353f94f9df</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CSUB" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
            <variable name="Y">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CSUB.re := X.re - Y.re;
CSUB.im := X.im - Y.im;

(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e228c190-32e2-493d-a6e4-c827f791a0a6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CTAN" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="temp">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xi2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xr2">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">xi2 := 2.0 * x.im;
xr2 := 2.0 * x.re;
temp := 1.0 / (COS(xr2) + COSH( xi2));
CTAN.re := temp * SIN(xr2);
CTAN.im := temp * SINH(xi2);


(* revision history
hm	21. feb 2008	rev 1.0
	original version

hm	10. mar 2009	rev 1.1
	faster code
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5e937635-a2c4-41bb-a618-83344fb9ccb7</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CTANH" pouType="function">
        <interface>
          <returnType>
            <derived name="complex" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="complex" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="temp">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xi2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xr2">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">xi2 := 2.0 * x.im;
xr2 := 2.0 * x.re;
temp := 1.0 / (COSH(xr2) + COS(xi2));
CTANH.re := temp * SINH(xr2);
CTANH.im := temp * SIN(xi2);


(* revision history
hm	21. feb 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1	
	new faster code

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>be2a5d4d-0d77-4f2d-865e-5b8ed6bd3815</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="COSH" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="t">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">T := EXP(X);
COSH := (1.0 / T + T) * 0.5;

(* revision histroy
hm	12.1.2007	rev 1.0
	original version

hm	1.12.2007	rev 1.1
	changed code to improve performance

hm	5. jan 2008	rev 1.2
	further performance improvement

hm	10. mar. 2009	rev 1.3
	real constants updated to new systax using dot
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e5f5d5f3-6ed5-4d92-a2a5-99ac63476958</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="COTH" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X &gt; 20.0 THEN
	COTH :=1.0;
ELSIF X &lt; -20.0 THEN
	COTH := -1.0;
ELSE
	COTH := 1.0 + 2.0 / (EXP(X * 2.0) - 1.0);
END_IF;


(* revision histroy
hm		12.1.2007	rev 1.0
	original version

hm	1.12.2007		rev 1.1
	changed code to improve performance

hm	8. jan 2008	rev 1.2
	further improvement in performance

hm	10. mar 2008	rev 1.3
	extended range of valid inputs to +/- INV
	changed formula for better accuracy

hm	10. mar. 2009	rev 1.4
	real constants updated to new systax using dot
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5a40fb1d-24d0-49a5-a65a-8539bc6f9375</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="D_TRUNC" pouType="function">
        <interface>
          <returnType>
            <DINT />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">D_TRUNC := REAL_TO_DINT(X);
IF X &gt; 0.0 THEN
	IF DINT_TO_REAL(D_TRUNC) &gt; X THEN D_TRUNC := D_TRUNC - 1; END_IF;
ELSE
	IF DINT_TO_REAL(D_TRUNC) &lt; X THEN D_TRUNC := D_TRUNC + 1; END_IF;
END_IF;


(* for systems that support a dint truncation this routine can be replaced by trunc() *)


(* revision history
hm	21. mar. 2008	rev 1.0
	original version

hm	31. oct. 2008	rev 1.1
	optimized performance

hm	10. mar. 2009	rev 1.2
	real constants updated to new systax using dot
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b4211e21-30ee-4fc3-b424-e4051cf2121b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DEC1" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X = 0 THEN
	DEC1 := N - 1;
ELSE
	DEC1 := X - 1;
END_IF;


(* this is a very elegant version but 50% slower
X := (X - 1 + N) MOD N;
*)


(* revision history
hm	13. oct. 2008	rev 1.0
	original version

hm	27. oct. 2008	rev 1.1
	added statement to return value for compatibility reasons

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>04b751de-7a97-4746-af5d-e25287c957f5</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DEG" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="rad">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">DEG := MODR(57.29577951308232 * RAD, 360.0);

(* revision history
hm	4. aug 2006	rev 1.0
	original version

hm 16. oct 2007	rev 1.1
	added modr statement which prohibits deg to become bigger than 360

hm	10. mar. 2009	rev 1.2
	real constants updated to new systax using dot
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f0a6a6b5-e5f6-41c8-b602-ca0501a44e9d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DIFFER" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="in1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">DIFFER := ABS(in1 - in2) &gt; X;

(* revision history
hm		8. oct 2006		rev 1.0
	original version

hm		16. mar 2008	rev 1.1
	improverd code for performance

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>20d86424-7fc1-4b47-bbaf-2f6466cb9a15</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="R2_ABS" pouType="function">
        <interface>
          <returnType>
            <derived name="REAL2" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="REAL2" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X.RX &gt;= 0.0 THEN
	R2_ABS.RX := X.RX;
	R2_ABS.R1 := X.R1;
ELSE
	R2_ABS.RX := -X.RX;
	R2_ABS.R1 := -X.R1;
END_IF;


(* revision history
hm	21. mar. 2008	rev 1.0
	original version

hm	10. mar. 2009 rev 1.1
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>05ab3c2f-00a7-4699-a713-cf2d8188a874</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="R2_ADD" pouType="function">
        <interface>
          <returnType>
            <derived name="REAL2" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="Real2" />
              </type>
            </variable>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="temp">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">temp := X.RX;
R2_ADD.RX := Y + X.R1 + X.RX;
R2_ADD.R1 := temp - R2_ADD.RX + Y + X.R1;


(* revision history
hm		20.3.2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5ee7aa41-6f82-4576-8e53-2814f40785e2</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="R2_ADD2" pouType="function">
        <interface>
          <returnType>
            <derived name="REAL2" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="Real2" />
              </type>
            </variable>
            <variable name="Y">
              <type>
                <derived name="REAL2" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">R2_ADD2.R1 := X.R1 + Y.R1;
R2_ADD2.RX := X.RX + Y.RX;


(* revision history
hm		20.3.2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>babfbfc9-0d4a-4f17-a75a-8dbf564c965c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="R2_MUL" pouType="function">
        <interface>
          <returnType>
            <derived name="REAL2" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="REAL2" />
              </type>
            </variable>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">R2_MUL.RX := X.RX * Y;
R2_MUL.R1 := X.R1 * Y;


(* revision history
hm		20.3.2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>3875a252-30f5-40b7-8ebd-70a45811d9c0</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="R2_SET" pouType="function">
        <interface>
          <returnType>
            <derived name="REAL2" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">R2_SET.RX := X;
R2_SET.R1 := 0.0;


(* revision history
hm	2. jun. 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>90e9baa7-72be-4936-b543-78e0f6ba5da6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ERF" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="x2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="ax2">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">x2 := X*X;
ax2 := 0.147 * x2 + 1.0;
ERF := SQRT(1.0 - EXP(-X2 * ((0.27323954473516 + aX2)/(ax2)))) * SGN(x);




(* revision history
hm	7. apr. 2008	rev 1.0
	original version

hm	30. jun. 2008	rev 1.1
	added type conversions to avoid warnings under codesys 3.0

hm	25. oct. 2008	rev 1.2
	new code using new algorithm

hm	10. mar. 2009	rev 1.3
	real constants updated to new systax using dot
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a3e6c4e5-ed1f-4039-bf4c-c4c43ed22f10</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ERFC" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">ERFC := 1.0 - ERF(X);

(* revision history
hm	7. apr. 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>465bcf3c-0944-4e7a-84ce-5e8ebf115393</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="EVEN" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="in">
              <type>
                <DINT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">EVEN := NOT in.0;

(* revision history
hm	1. oct 2006	rev 1.0
	ORIGINAL VERSION

hm	01.12.2007	rev 1.1
	changed code for improved performance

hm	21. mar. 2008	rev 1.2
	changed type of input IN from INT to DINT
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>80442403-7ee5-4034-a407-44cf4f6fe5a9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="EXP10" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">EXP10 := EXP(X * 2.30258509299405);

(* revision history
hm	2. dec 2007		rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1bc96e1c-a8f5-4725-afd0-0dcf7483a6be</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="EXPN" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="sign">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">sign := n.15;
N := ABS(N);
IF N.0 THEN EXPN := X; ELSE EXPN := 1.0; END_IF;
N := SHR(N,1);
WHILE N &gt; 0 DO
   X := X * X;
   IF N.0 THEN EXPN := EXPN * X; END_IF;
   N := SHR(N,1);
END_WHILE;
IF sign THEN EXPN := 1.0 / EXPN; END_IF;



(* revision history
hm	4. dec 2007	rev 1.0
	original version

hm	22. oct. 2008	rev 1.1
	optimized code

hm	10. mar. 2009	rev 1.2
	removed nested comments
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ac8308a3-ca98-4c28-811a-022786c0aee7</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FACT" pouType="function">
        <interface>
          <returnType>
            <DINT />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X &lt;= 5 THEN
	FACT := 1;
	FOR i := 2 TO x DO
		FACT := FACT * i;
	END_FOR;
ELSIF x &lt;= 9 THEN
	FACT := 720;
	FOR i := 7 TO x DO
		FACT := FACT * i;
	END_FOR;
ELSIF x &lt;= 13 THEN
	FACT := 3628800;
	FOR i := 11 TO x DO
		FACT := FACT * i;
	END_FOR;
ELSE
	FACT := -1;
END_IF;




(* revision history
hm 4.3.2007		rev 1.1
	changed a critical error where while loop was indefinite.

hm	10.12.2007	rev 1.2
	start value for i has changed to 2 for better performance

hm	10. mar 2008	rev 1.3
	changed output of fact to dint to allow bigger values

hm	27. oct. 2008	rev 1.4
	optimized code
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>38dd1130-d61e-4c57-8cdd-9d8b8eb4eda4</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FIB" pouType="function">
        <interface>
          <returnType>
            <DINT />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="t1">
              <type>
                <DINT />
              </type>
            </variable>
            <variable name="t2">
              <type>
                <DINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X &lt; 0 OR X &gt; 46 THEN
	FIB := -1;
ELSIF x &lt; 2 THEN
	FIB := X;
	RETURN;
ELSE
	(* the fibonacci number is the sum of the two suceeding fibonaci numbers *)
	(* we store the numbers alternatively in t1 and t2 depending on pt *)
	t2 := 1;
	WHILE X &gt; 3 DO
		X := X-2;
		t1 := t1 + t2;
		t2 := t1 + t2;
	END_WHILE;
	IF X &gt; 2 THEN t1 := t1 + t2; END_IF;
	fib := t1 + t2;
END_IF;

(* alternative code for very big numbers

IF X &lt; 31 THEN
	fib := 0.4472136 * (expn(1.618034,X) - expn(-0.618034,X));
ELSE
	fib := 0.4472133 * expn(1.618034,X);
END_IF;

*)

(* revision history
hm		27. dec 2007	rev 1.0
	original version

hm		2. jan 2008	rev 1.1
	deleted unused variable pt

hm		10. mar 2008	rev 1.2
	changed output to dint instead of real

hm		26. mar. 2008	rev 1.3
	function now returns -1 for input &lt; 0 or &gt; 46

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>3626bcfc-0203-4bc5-bc07-675bc465bceb</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FLOOR" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">FLOOR := REAL_TO_INT(X);
IF FLOOR &gt; X THEN
	FLOOR := FLOOR - 1;
END_IF;

(* revision history
hm		7. feb 2007		rev 1.0
	originlal version

hm		21. mar. 2008	rev 1.1
	replaced trunc with real_to_int for compatibility reasons

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>67f12557-6fba-4a2e-8cde-ebab65b005ac</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FLOOR2" pouType="function">
        <interface>
          <returnType>
            <DINT />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">FLOOR2 := REAL_TO_DINT(X);
IF DINT_TO_REAL(FLOOR2) &gt; X THEN
	FLOOR2 := FLOOR2 - 1;
END_IF;

(* revision history
hm	21. mar. 2008	rev 1.0
	originlal version

hm	4. apr. 2008	rev 1.1
	added type conversion to avoid warnings under codesys 3.0
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a5d2e2c8-aa5f-471c-b19b-b0082f5a5081</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FRACT" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="x">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF ABS(x) &lt; 2.0E9 THEN
	FRACT := x - DINT_TO_REAL(D_TRUNC(x));
ELSE
	FRACT := 0.0;
END_IF;

(* revision history
hm	4. aug 2006	rev 1.0
	original version

hm	11. mar 2008	rev 1.1
	added dint_to_real for compatibility reasons
	now returns 0 for number &gt; 2e9
	changed input to x

hm	21. mar. 2008	rev 1.2
	use D_trunc instead of TRUNC for compatibility reasons

hm	10. mar. 2009	rev 1.3
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f1fa030f-3ca8-4156-b247-11d412aa06ac</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="F_LIN" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="A">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="B">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">F_lin := A * X + B;

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0153fded-cabc-4c27-ba76-6f3492352eae</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="F_LIN2" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="X1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Y1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="X2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Y2">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">F_LIN2 := (Y2 - Y1) / (X2 - X1) * (X - X1) + Y1;


(* revision history
hm	1. jan. 2007	rev 1.0
	original release

hm	17. dec. 2008	rev 1.1
	optimized formula

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e694ccc6-4466-4fcd-8e6a-21295d7aaedf</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="F_POLY" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="C">
              <type>
                <array>
                  <dimension lower="0" upper="7" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="x2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="X4">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="X6">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">x2 := X * X;
X4 := X2 * X2;
X6 := X4 * X2;
F_POLY := C[7] * X6 * X + C[6] * X6 + C[5] * X4 * X + C[4] * X4 + c[3] * X2*X + C[2] * X2 + C[1] * X + C[0];


(* revision history
hm		20. may. 2008		rev 1.0
	original version

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f4b18f68-485e-4587-842f-eb99abb7f7a1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="F_POWER" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="a">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="x">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="n">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">F_POWER := a * EXPT(X, N);
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>85a57386-bfa6-4931-9c6c-eb979f6d0b8d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="F_QUAD" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="A">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="B">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="C">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">F_QUAD := A * X * X + B * X + C;

(* revision history

hm	1. sep. 2006
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>12208c1f-3476-4598-abd5-bdb7cc90cd04</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FRMP_B" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="START">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="DIR">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TD">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="TR">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF TD &lt; TR THEN
	FRMP_B := MIN(DWORD_TO_BYTE(SHL(TIME_TO_DWORD(TD), 8) / TIME_TO_DWORD(TR)), SEL(DIR, START, BYTE#255 - START));
	IF DIR THEN
		FRMP_B := START + FRMP_B;
	ELSE
		FRMP_B := START - FRMP_B;
	END_IF;
ELSE
	FRMP_B := SEL(DIR, 0, 255);
END_IF;


(* revision history

17. feb. 2011	rev 1.0
	new module

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e7ba3834-8ec0-4dbc-b0c7-b60c3d6e310f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_AVG" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="32" />
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="AVG">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="buff">
              <type>
                <derived name="DELAY" />
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* limit n to a max of 32 because delay can do max 32 cycles *)
buff.N := LIMIT(0, N, 32);

IF NOT init OR rst THEN
	FOR i := 1 TO N DO
		buff(in := in);
	END_FOR;
	avg := in;
	init := TRUE;
ELSIF E THEN
	buff(in := in);
	avg := avg + (in - buff.out ) / INT_TO_REAL(N);
END_IF;

(* revision history

hm	7. jan. 2007	rev 1.1
	chaged rst logic to load the buffer with the actual input value instead of 0.
	added en input to allow better control of signal flow
	added init to load the buffer with in at startup to avoid rampup at beginning.
	deleted unused variable cnt.

hm	14. jun. 2008	rev 1.2
	set default for input en = TRUE and N = 32

hm	10. oct. 2008	rev 1.3
	improved performance

hm	18. oct. 2008	rev 1.4
	changed input en to e for compatibility reasons

hm	10. mar. 2009	rev 1.5
	added type conversion for compatibility reasons

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>85efe17d-57b5-45b9-b67a-c615ec1a0500</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_MIN_MAX" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rst">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="mx">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="mn">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF rst OR NOT init THEN
	mn := in;
	mx := in;
	init := TRUE;
ELSIF in &lt; mn THEN mn := in;
ELSIF in &gt; mx THEN mx := in;
END_IF;</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>dde5ed4a-9a55-4798-ab29-15682de88316</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FT_RMP" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Rmp">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="KR">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="KF">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="out">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="busy">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="UD">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system time *)
tx := DWORD_TO_TIME(T_PLC_MS()) - last;

IF NOT init THEN
	init := TRUE;
	last := tx;
	tx := t#0s;
	out := in;
END_IF;
IF NOT rmp THEN
	out := in;
	busy := FALSE;
ELSIF out &gt; in THEN
	(* ramp down *)
	out := out - TIME_TO_REAL(tx) * 0.001 * KF;
	out := MAX(in, out);
ELSIF out &lt; in THEN
	(* ramp up *)
	out := out + TIME_TO_REAL(tx) * 0.001 * KR;
	out := MIN(in, out);
END_IF;

(* set busy and dir flags *)
IF out &lt; in THEN
	busy := TRUE;
	ud := TRUE;
ELSIF out &gt; in THEN
	busy := TRUE;
	ud := FALSE;
ELSE
	busy := FALSE;
END_IF;
last := last + tx;


(* revision history:

hm 8.10.2006			rev 1.1
	added ud output

hm 12. feb 2007		rev 1.2
	added init variable and corrected a possible startup problem

hm	17. sep 2007	rev 1.3
	replaced time() with t_plc_ms() for compatibility reasons

hm	25. jan 2008	rev 1.4
	performance improvements
	allow KR and KF to be 0
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>22f52915-2574-4cb1-9880-aa32a60b5b8b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LINEAR_INT" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="XY">
              <type>
                <array>
                  <dimension lower="1" upper="20" />
                  <dimension lower="0" upper="1" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="Pts">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*make sure n is bound within the array size *)
pts := MIN(pts,20);

(* calculate the linear segement interpolation *)
i := 2;
(* search for segment and calculate output
	below and above the defined segments we interpolate the last segment *)
WHILE (i &lt; pts) AND (XY[i,0] &lt; X) DO
	i := i + 1;
END_WHILE;

(* calculate the output value on the corresponding segment coordinates *)
LINEAR_INT := ((XY[i,1] - XY[i-1,1]) * X - XY[i,1] * XY[i-1,0] + XY[i-1,1] * XY[i,0]) / (XY[i,0] - XY[i-1,0]);

(* revision history
hm	7. oct 2007		rev 1.0
	original version

hm	27 dec 2007		rev 1.1
	changed code for better performance
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>dd850b5c-4e31-4d05-8282-79db572c40a9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="POLYNOM_INT" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="XY">
              <type>
                <array>
                  <dimension lower="1" upper="5" />
                  <dimension lower="0" upper="1" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="Pts">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="I">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="J">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*make sure n is bound within the array size *)
pts := MIN(pts, 5);

(* this part is only to calculate the polynom parameters, which are then stores in the Y array
	the array values, it is not needed during runtime, unless the parameters will change during runtime
	the remaining code without this setup code can be used within a function to calculate specific functions
	the content of the arrays is then used as constant values within the function *)

FOR i := 1 TO pts DO
	stop := i + 1;
   	FOR j := pts TO stop BY -1 DO
   		XY[j,1] := (XY[j,1] - XY[j-1,1]) / (XY[j,0] - XY[j-i,0]);
	END_FOR;
END_FOR;


(* this part is the actual calculation *)
POLYNOM_INT := 0.0;
FOR i := pts TO 1 BY -1 DO
       POLYNOM_INT := POLYNOM_INT * (X - XY[i,0]) + XY[i,1];
END_FOR;


(* revision history
hm	8. okt 2007	rev 1.0
	original version

hm	17. dec 2007	rev 1.1
	init makes no sense for a function

hm	22. feb 2008	rev 1.2
	improved performance

hm	10. mar. 2009	rev 1.3
	changed syntax of real constants to 0.0

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>711811c3-69f1-49d2-bc6c-820b83e41489</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GAMMA" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF x &gt; 0.0 THEN
	GAMMA := SQRT(math.PI2 / X) * EXPT(math.E_INV * (x + 1.0 / (12.0 * x - 0.1 / X)), X);
END_IF;


(* the stirling formula is not very accurate for small values of X
IF X &gt;=0 THEN GAMMA := SQRT(math.PI2 * X) * EXPT(X / math.E, X); END_IF;
*)





(* revision history
hm	10.12.2007	rev 1.0
	original version

hm	18. oct. 2008	rev 1.1
	using math constants

hm	26. oct. 2008	rev 1.2
	using new formula with better accuracy

hm	10. mar. 2009	rev 1.3
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>51ba54e1-72c8-4611-8c00-55f7f9e5fb77</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GAUSS" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="U">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="SI">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="temp">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="si_inv">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">temp := X - U;
si_inv := 1.0  / si;
GAUSS := EXP(Temp * Temp * si_inv * si_inv * - 0.5) * 0.39894228 * si_inv;



(* revision hisdtory
hm	6. apr. 2008	rev 1.0
	original version

hm	27. oct. 2008	rev 1.1
	optimized performance	

hm	10. mar. 2009	rev 1.2
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>563bc4da-bb34-4ff2-9372-d1308845ee33</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GAUSSCD" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="U">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="SI">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">GAUSSCD := (ERF((X - U) / (SI * 1.414213562)) + 1.0) * 0.5;



(* revision hisdtory
hm	6. apr. 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>3edd6f55-decb-4d5c-8295-6f1461810b6a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GCD" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="A">
              <type>
                <DINT />
              </type>
            </variable>
            <variable name="B">
              <type>
                <DINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="t">
              <type>
                <DINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF A = 0 THEN
	GCD := DINT_TO_INT(ABS(B));
ELSIF B = 0 THEN
	GCD := DINT_TO_INT(ABS(A));
ELSE
	A := ABS(A);
	B := ABS(B);
	GCD := 1;
	WHILE NOT(A.0 OR B.0) DO
		A := SHR(A,1);
		B := SHR(B,1);
		GCD := SHL(GCD,1);
	END_WHILE;
	WHILE A &gt; 0 DO
		IF NOT(A.0) THEN A := SHR(A,1);
		ELSIF NOT(B.0) THEN B := SHR(B,1);
		ELSE
			t:= SHR(ABS(A-B),1);
			IF A &lt; B THEN B := t; ELSE A := T; END_IF;
		END_IF;
	END_WHILE;
	GCD := GCD * DINT_TO_INT(B);
END_IF;


(* revision history
hm	19. jan. 2011	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>58755f69-969d-488c-b29c-fa01bf1ee3c7</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GDF" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X = 0.0 THEN
	GDF := 0.0;
ELSIF X &gt; 15.0 THEN
	GDF := math.PI05;
ELSIF X &lt; -15.0 THEN
	GDF := -math.PI05;
ELSE
	GDF := ATAN(EXP(X)) * 2.0 - math.PI05;
END_IF;

(* revision history
hm	27. apr. 2008	rev 1.0
	original version

hm	18. oct. 2008	rev 1.1
	using math constants

hm	10. mar. 2009	rev 1.2
	real constants updated to new systax using dot

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>96b7292e-f8eb-4c48-9be4-ccf7b4bc68aa</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CIRCLE_A" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="rx">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="ax">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">circle_A := Rx * RX * 8.726646E-3 * Ax;

(* revision histroy
hm	16. oct 2007	rev 1.0
	original version

hm	4. dec 2007		rev 1.1
	changed code for better performance

hm	22. feb 2008	rev 1.2
	improved performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0283235f-42fa-485b-8db5-e82270c50173</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CIRCLE_C" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="Rx">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Ax">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">circle_C := 1.7453293E-2 * Rx * Ax;

(* revision histroy
hm	16. oct 2007	rev 1.0
	original version

hm	22. feb 2008	rev 1.1
	improved performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5a101643-0e61-4f84-bf36-79779980b596</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CIRCLE_SEG" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="RX">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="HX">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF RX &gt; 0.0 THEN
	CIRCLE_SEG := 2.0 * ACOS(1.0 - LIMIT(0.0, HX / RX, 2.0));
	CIRCLE_SEG := (CIRCLE_SEG - SIN(CIRCLE_SEG)) *RX * RX / 2.0;
END_IF;


(* revision histroy
hm	10. mar 2010	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d75c0602-d287-4dad-a8b5-9c2fb48a3806</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CONE_V" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="rx">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="hx">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">cone_V := 1.047197551 * RX * RX * hx;

(* revision histroy
hm	17. oct 2007	rev 1.0
	original version

hm	4. dec 2007		rev 1.1
	changed code for better performance

hm	22. feb 2008	rev 1.2
	changed code for better performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>02674c20-c46e-48f3-9e48-836c4dcc29f2</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ELLIPSE_A" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="R1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="R2">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">ELLIPSE_A := math.PI * R1 * R2;

(* revision histroy
hm	16. oct 2007	rev 1.0
	original version

hm	18. oct. 2008	rev 1.1
	using math constants
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>3c33d578-78e2-470c-b50c-86277dfc0dac</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ELLIPSE_C" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="R1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="R2">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">ELLIPSE_C := math.PI * (3.0 * (R1+R2) - SQRT((3.0 * r1 + R2) * (3.0 * r2 + r1)));

(* revision histroy
hm	16. oct 2007	rev 1.0
	original version

hm	18. oct. 2008	rev 1.1
	using math constants

hm	10. mar. 2009	rev 1.2
	changed syntax of real constants to 0.0

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2aba8a83-152a-49c5-83ca-cf8b018354af</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SPHERE_V" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="rx">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">sphere_V := 4.188790205 * Rx * RX * RX;

(* revision histroy
hm	16. oct 2007	rev 1.0
	original version

hm	4. dec 2007		rev 1.1
	changed code for better performance

hm	22. feb 2008		rev 1.2
	changed code for better performance
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b6fe8474-5294-4b02-859c-0a6e90d20e44</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TRIANGLE_A" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="S1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="A">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="S2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="S3">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF A = 0.0 THEN
	TRIANGLE_A := SQRT((s1+s2+S3) * (s1+s2-S3) * (S2+S3-S1) * (S3+S1-S2)) * 0.25;
ELSE
	TRIANGLE_A := S1 * S2 * SIN(RAD(A)) * 0.5;
END_IF;

(* revision histroy
hm	16. oct 2007	rev 1.0
	original version

hm	22. feb 2008	rev 1.1
	improved performance

hm	10. mar. 2009	rev 1.2
	changed syntax of real constants to 0.0

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e449a57d-6bfc-4715-b6b4-fd3296fa05d9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GOLD" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">GOLD := (X + SQRT(X*X + 4.0)) * 0.5;


(* revision history
hm	27. apr. 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>606e6288-6161-4378-9baa-2941366338b6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="HYPOT" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="Y">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">HYPOT := SQRT(x*x + y*y);


(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1f81729d-28bc-41cc-8d12-d295653d70ec</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="INC" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="D">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="M">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">INC := (X + D + M + 1) MOD (M + 1);

(* revision history
hm	7. feb 2007		REV 1.0
	original version

hm	15. jan 2008	rev 1.1
	allow for neagtive increment

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d38c935e-ad10-4431-ba3b-fa091fa8e26a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="INC1" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X &gt;= N - 1 THEN
	INC1 := 0;
ELSE
	INC1 := X + 1;
END_IF;



(* revision history
hm	13. oct. 2008	rev 1.0
	original version

hm	22. oct. 2008	rev 1.1
	added statement to return value for compatibility reasons

hm	23. feb. 2009	rev 1.2
 	when inc1 is called with X &gt;= N inc will continue with 0
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>30f24e4f-8759-4098-a5b5-e0a19cb269b2</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="INC2" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="D">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="L">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="U">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="tmp">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tmp := U - L + 1;
INC2 := (X + D - L + tmp) MOD tmp + L;



(* revision history
hm	29. jun. 2008		REV 1.0
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5c6b2e2c-a5a9-46ae-a170-d0005d9c856c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="INV" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X &lt;&gt; 0.0 THEN INV := 1.0 / X; END_IF;




(* revision history
hm	26. oct. 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1829c59e-4b8d-438c-b56d-28664524c405</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LAMBERT_W" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="w">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="we">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="w1e">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="last">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="ewx">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* check for valid input and return -1000 if too low *)
IF x &lt; -0.367879441171442 THEN
	LAMBERT_W := -1000.0;
	RETURN;
(* return 0 if x = 0 *)
ELSIF x = 0.0 THEN
	RETURN;
(* first an estimate is calculated *)
ELSIF x &lt;= 500.0 THEN
	w := LN(x + 1.0);
	w := 0.665 * (1.0 + 0.0195 * w) * w + 0.04;
ELSE
	w := LN(x - 4.0) - (1.0 - 1.0/LN(x)) * LN(LN(x));
END_IF;
(* use estimate to calculate exact result *)
FOR i := 0 TO 5 DO
	ewx := EXP(w);
	we := w * ewx - x;
	w1e := (w+1.0) * ewx;
	last := REAL_TO_DW(w) AND 16#FFFF_FFFC;
	w := w - (we / (w1e - (w+2.0) * we / (2.0 * w + 2.0)));
	IF (REAL_TO_DW(w) AND 16#FFFF_FFFC) = last THEN EXIT; END_IF;
END_FOR;
LAMBERT_W := w;


(* revision hisdtory
hm	26. oct. 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e950e5f8-c669-42db-8af9-6c5efe4cb81a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LANGEVIN" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X = 0.0 THEN
	LANGEVIN := 0.0;
ELSE
	LANGEVIN := COTH(X) - 1.0 / X;
END_IF;

(* revision history
hm	10.12.2007	rev 1.0
	original version

hm	11. mar 2008	rev 1.1
	changed formula to avoid problems when x = 0

hm	10. mar. 2009	rev 1.2
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>9957e86e-d774-42ea-9524-04e070cdbb70</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MAX3" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="in1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in3">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF in1 &gt;= in2 AND in1 &gt;= in3 THEN
	max3 := in1;
ELSIF in2 &gt;= in1 AND in2 &gt;= in3 THEN
	max3 := in2;
ELSE
	max3 := in3;
END_IF;</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>6009dd6e-6204-417a-acf3-a843e61fea66</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MID3" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="in1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in3">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF (in1 &lt;= in2) AND (in1 &gt;= in3) OR (in1 &gt;= in2) AND (in1 &lt;= in3) THEN
	mid3 := in1;
ELSIF (in2 &lt;= in1) AND (in2 &gt;= in3) OR (in2 &gt;= in1) AND (in2 &lt;= in3) THEN
	mid3 := in2;
ELSE
	mid3 := in3;
END_IF;

(*
hm	1.1.2007	rev 1.1
	rewrote the function for better performance

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>6a3cc001-689d-468b-9212-3f316aeae6d8</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MIN3" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="in1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in3">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF in1 &lt;= in2 AND in1 &lt;= in3 THEN
	min3 := in1;
ELSIF in2 &lt;= in1 AND in2 &lt;= in3 THEN
	min3 := in2;
ELSE
	min3 := in3;
END_IF;</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2f199a4d-5b24-419e-b7dd-20040a3b1352</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MODR" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="DIVI">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF divi = 0.0 THEN
	MODR := 0.0;
ELSE
	MODR := in - DINT_TO_REAL(FLOOR2(in / divi)) * divi;
END_IF;

(* revision history

hm	4. aug.2006		rev 1.0

hm	28. jan.2007	rev 1.1
	modr(x,0) will deliver the result 0

hm	21. mar 2008	rev 1.2
	use D_trunc for compatibility reasons

hm	4. apr. 2008	rev 1.3
	added type conversion to avoid warnings under codesys 3.0

hm	31. oct. 2008	rev 1.4
	changed algorithm to the more common version using floor instead of TRUNC

hm	10. mar. 2009	rev 1.5
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>35bc17e3-a9e1-4c36-acdf-f533c505b518</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MUL_ADD" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="O">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MUL_ADD := X * K + O;

(* revision history
hm	28. feb 2007
	original version

hm	11.nov 2007		rev 1.1
	deleted preset values for K and O this makes no sense for a function

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8602f0e9-4d51-4e53-82b4-0877e9c06a08</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="NEGX" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">NEGX := -X;




(* revision history
hm	26. oct. 2008	rev 1.0
	original version


*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4a5d16d2-b7a9-4ccc-a10f-784b2f84d596</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="RAD" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="deg">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">RAD := MODR(0.0174532925199433 * DEG, math.PI2);

(* revision history
hm	4. aug 2006		rev 1.0
	original version

hm 	16. oct 2007	rev 1.1
	added modr statement which prohibits rad to become bigger than 2PI

hm	18. oct 2008	rev 1.2
	using math constants

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1a8c2266-b52b-4b42-af91-6f7dbe33094a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="RDM" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="last">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="tn">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="tc">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tn := T_PLC_MS();
tc := BIT_COUNT(tn);
tn.31 := tn.2;
tn.30 := tn.5;
tn.29 := tn.4;
tn.28 := tn.1;
tn.27 := tn.0;
tn.26 := tn.7;
tn.25 := tn.6;
tn.24 := tn.3;
tn := ROL(tn,BIT_COUNT(tn)) OR 16#80000001;
tn := tn MOD 71474513 + INT_TO_DWORD(tc + 77);
RDM := FRACT(DWORD_TO_REAL(tn) / 10000000.0 * (math.E - LIMIT(0.0,last,1.0)));


(*
pt := ADR(temp);
pt^ := (T_PLC_MS() AND 16#007FFFFF) OR 16#3D000000;
RDM := fract(modR(temp*e+pi1, PI1-last) + modR(temp*PI1+e + last,e-last));
*)

(* revision history
hm		16. jan 2007		rev 1.0
	original version

hm		11. nov 2007		rev 1.1
	changed time() into t_plc_ms()

hm		20. nov 2007		rev 1.2
	changed code of temp calculation to avoid overflow in modr due to resuclt would not fit DINT for high timeer values

hm		5. jan 2008		rev 1.3
	changed calculation of temp to avoid problem with high values of t_plc_ms

hm		2. feb 2008		rev 1.4
	changed algorithm to avoind non iec functions and guarantee more randomness

hm	10. mar. 2008		rev 1.5
	make sure last will be between 0 and 1 to avoid invalid results

hm	16. mar. 2008		rev 1.6
	added conversion for tc to avoid warnings under codesys 3.0

hm	18. may. 2008		rev 1.7
	changed constant E to E1

hm	18. oct. 2008		rev 1.8
	using math constants

hm	10. mar. 2009		rev 1.9
	real constants updated to new systax using dot

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a5f42dae-e7da-4980-a264-3f13b3ba9f6b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="RDM2" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="last">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="low">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="high">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">RDM2 := TRUNC_INT(RDM(FRACT(last * math.PI)) * (high - low + 1)) + low;

(* revision history
hm		29. feb 2008		rev 1.0
	original version

hm		18. oct. 2008		rev 1.1
	using math constants

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7ca8d0d9-50cb-4793-b8d7-ba1e94d9d681</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="RDMDW" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="last">
              <type>
                <DWORD />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="RX">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="M">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">M := BIT_COUNT(last);
RX := RDM(FRACT(M * math.PI));
RDMDW := SHL(REAL_TO_DWORD(rx*65535),16);
RX := RDM(FRACT(M * math.E));
RDMDW := RDMDW OR (REAL_TO_DWORD(rx*65535) AND 16#0000FFFF);



(* revision history
hm		14. mar 2008		rev 1.0
	original version

hm		18. may. 2008		rev 1.1
	changed constant E to E1

hm		18. oct. 2008		rev 1.2
	using math constants

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7f7a9795-181c-4d18-b93f-5226bcd39f24</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="REAL_TO_FRAC" pouType="function">
        <interface>
          <returnType>
            <derived name="FRACTION" />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> input value </xhtml>
              </documentation>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> higest number of denominator </xhtml>
              </documentation>
            </variable>
          </inputVars>
          <localVars>
            <variable name="m">
              <type>
                <array>
                  <dimension lower="0" upper="1" />
                  <dimension lower="0" upper="1" />
                  <baseType>
                    <DINT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="t">
              <type>
                <DINT />
              </type>
            </variable>
            <variable name="ai">
              <type>
                <DINT />
              </type>
            </variable>
            <variable name="sign">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">m[0,0] := 1;
m[1,0] := 0;
m[0,1] := 0;
m[1,1] := 1;

sign := SIGN_R(X);
X := ABS(X);
WHILE ABS(m[1,0]) &lt;= N AND ABS(m[1,1]) &lt;= N DO
	ai := REAL_TO_DINT(x);
	t := m[0,0] * ai + m[0,1];
	m[0,1] := m[0,0];
	m[0,0] := t;
	t := m[1,0] * ai + m[1,1];
	m[1,1] := m[1,0];
	m[1,0] := t;
	IF X = DINT_TO_REAL(ai) THEN EXIT; ELSE X := 1.0 / (x - DINT_TO_REAL(ai)); END_IF;
END_WHILE;

(* choose the correct duplet from matrix *)
IF ABS(m[1,0]) &gt; N THEN
	REAL_TO_FRAC.NUMERATOR := DINT_TO_INT(ABS(m[0,1]));
	REAL_TO_FRAC.DENOMINATOR := DINT_TO_INT(ABS(m[1,1]));
ELSE
	REAL_TO_FRAC.NUMERATOR := DINT_TO_INT(ABS(m[0,0]));
	REAL_TO_FRAC.DENOMINATOR := DINT_TO_INT(ABS(m[1,0]));
END_IF;

(* correct sign if X was negative *)
IF sign THEN REAL_TO_FRAC.NUMERATOR := -REAL_TO_FRAC.numerator; END_IF;

(*
    }
    startx = x = atof(av[1]);
    maxden = atoi(av[2]);

    /* initialize matrix */
    m[0][0] = m[1][1] = 1;
    m[0][1] = m[1][0] = 0;

    /* loop finding terms until denom gets too big */
    while (m[1][0] *  ( ai = (long)x ) + m[1][1] &lt;= maxden) {
	long t;
	t = m[0][0] * ai + m[0][1];
	m[0][1] = m[0][0];
	m[0][0] = t;
	t = m[1][0] * ai + m[1][1];
	m[1][1] = m[1][0];
	m[1][0] = t;
        if(x==(double)ai) break;     // AF: division by zero
	x = 1/(x - (double) ai);
        if(x&gt;(double)0x7FFFFFFF) break;  // AF: representation failure
    } 

    /* now remaining x is between 0 and 1/ai */
    /* approx as either 0 or 1/m where m is max that will fit in maxden */
    /* first try zero */
    printf("%ld/%ld, error = %e\n", m[0][0], m[1][0],
	   startx - ((double) m[0][0] / (double) m[1][0]));

    /* now try other possibility */
    ai = (maxden - m[1][1]) / m[1][0];
    m[0][0] = m[0][0] * ai + m[0][1];
    m[1][0] = m[1][0] * ai + m[1][1];
    printf("%ld/%ld, error = %e\n", m[0][0], m[1][0],
	   startx - ((double) m[0][0] / (double) m[1][0]));
}




*)

(* revision history
hm		19. jan. 2011	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>6cb1d7ea-2b8f-46cf-b229-5977c0f86ec6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="RND" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="M">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X = 0.0 THEN
	RND := 0.0;
ELSE
	M := EXPN(10.0,N - CEIL(LOG(ABS(X))));
	RND := DINT_TO_REAL(REAL_TO_DINT(X * M)) / M;
END_IF;


(* revision history
hm	11. mar 2008	rev 1.0
	original version

hm	26. oct. 2008	rev 1.1
	code optimization

hm	10. mar. 2009	rev 1.2
	real constants updated to new systax using dot																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											

*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>679fea00-f021-4223-82b6-13e10fdfbfeb</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ROUND" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">X := setup.DECADES[LIMIT(0,N,8)];
ROUND := DINT_TO_REAL(REAL_TO_DINT(in * X)) / X;



(* revision history
hm	1. sep 2006	rev 1.0
	original version

hm	2. dec 2007	rev 1.1
	changed code for better performance

hm	8. jan 2008	rev 1.2
	further improvement in performance

hm 11. mar. 2008	rev 1.3
	corrected an error with negative numbers
	use real_to_dint instead of trunc

hm	16. mar 2008	rev 1.4
	added type conversion to avoid warning under codesys 3.0

hm	25. oct. 2008	rev 1.5
	new code using global constants decades
*)



</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f6822480-1637-4788-a720-d476ce6cd327</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SGN" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X &gt; 0 THEN
	SGN := 1;
ELSIF X &lt; 0 THEN
	SGN := -1;
ELSE
	SGN := 0;
END_IF;



(* revision histroy
hm	16. oct 2007	rev 1.0
	original version

hm	11. nov 2007	rev 1.1
	changed type of function from real to int

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b07d1e90-1566-4e21-b3d4-fbc86ae3ccad</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SIGMOID" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X &gt; 20.0 THEN
	SIGMOID := 1.0;
ELSIF x &lt; -85.0 THEN
	SIGMOID := 0.0;
ELSE
	SIGMOID := 1.0 / (1.0 + EXP(-X));
END_IF;


(* revision history
hm	10.12.2007		rev 1.0
	original version

hm	11. mar. 2008		rev 1.1
	extended range of valid inputs to +inv / -inv

hm 10. mar. 2009		rev 1.2
	real constants updated to new systax using dot																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>24cbc356-566d-46fe-b57a-9236856b1faf</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SIGN_I" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DINT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SIGN_I := in.31;

(* revision history
hm 3.3.2007	rev 1.1
	changed method of function for better compatibility to other systems

hm	1.12.2007	rev 1.2
	changed code to improve performance

hm	27. oct. 2008	rev 1.3
	changed type of input to dint

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>bd27f7b9-0d21-43e9-978c-daf8576a630f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SIGN_R" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SIGN_R := in &lt; 0.0;


(* revision history
hm 19.1.2007	rev 1.1
	changed method of function for better compatibility to other systems

hm	1.12.2007	rev 1.2
	changed code to improve performance

hm	14. jun. 2008	rev 1.3
	improved performace

hm 10. mar. 2009	rev 1.4
	real constants updated to new systax using dot																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>428af942-7d0b-4494-9ca8-6bd7a2d81151</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SINC" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X = 0.0 THEN
	SINC := 1.0;
ELSE
	SINC := SIN(x) / x;
END_IF;


(* revision histroy
hm	11. mar. 2008	rev 1.0
	original version

hm	1.12.2007	rev 1.1
	changed code to improove performance

hm 10. mar. 2009	rev 1.2
	real constants updated to new systax using dot																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d8cf9457-eade-49d4-8339-32549da25f0e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SINH" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF ABS(x) &lt; 2E-3 THEN
	SINH := X;
ELSE
	SINH := (EXP(x) - EXP(-x)) * 0.5;
END_IF;


(* revision history
hm	12.1.2007	rev 1.0
	original version

hm	1.12.2007	rev 1.1
	changed code to improve performance

hm	5. jan 2008	rev 1.2
	further performance improvement

hm	11. mar 2008	rev 1.3
	improved accuracy around 0

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>20bcea52-28a3-402a-881c-55a23fcd9d46</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SQRTN" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF N &gt; 0 THEN
	SQRTN := EXP(LN(x) / INT_TO_REAL(n));
ELSE
	SQRTN := 0.0;
END_IF;


(* revision history
hm		12 jan 2007	rev 1.0
	original version

hm		2. dec 2007	rev 1.1
	changed code for better performance

hm		11. mar 2008	rev 1.2
	added result 0 for compatibility reasons

hm 10. mar. 2009	rev 1.3
	added type conversions for compatibility reasons																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>638618a1-288b-4b4d-9f13-e8d8a29d58ee</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TANC" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X = 0.0 THEN
	TANC := 1.0;
ELSE
	TANC := TAN(x) / x;
END_IF;


(* revision histroy
hm	23. oct. 2008	rev 1.0
	original version

hm 10. mar. 2009	rev 1.1
	real constants updated to new systax using dot																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0f979a51-baa6-4540-a007-456fee1cd20e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TANH" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF X &gt; 20.0 THEN
	TANH := 1.0;
ELSIF X &lt; -20.0 THEN
	TANH := -1.0;
ELSE
	TANH := 1.0 - 2.0 / (EXP(2.0 * x) + 1.0);
END_IF;


(* revision hisdtory
hm		12.1.2007		rev 1.0
	original version

hm		1.12.2007		rev 1.1
	changed code to improve performance

hm		10. mar 2008	rev 1.2
	corrected an error in formula
	extended range of valid inputs to +/- INV

hm 10. mar. 2009	rev 1.3
	real constants updated to new systax using dot																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1b1b173c-da34-4295-814c-56ef0df6ba3a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="V3_ABS" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="A">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">V3_ABS := SQRT(A.X * A.X + A.Y * A.Y + A.Z * A.Z);


(* revision history
hm		11 dec 2007	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4c4168ed-c6e4-4799-865b-396a5a0a429b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="V3_ADD" pouType="function">
        <interface>
          <returnType>
            <derived name="vector_3" />
          </returnType>
          <inputVars>
            <variable name="A">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
            <variable name="B">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">V3_ADD.X := A.X + B.X;
V3_ADD.Y := A.Y + B.Y;
V3_ADD.Z := A.Z + B.Z;



(* revision history
hm		11 dec 2007	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a99fd260-2700-4144-99c2-22e63154ab02</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="V3_ANG" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="A">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
            <variable name="B">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="d">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">d := V3_ABS(A) * V3_ABS(B);
IF d &gt; 0 THEN
	V3_ANG := ACOS(LIMIT(-1.0, V3_DPRO(A, B) / d,1.0));
END_IF;

(* revision history
hm	11. dec. 2007	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	changed syntax of real constants to 0.0

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1185fc76-d11e-447b-ac69-52bcd69a8270</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="V3_DPRO" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="A">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
            <variable name="B">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">V3_DPRO := A.X * B.X + A.Y * B.Y + A.Z * B.Z;


(* revision history
hm		11 dec 2007	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8a35c041-8f88-4bfa-acf3-744a8a64c1fe</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="V3_NORM" pouType="function">
        <interface>
          <returnType>
            <derived name="vector_3" />
          </returnType>
          <inputVars>
            <variable name="A">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="la">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">la := V3_ABS(A);
IF la &gt; 0.0 THEN
	V3_NORM := V3_SMUL(A, 1.0 / la);
END_IF;

(* revision history
hm	11 dec 2007	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	changed syntax of real constants to 0.0

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c3161ed0-222c-40ec-a6ea-10f4fad9a501</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="V3_NUL" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="A">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">V3_NUL := A.X = 0.0 AND A.Y = 0.0 AND A.Z = 0.0;



(* revision history
hm	12 dec 2007	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	changed syntax of real constants to 0.0

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c9fa947d-6727-4ba3-8725-67a2534403bb</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="V3_PAR" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="A">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
            <variable name="B">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">V3_PAR := V3_ABS(V3_XPRO(A, B)) = 0.0;



(* revision history
hm	11 dec 2007	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	changed syntax of real constants to 0.0

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>03968b5e-aef4-4735-8f43-79cb5f28a1e5</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="V3_REV" pouType="function">
        <interface>
          <returnType>
            <derived name="vector_3" />
          </returnType>
          <inputVars>
            <variable name="A">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">V3_REV.X := -A.X;
V3_REV.Y := -A.Y;
V3_REV.Z := -A.Z;



(* revision history
hm		11 dec 2007	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a2cc4a0e-444c-44b5-a7fa-3754c673b939</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="V3_SMUL" pouType="function">
        <interface>
          <returnType>
            <derived name="vector_3" />
          </returnType>
          <inputVars>
            <variable name="A">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
            <variable name="M">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">V3_SMUL.X := A.X * M;
V3_SMUL.Y := A.Y * M;
V3_SMUL.Z := A.Z * M;



(* revision history
hm		11 dec 2007	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1caeec37-a63e-4797-b962-0c2bb6b89ac0</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="V3_SUB" pouType="function">
        <interface>
          <returnType>
            <derived name="vector_3" />
          </returnType>
          <inputVars>
            <variable name="A">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
            <variable name="B">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">V3_SUB.X := A.X - B.X;
V3_SUB.Y := A.Y - B.Y;
V3_SUB.Z := A.Z - B.Z;



(* revision history
hm		11 dec 2007	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>20aaba2a-f854-4b5d-82ce-fc797b89ad09</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="V3_XANG" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="A">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="la">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">la := V3_ABS(a);
IF la &gt; 0.0 THEN
	V3_XANG := ACOS(A.X / la);
END_IF;

(* revision history
hm	11 dec 2007	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	changed syntax of real constants to 0.0

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>05c666c7-0226-4a30-b2fc-486165ae33f2</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="V3_XPRO" pouType="function">
        <interface>
          <returnType>
            <derived name="vector_3" />
          </returnType>
          <inputVars>
            <variable name="A">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
            <variable name="B">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">V3_XPRO.X := A.Y * B.Z - A.Z * B.Y;
V3_XPRO.Y := A.Z * B.X - A.X * B.Z;
V3_XPRO.Z := A.X * B.Y - A.Y * B.X;



(* revision history
hm		11 dec 2007	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>790b6f34-ef4d-410b-a1d1-1c5fa23b0d5d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="V3_YANG" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="A">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="la">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">la := V3_ABS(a);
IF la &gt; 0.0 THEN
	V3_YANG := ACOS(A.Y / la);
END_IF;

(* revision history
hm	11 dec 2007	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	changed syntax of real constants to 0.0

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f0f0961d-2338-46d8-81c5-3a9991d8d852</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="V3_ZANG" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="A">
              <type>
                <derived name="Vector_3" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="la">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">la := V3_ABS(a);
IF la &gt; 0.0 THEN
	V3_ZANG := ACOS(A.Z / la);
END_IF;

(* revision history
hm	11 dec 2007	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	changed syntax of real constants to 0.0

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5c38258e-9cc9-4503-a532-2ffbf387264e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="WINDOW" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="low">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="high">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">WINDOW := in &lt; high AND in &gt; low;


(* revision history
hm	22.1.2007	rev 1.1
	changed the order of inputs to low, in, high

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4427f4b9-f45a-4a5d-b376-52a5b09e9543</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="WINDOW2" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="low">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="in">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="high">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">WINDOW2 := in &lt;= high AND in &gt;= low;


(* revision history
hm	31.10.2007	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c9836c29-b419-461e-8c1e-58f0e6fbea24</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ESR_COLLECT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="ESR_0">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <derived name="esr_data" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="ESR_1">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <derived name="esr_data" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="ESR_2">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <derived name="esr_data" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="ESR_3">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <derived name="esr_data" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="ESR_4">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <derived name="esr_data" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="ESR_5">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <derived name="esr_data" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="ESR_6">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <derived name="esr_data" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="ESR_7">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <derived name="esr_data" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="rst">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <outputVars>
            <variable name="ESR_OUT">
              <type>
                <array>
                  <dimension lower="0" upper="31" />
                  <baseType>
                    <derived name="esr_data" />
                  </baseType>
                </array>
              </type>
            </variable>
          </outputVars>
          <localVars constant="true">
            <variable name="max_in">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="3" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> max limit of input array </xhtml>
              </documentation>
            </variable>
            <variable name="max_out">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="32" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> number of elements in array </xhtml>
              </documentation>
            </variable>
          </localVars>
          <localVars>
            <variable name="cnt">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="-1" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF rst OR cnt &lt; 0 THEN
	pos := -1;
ELSE
	FOR cnt := 0 TO max_in DO
	IF esr_0[cnt].typ &gt; 0 THEN pos := INC1(pos, max_out); esr_out[pos] := esr_0[cnt]; END_IF;
	IF esr_1[cnt].typ &gt; 0 THEN pos := INC1(pos, max_out); esr_out[pos] := esr_1[cnt]; END_IF;
	IF esr_2[cnt].typ &gt; 0 THEN pos := INC1(pos, max_out); esr_out[pos] := esr_2[cnt]; END_IF;
	IF esr_3[cnt].typ &gt; 0 THEN pos := INC1(pos, max_out); esr_out[pos] := esr_3[cnt]; END_IF;
	IF esr_4[cnt].typ &gt; 0 THEN pos := INC1(pos, max_out); esr_out[pos] := esr_4[cnt]; END_IF;
	IF esr_5[cnt].typ &gt; 0 THEN pos := INC1(pos, max_out); esr_out[pos] := esr_5[cnt]; END_IF;
	IF esr_6[cnt].typ &gt; 0 THEN pos := INC1(pos, max_out); esr_out[pos] := esr_6[cnt]; END_IF;
	IF esr_7[cnt].typ &gt; 0 THEN pos := INC1(pos, max_out); esr_out[pos] := esr_7[cnt]; END_IF;
   END_FOR;
END_IF;


(* revision history
hm	26.jan 2007	rev 1.0
	original version

hm	8. dec 2007	rev 1.1
	added reset input

ks	27. oct. 2008	rev 1.2
	optimized code for performance

ks	12. nov. 2009	rev 1.3
	output pos was not pointing to last value	

hm	1. dec. 2009	rev 1.4
	changed pos to be I/O
	reduced output array size to 32 elements
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>279626ba-04a9-40fb-b08e-316bd1457a46</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ESR_MON_B8" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="s0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="s1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="s2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="s3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="s4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="s5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="s6">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="s7">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="DT_in">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="a0">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a1">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a2">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a3">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a4">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a5">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a6">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a7">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="ESR_Flag">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="ESR_Out">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <derived name="esr_data" />
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="x0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="x1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="x2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="x3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="x4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="x5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="x6">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="x7">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system timer *)
tx := DWORD_TO_TIME(T_PLC_MS());

ESR_Flag := FALSE;
esr_out[3].typ := 0;
esr_out[2].typ := 0;
esr_out[1].typ := 0;
esr_out[0].typ := 0;
cnt := 0;


(* check if inputs have chaged and fill buffer *)
IF s0 &lt;&gt; X0 THEN
	esr_out[cnt].typ := 10 + BOOL_TO_BYTE(s0);
	esr_out[cnt].adress := a0;
	esr_out[cnt].DS := DT_in;
	esr_out[cnt].TS := TX;
	X0 := S0;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF s1 &lt;&gt; X1 THEN
	esr_out[cnt].typ := 10 + BOOL_TO_BYTE(s1);
	esr_out[cnt].adress := a1;
	esr_out[cnt].DS := DT_in;
	esr_out[cnt].TS := TX;
	X1 := S1;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF s2 &lt;&gt; X2 THEN
	esr_out[cnt].typ := 10 + BOOL_TO_BYTE(s2);
	esr_out[cnt].adress := a2;
	esr_out[cnt].DS := DT_in;
	esr_out[cnt].TS := TX;
	X2 := S2;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF s3 &lt;&gt; X3 THEN
	esr_out[cnt].typ := 10 + BOOL_TO_BYTE(s3);
	esr_out[cnt].adress := a3;
	esr_out[cnt].DS := DT_in;
	esr_out[cnt].TS := TX;
	X3 := S3;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF s4 &lt;&gt; X4 AND cnt &lt; 4 THEN
	esr_out[cnt].typ := 10 + BOOL_TO_BYTE(s4);
	esr_out[cnt].adress := a4;
	esr_out[cnt].DS := DT_in;
	esr_out[cnt].TS := TX;
	X4 := S4;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF s5 &lt;&gt; X5  AND cnt &lt; 4 THEN
	esr_out[cnt].typ := 10 + BOOL_TO_BYTE(s5);
	esr_out[cnt].adress := a5;
	esr_out[cnt].DS := DT_in;
	esr_out[cnt].TS := TX;
	X5 := S5;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF s6 &lt;&gt; X6  AND cnt &lt; 4 THEN
	esr_out[cnt].typ := 10 + BOOL_TO_BYTE(s6);
	esr_out[cnt].adress := a6;
	esr_out[cnt].DS := DT_in;
	esr_out[cnt].TS := TX;
	X6 := S6;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF s7 &lt;&gt; X7  AND cnt &lt; 4 THEN
	esr_out[cnt].typ := 10 + BOOL_TO_BYTE(s7);
	esr_out[cnt].adress := a7;
	esr_out[cnt].DS := DT_in;
	esr_out[cnt].TS := TX;
	X7 := S7;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;

(* revision history
hm	26. jan 2007	rev 1.0
	original version

hm	17. sep 2007	rev 1.1
	replaced time() with T_PLC_MS() for compatibility reasons

hm	22. oct. 2008	rev 1.2
	optimized code

hm	1.dec. 2009	rev 1.3
	changed esr_out to be I/O

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8e8e215a-4fb1-45c7-9e65-b246edb68189</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ESR_MON_R4" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="R0">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="R1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="R2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="R3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="DT_in">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="a0">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a1">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a2">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a3">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="s0">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="s1">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="s2">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="s3">
              <type>
                <REAL />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="ESR_Flag">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="ESR_Out">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <derived name="esr_data" />
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="p0">
              <type>
                <pointer>
                  <baseType>
                    <DWORD />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="p1">
              <type>
                <pointer>
                  <baseType>
                    <DWORD />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="p2">
              <type>
                <pointer>
                  <baseType>
                    <DWORD />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="p3">
              <type>
                <pointer>
                  <baseType>
                    <DWORD />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="x0">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="x1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="x2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="x3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system timer *)
tx := DWORD_TO_TIME(T_PLC_MS());
P0 := ADR(R0);
P1 := ADR(R1);
P2 := ADR(R2);
P3 := ADR(R3);

ESR_Flag := FALSE;
esr_out[3].typ := 0;
esr_out[2].typ := 0;
esr_out[1].typ := 0;
esr_out[0].typ := 0;
cnt := 0;

(* check if inputs have chaged and fill buffer *)
IF DIFFER(R0,  X0, S0) THEN
	esr_out[cnt].typ := 20;
	esr_out[cnt].adress := a0;
	esr_out[cnt].DS := DT_in;
	esr_out[cnt].TS := TX;
	esr_out[cnt].data[0] := Byte_of_Dword(P0^,0);
	esr_out[cnt].data[1] := Byte_of_Dword(P0^,1);
	esr_out[cnt].data[2] := Byte_of_Dword(P0^,2);
	esr_out[cnt].data[3] := Byte_of_Dword(P0^,3);
	X0 := R0;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF differ(R1,  X1, S1) THEN
	esr_out[cnt].typ := 20;
	esr_out[cnt].adress := a1;
	esr_out[cnt].DS := DT_in;
	esr_out[cnt].TS := TX;
	esr_out[cnt].data[0] := Byte_of_Dword(P1^,0);
	esr_out[cnt].data[1] := Byte_of_Dword(P1^,1);
	esr_out[cnt].data[2] := Byte_of_Dword(P1^,2);
	esr_out[cnt].data[3] := Byte_of_Dword(P1^,3);
	X1 := R1;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF differ(R2,  X2, S2) THEN
	esr_out[cnt].typ := 20;
	esr_out[cnt].adress := a2;
	esr_out[cnt].DS := DT_in;
	esr_out[cnt].TS := TX;
	esr_out[cnt].data[0] := Byte_of_Dword(P2^,0);
	esr_out[cnt].data[1] := Byte_of_Dword(P2^,1);
	esr_out[cnt].data[2] := Byte_of_Dword(P2^,2);
	esr_out[cnt].data[3] := Byte_of_Dword(P2^,3);
	X2 := R2;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF DIFFER(R3,  X3, S3) THEN
	esr_out[cnt].typ := 20;
	esr_out[cnt].adress := a3;
	esr_out[cnt].DS := DT_in;
	esr_out[cnt].TS := TX;
	esr_out[cnt].data[0] := Byte_of_Dword(P3^,0);
	esr_out[cnt].data[1] := Byte_of_Dword(P3^,1);
	esr_out[cnt].data[2] := Byte_of_Dword(P3^,2);
	esr_out[cnt].data[3] := Byte_of_Dword(P3^,3);
	X3 := R3;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;


(* revision history
hm	26. jan 2007	rev 1.0
	original version

hm	17. sep. 2007		rev 1.1
	replaced time() with T_PLC_MS() for compatibility reasons

hm	8. dec. 2007		rev 1.2
	corrected an error while esr typ would not be set

hm	16. mar. 2008		rev 1.3
	deleted wrong conversion real_to_dword

hm	1. dec 2009		rev 1.4
	changed esr_out to be I/O

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>01eeb5bf-91ac-400e-a720-5adbee469367</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ESR_MON_X8" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="s0">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="s1">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="s2">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="s3">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="s4">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="s5">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="s6">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="s7">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="DT_in">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="Mode">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="3" />
              </initialValue>
            </variable>
            <variable name="a0">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a1">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a2">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a3">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a4">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a5">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a6">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="a7">
              <type>
                <string length="10" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="ESR_Flag">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="ESR_Out">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <derived name="esr_data" />
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="x0">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="x1">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="x2">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="x3">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="x4">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="x5">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="x6">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="x7">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system timer *)
tx := DWORD_TO_TIME(T_PLC_MS());

ESR_Flag := FALSE;
esr_out[3].typ := 0;
esr_out[2].typ := 0;
esr_out[1].typ := 0;
esr_out[0].typ := 0;
cnt := 0;


(* check if inputs have chaged and fill buffer *)
IF s0 &lt;&gt; X0 AND ((s0 &lt; 100) OR (S0 &gt; 99 AND S0 &lt; 200 AND mode &gt;= 2) OR (S0 &gt; 199 AND mode = 3)) THEN
	esr_out[cnt] := status_to_ESR(s0, a0, DT_in, TX);
	X0 := S0;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF s1 &lt;&gt; X1 AND ((s1 &lt; 100) OR (S1 &gt; 99 AND S1 &lt; 200 AND mode &gt;= 2) OR (S1 &gt; 199 AND mode = 3)) THEN
	esr_out[cnt] := status_to_ESR(s1, a1, DT_in, TX);
	X1 := S1;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF s2 &lt;&gt; X2 AND ((s2 &lt; 100) OR (S2 &gt; 99 AND S2 &lt; 200 AND mode &gt;= 2) OR (S2 &gt; 199 AND mode = 3)) THEN
	esr_out[cnt] := status_to_ESR(s2, a2, DT_in, TX);
	X2 := S2;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF s3 &lt;&gt; X3 AND ((s3 &lt; 100) OR (S3 &gt; 99 AND S3 &lt; 200 AND mode &gt;= 2) OR (S3 &gt; 199 AND mode = 3)) THEN
	esr_out[cnt] := status_to_ESR(s3, a3, DT_in, TX);
	X3 := S3;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF cnt &lt; 4 AND s4 &lt;&gt; X4 AND ((s4 &lt; 100) OR (S4 &gt; 99 AND S4 &lt; 200 AND mode &gt;= 2) OR (S4 &gt; 199 AND mode = 3)) THEN
	esr_out[cnt] := status_to_ESR(s4, a4, DT_in, TX);
	X4 := S4;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF cnt &lt; 4 AND s5 &lt;&gt; X5 AND ((s5 &lt; 100) OR (S5 &gt; 99 AND S5 &lt; 200 AND mode &gt;= 2) OR (S5 &gt; 199 AND mode = 3)) THEN
	esr_out[cnt] := status_to_ESR(s5, a5, DT_in, TX);
	X5 := S5;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF cnt &lt; 4 AND s6 &lt;&gt; X6 AND ((s6 &lt; 100) OR (S6 &gt; 99 AND S6 &lt; 200 AND mode &gt;= 2) OR (S6 &gt; 199 AND mode = 3)) THEN
	esr_out[cnt] := status_to_ESR(s6, a6, DT_in, TX);
	X6 := S6;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;
IF cnt &lt; 4 AND s7 &lt;&gt; X7 AND ((s7 &lt; 100) OR (S7 &gt; 99 AND S7 &lt; 200 AND mode &gt;= 2) OR (S7 &gt; 199 AND mode = 3)) THEN
	esr_out[cnt] := status_to_ESR(s7, a7, DT_in, TX);
	X7 := S7;
	cnt := cnt + 1;
	esr_flag := TRUE;
END_IF;


(* revision history
hm	26. jan 2007		rev 1.0
	original version

hm	17. sep 2007	rev 1.1
	replaced time() with T_PLC_MS() for compatibility reasons

hm	1. dec. 2009	rev 1.2
	changed esr_out to be I/O


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>cec1d280-8e4c-4a9e-88c3-47add2060ebd</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="OSCAT_VERSION" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF in THEN
	OSCAT_VERSION := DATE_TO_DWORD(D#2011-03-05);
ELSE
	OSCAT_VERSION := 331;
END_IF;

(* revision history
hm	6. oct 2006	rev 1.0
	original version

hm	16. dec 2007	rev 1.1
	added possibility to return date and version depending on IN.

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1339356d-c30a-4d36-ba03-fbee74c24e9c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="STATUS_TO_ESR" pouType="function">
        <interface>
          <returnType>
            <derived name="esr_data" />
          </returnType>
          <inputVars>
            <variable name="status">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="adress">
              <type>
                <string length="10" />
              </type>
            </variable>
            <variable name="DT_in">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="TS">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF status &lt; 100 THEN
	status_to_ESR.typ := 1;
ELSIF status &lt; 200 THEN
	status_to_ESR.typ := 2;
ELSE
	status_to_ESR.typ := 3;
END_IF;
status_to_ESR.adress:= adress;
status_to_ESR.DS := DT_in;
status_to_ESR.TS := TS;
status_to_ESR.data[0] := status;
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b870a77e-a110-4f10-9083-de2dca5a1303</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BIN_TO_BYTE" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="BIN">
              <type>
                <string length="12" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="X">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(bin);
stop := LEN(bin);
FOR I := 1 TO stop DO
	x := pt^;
	(* calculate the value of the digit *)
	IF X = 48 THEN
		BIN_TO_BYTE := SHL(BIN_TO_BYTE,1);
	ELSIF X = 49 THEN
		BIN_TO_BYTE := SHL(BIN_TO_BYTE,1) OR 1;
	END_IF;
	pt := pt + 1;
END_FOR;



(* revision histroy
hm	18. jun. 2008	rev 1.0
	original release

hm	20. sep. 2008	rev 1.1
	changed length of input string from 20 to 12

hm	26. jul. 2009	rev 1.2
	optimized code
*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d48316bd-63a8-47d7-ab58-e53c0772f277</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BIN_TO_DWORD" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="BIN">
              <type>
                <string length="40" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="X">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(bin);
stop := LEN(bin);
FOR I := 1 TO stop DO
	x := pt^;
	(* calculate the value of the digit *)
	IF X = 48 THEN
		BIN_TO_DWORD := SHL(BIN_TO_DWORD,1);
	ELSIF X = 49 THEN
		BIN_TO_DWORD := SHL(BIN_TO_DWORD,1) OR 1;
	END_IF;
	pt := pt + 1;
END_FOR;



(* revision histroy
hm	18. jun. 2008	rev 1.0
	original release

hm	20. sep. 2008	rev 1.1
	changed length of input dtring from 20 to 40

hm	26. jul 2009	rev 1.2
	optimized code
*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>bbb27a3f-21eb-464e-9010-ca02181e408b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BYTE_TO_STRB" pouType="function">
        <interface>
          <returnType>
            <string length="8" />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* pointer für die ausgabe ermitteln *)
pt := ADR(BYTE_TO_STRB);
(* die 8 ausgabecharacter ermitteln und schreiben *)
FOR i := 1 TO 8 DO
	pt^ := BOOL_TO_BYTE(in.7) + 48;
	in := SHL(in,1);
	pt := pt + 1;
END_FOR;

(* der ausgabestring muss noch mit 0 abgeschlossen werden *)
pt^ := 0;

(* code before rev 1.1
FOR i := 1 TO 8 DO
	IF in.0 = 0 THEN temp := CONCAT('0', temp); ELSE temp := CONCAT('1', temp); END_IF;
	in := SHR(in, 1);
END_FOR;
BYTE_TO_STRB := temp;
*)


(* revision history

hm		9.6.2007	rev 1.0		
	original version 

hm	15. dec 2007	rev 1.1
	inprooved code for higher performance

hm	29. mar. 2008	rev 1.2
	changed STRING to STRING(8)

hm	20. jun. 2008	rev 1.3
	performance improvement

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2a8f8f17-d9f9-4d7b-a489-e8e4ea3d929f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="BYTE_TO_STRH" pouType="function">
        <interface>
          <returnType>
            <string length="2" />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="temp">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="PT">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read pointer to output string *)
PT := ADR(BYTE_TO_STRH);
(* calculate high order hex value *)
temp := SHR(in,4);
(* convert value to hex character *)
IF temp &lt;= 9 THEN temp := temp + 48; ELSE temp := temp + 55; END_IF;
(* write friat character to output string *)
PT^ := temp;
(* calculate low order hex value *)
temp := in AND 2#00001111;
IF temp &lt;= 9 THEN temp := temp + 48; ELSE temp := temp + 55; END_IF;
(* increment pointer and wirte low order character *)
pt := pt + 1;
pt^ := temp;
(* set pointer at the end of the output string and close the string with 0 *)
pt := pt + 1;
pt^:= 0;


(* code before rev 1.2
FOR i := 1 TO 2 DO
	X := in AND 2#1111;
	IF X &lt;= 9 THEN X := X + 48; ELSE X := X + 55; END_IF;
	Cx := CHR(X);
	temp := CONCAT(Cx, temp);
	in := SHR(in,4);
END_FOR;
BYTE_TO_STRH := temp;
*)

(* revision history

hm	9.6.2007		rev 1.0		
	original version 

hm	11.9.2007		rev 1.1		
	changed coding for compatibility with twincat, under twincat concat cannot have a function as argument.	

hm	15 dec 2007		REV 1.2
	changed code for higher performance

hm	29. mar. 2008	rev 1.3
	changed STRING to STRING(2)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e78e69e4-baeb-49b4-958f-105cc653432c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CAPITALIZE" pouType="function">
        <interface>
          <returnType>
            <string length="STRING_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="PT">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="L">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="first">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PT := ADR(CAPITALIZE);
CAPITALIZE := str;
L := LEN(str);
FOR pos := 1 TO l DO
	IF first THEN pt^ := TO_UPPER(pt^);	END_IF;
	(* remember in first if the next char needs to capitalized *)
	first := pt^= 32;
	PT := pt + 1;
END_FOR;

(* revision histroy
hm		4. mar 2008	rev 1.0
	original release

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(STRING_LENGTH)

hm	20. jun. 2008	rev 1.2
	improved performance

*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c4ed461c-06f7-4d0f-933d-c55719a0401b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CHARCODE" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="STR">
              <type>
                <string length="10" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="found">
              <type>
                <string length="1" />
              </type>
            </variable>
            <variable name="search">
              <type>
                <string length="10" />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF LEN(str) = 1 THEN
	CHARCODE := CODE(STR, 1);
ELSIF str &lt;&gt; '' THEN
	(* construct search string *)
	search := CONCAT('&amp;', str);
	search := CONCAT(search, ';');
	WHILE pos = 0 AND (i &lt; 4) DO
		i := i + 1;
		pos := FIND(setup.CHARNAMES[i], search);
	END_WHILE;
	found := MID(setup.CHARNAMES[i], 1, pos - 1);
	CHARCODE := CODE(found, 1);
END_IF;




(* revision history
hm	13. may. 2008	rev 1.0
	original version

hm	19. oct. 2008	rev 1.1
	changed setup constants

hm	24. oct. 2008	rev 1.2
	optimized code
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>33e725fc-4c0a-4b34-85f2-5f5f9b79719f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CHARNAME" pouType="function">
        <interface>
          <returnType>
            <string length="10" />
          </returnType>
          <inputVars>
            <variable name="C">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF C &lt;&gt; 0 THEN
	(* construct search string from code followed by $ sign, also clear charname string*)
	CHARNAME := CHR_TO_STRING(C);
	CHARNAME := CONCAT(CHARNAME,'&amp;');
	CHARNAME := CONCAT(';', CHARNAME);
	WHILE pos = 0 AND (i &lt; 4) DO
		i := i + 1;
		pos := FIND(setup.CHARNAMES[i], CHARNAME);
	END_WHILE;
	IF pos &gt; 0 THEN
		CHARNAME := MID(setup.CHARNAMES[i], 10, pos + 3);
		(* search for end of name and truncate *)
		pos := FIND(CHARNAME, ';');
		CHARNAME := LEFT(CHARNAME,pos - 1);
	ELSE
		CHARNAME := CHR_TO_STRING(C);
	END_IF;
ELSE
	CHARNAME := '';
END_IF;




(* revision history
hm	13. may. 2008	rev 1.0
	original version

hm	16. jun. 2008	rev 1.1
	changed nested call of concat for better compatibility

hm	19. oct. 2008	rev 1.2
	changes setup constants

hm	24. oct. 2008	rev 1.3
	new code for high performance

hm	17. dec. 2008	rev 1.4
	changed function chr to chr_to_string
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e5acf2b5-0d51-4484-971a-db4d2d0b9b84</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CHR_TO_STRING" pouType="function">
        <interface>
          <returnType>
            <string length="1" />
          </returnType>
          <inputVars>
            <variable name="C">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="PT">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PT := ADR(CHR_TO_STRING);
PT^ := C;
pt := pt + 1;
pt^ := 0;

(* revision history
hm	16 jan 2007		rev 1.0
	original version

hm	4. feb. 2008	rev 1.1
	return string would not be terminated properly

hm	29. mar. 2008	rev 1.2
	changed STRING to STRING(1)

hm	17. dec. 2008	rev 1.3
	changed name of function from chr to chr_to_string
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>cf2f39c2-7f5f-41ce-b970-db662b842f20</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CLEAN" pouType="function">
        <interface>
          <returnType>
            <string length="STRING_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="CX">
              <type>
                <string length="80" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pos">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* copy input string *)
CLEAN := IN;
stop := LEN(in);
WHILE pos &lt;= stop DO
	IF FIND(cx, MID(CLEAN, 1, pos)) &gt; 0 THEN
		(* charcter found skip to next one *)
		pos := pos + 1;
	ELSE
		(* wrong chracter needs to be deleted *)
		CLEAN := DELETE(CLEAN, 1, pos);
		stop := stop - 1;	(* the string is one character shorter now *)
	END_IF;
END_WHILE;



(* revision history

hm		18. jun. 2008	rev 1.0		
	original version 


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e3b4663c-9fea-459c-b829-cfc4107cddfc</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CODE" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="STR">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="POS">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="PT">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF pos &lt; 1 OR pos &gt; LEN(str) THEN
	CODE := 0;
	RETURN;
ELSE
	PT := ADR(STR) + INT_TO_DWORD(pos - 1);
	CODE := pt^;
END_IF;

(* revision history
hm	9. mar. 2008	rev 1.0
	original version

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>9266fad0-e6ac-41a3-ba90-85933333f422</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="COUNT_CHAR" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="chr">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="l">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PT := ADR(str);
l := LEN(str);
COUNT_CHAR := 0;
FOR pos := 1 TO l DO
	IF pt^ = CHR THEN COUNT_CHAR := COUNT_CHAR + 1; END_IF;
    PT := PT + 1;
END_FOR;


(* revision history
hm	29. feb 2008	rev 1.0
	original version

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5bf47efb-26f5-4c0d-973b-13b2afc1c92b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="COUNT_SUBSTRING" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="SEARCH">
              <type>
                <string />
              </type>
            </variable>
            <variable name="STR">
              <type>
                <string />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="size">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">COUNT_SUBSTRING := 0;
size := LEN(SEARCH);
REPEAT
   pos := FIND(STR,SEARCH);
   IF pos &gt; 0 THEN
      STR := REPLACE(STR, '', size,pos);
      COUNT_SUBSTRING := COUNT_SUBSTRING + 1;
   END_IF;
UNTIL pos = 0
END_REPEAT;


(* revision history
ks	20. jan. 2011	rev 1.0
	original version

*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>dde5e173-b388-400b-9d2c-1d1705abe28f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DEC_TO_BYTE" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="DEC">
              <type>
                <string length="10" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="X">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(dec);
stop := LEN(DEC);
FOR I := 1 TO stop DO
	(* read the first character and subtract 48 to get value in decimal 0 = 48 *)
	x := pt^;
	(* calculate the value of the digit *)
	IF X &gt; 47 AND x &lt; 58 THEN
		DEC_TO_BYTE := DEC_TO_BYTE * 10 + X - 48;
	END_IF;
	pt := pt + 1;
END_FOR;



(* revision histroy
hm	20. jun. 2008	rev 1.0
	original release

hm	30. sep.2008	rev 1.1
	changed length of input string from 20 to 10
	corrected an error where decoding of characters 8 and 9 would fail

*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>08e09aec-7f1a-4eb2-a1ba-d420d9e03131</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DEC_TO_DWORD" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="DEC">
              <type>
                <string length="20" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="X">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(dec);
stop := LEN(dec);
FOR I := 1 TO stop DO
	(* read the first character and subtract 48 to get value in decimal 0 = 48 *)
	x := pt^;
	(* calculate the value of the digit *)
	IF X &gt; 47 AND x &lt; 58 THEN
		DEC_TO_DWORD := DEC_TO_DWORD * 10 + X - 48;
	END_IF;
	pt := pt + 1;
END_FOR;



(* revision histroy
hm	20. jun. 2008	rev 1.0
	original release

hm	30. sep. 2008	rev 1.1
	corrected an error where decoding of characters 8 and 9 would fail
*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a32d5e05-d715-4022-9b16-c06fbc3b1e61</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DEC_TO_INT" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="DEC">
              <type>
                <string length="10" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="X">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="sign">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(dec);
stop := LEN(dec);
FOR I := 1 TO stop DO
	(* read the first character and subtract 48 to get value in decimal 0 = 48 *)
	x := pt^;
	(* calculate the value of the digit *)
	IF X &gt; 47 AND x &lt; 58 THEN
		DEC_TO_INT := DEC_TO_INT * 10 + X - 48;
	ELSIF X = 45 AND DEC_TO_INT = 0 THEN
		sign := TRUE;
	END_IF;
	pt := pt + 1;
END_FOR;
IF sign THEN DEC_TO_INT := -DEC_TO_INT; END_IF;


(* revision histroy
hm	20. jun. 2008	rev 1.0
	original release

hm	30. sep. 2008	rev 1.1
	changed length of input string from 20 to 10
	corrected an error where decoding of characters 8 and 9 would fail
*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b63b3274-a3a8-495a-9743-fe860fef34d3</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DEL_CHARS" pouType="function">
        <interface>
          <returnType>
            <string length="STRING_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="CX">
              <type>
                <string length="80" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pos">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* copy input string *)
DEL_CHARS := IN;
stop := LEN(in);
WHILE pos &lt;= stop DO
	IF FIND(cx, MID(DEL_CHARS, 1, pos)) &gt; 0 THEN
		(* wrong chracter needs to be deleted *)
		DEL_CHARS := DELETE(DEL_CHARS, 1, pos);
		stop := stop - 1;	(* the string is one character shorter now *)
	ELSE
		(* charcter not found skip to next one *)
		pos := pos + 1;
	END_IF;
END_WHILE;



(* revision history

hm		18. jun. 2008	rev 1.0		
	original version 


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0fae5596-ae27-4bdf-9bf4-8387caabeeed</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DT_TO_STRF" pouType="function">
        <interface>
          <returnType>
            <string />
          </returnType>
          <inputVars>
            <variable name="DTI">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="MS">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="FMT">
              <type>
                <string />
              </type>
            </variable>
            <variable name="LANG">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars constant="true">
            <variable name="FILL">
              <type>
                <string length="1" />
              </type>
              <initialValue>
                <simpleValue value="'0'" />
              </initialValue>
            </variable>
            <variable name="BLANK">
              <type>
                <string length="1" />
              </type>
              <initialValue>
                <simpleValue value="' '" />
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="ly">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="dx">
              <type>
                <DATE />
              </type>
            </variable>
            <variable name="fs">
              <type>
                <string length="10" />
              </type>
            </variable>
            <variable name="td">
              <type>
                <TOD />
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="f">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF LANG &lt; 1 THEN ly := language.DEFAULT; ELSE ly := MIN(language.LMAX, LANG); END_IF;

(* decode date and time information *)
dx := DT_TO_DATE(DTI);
td := DT_TO_TOD(DTI);

(* parse the format string *)
DT_TO_STRF := FMT;
pos := FIND(DT_TO_STRF, '#');
WHILE pos &gt; 0 DO
	(* retrieve format identifier *)
	f := CODE(DT_TO_STRF, pos + 1);
	(* generate the return string according to the format character *)
	fs := '';
	CASE f OF
		65 : (* letter A retunrs the year in 4 digits *)
			fs := INT_TO_STRING(YEAR_OF_DATE(dx));
		66 : (* letter B returns the year in exactly 2 digits *)
			fs := RIGHT(INT_TO_STRING(YEAR_OF_DATE(dx)),2);
		67 : (* letter C returns the month with 1 or 2 digits *)
			fs := INT_TO_STRING(MONTH_OF_DATE(dx));
		68 : (* letter D returns the month with exactly 2 digits *)
			fs := INT_TO_STRING(MONTH_OF_DATE(dx));
			IF LEN(fs) &lt; 2 THEN fs := CONCAT('0', fs); END_IF;
		69 : (* letter E returns the month with 3 characters *)
			fs := MONTH_TO_STRING(MONTH_OF_DATE(dx), ly, 3);
		70 : (* letter F returns the month with all characters *)
			fs := MONTH_TO_STRING(MONTH_OF_DATE(dx), ly, 0);
		71 : (* letter G returns the day with up to 2 digits *)
			fs := INT_TO_STRING(DAY_OF_MONTH(dx));
		72 : (* letter H returns the day of the month with exactly 2 digits *)
			fs := INT_TO_STRING(DAY_OF_MONTH(dx));
			IF LEN(fs) &lt; 2 THEN fs := CONCAT(FILL, fs); END_IF;
		73 : (* letter I returns the weekday as the number 1..7 1 = monday *)
			fs := INT_TO_STRING(DAY_OF_WEEK(dx));
		74 : (* letter J returns the weekday in 2 character writing *)
			fs := WEEKDAY_TO_STRING(DAY_OF_WEEK(dx), ly, 2);
		75 : (* letter K returns the weekday with all characters *)
			fs := WEEKDAY_TO_STRING(DAY_OF_WEEK(dx), ly, 0);
		76 : (* letter L returns AM or PM for the given DateTime *)
			IF td &gt;= TOD#12:00 THEN fs := 'PM'; ELSE fs := 'AM'; END_IF;
		77 : (* letter M returns the hour in 1 or 2 digit form 0..24h *)
			fs := INT_TO_STRING(HOUR(td));
		78 : (* letter N returns the hour in exactly 2 digit form 0..24h *)
			fs := INT_TO_STRING(HOUR(td));
			IF LEN(fs) &lt; 2 THEN fs := CONCAT(FILL, fs); END_IF;
		79 : (* letter O returns the hour in 1 or 2 digit form 0..12h *)
			tmp := HOUR(td) MOD 12;
			IF tmp = 0 THEN tmp := 12; END_IF;
			fs := INT_TO_STRING(tmp);
		80 : (* letter P returns the hour in exactly 2 digit form 0..12h *)
			tmp := HOUR(td) MOD 12;
			IF tmp = 0 THEN tmp := 12; END_IF;
			fs := INT_TO_STRING(tmp);
			IF LEN(fs) &lt; 2 THEN fs := CONCAT(FILL, fs); END_IF;
		81 : (* letter Q returns the minute of the hour in 1 or two digit form *)
			fs := INT_TO_STRING(MINUTE(td));
		82 : (* letter R returns the minute of the hour in exactly two digit form *)
			fs := INT_TO_STRING(MINUTE(td));
			IF LEN(fs) &lt; 2 THEN fs := CONCAT(FILL, fs); END_IF;
		83 : (* letter S returns the second of the minute in 1 or two digit form *)
			fs := INT_TO_STRING(REAL_TO_INT(SECOND(td)));
		84 : (* letter T returns the second of the minute in exactly two digit form *)
			fs := INT_TO_STRING(REAL_TO_INT(SECOND(td)));
			IF LEN(fs) &lt; 2 THEN fs := CONCAT(FILL, fs); END_IF;
		85 : (* letter U returns the milliseconds in 1 to 3 digits *)
			fs := INT_TO_STRING(MS);
		86 : (* letter V returns the milliseconds in exactly 3 digit form *)
			fs := INT_TO_STRING(MS);
			fs := CONCAT('00',fs);
			fs := RIGHT(fs, 3);
		87 : (* letter W returns the day of the month with exactly 2 digits first digit is filled with blank if necessary *)
			fs := INT_TO_STRING(DAY_OF_MONTH(dx));
			IF LEN(fs) &lt; 2 THEN fs := CONCAT(BLANK, fs); END_IF;
		88 : (* letter X returns the month with exactly 2 digits first digit is filled with blank if necessary *)
			fs := INT_TO_STRING(MONTH_OF_DATE(dx));
			IF LEN(fs) &lt; 2 THEN fs := CONCAT(BLANK, fs); END_IF;
		END_CASE;
	DT_TO_STRF := REPLACE(DT_TO_STRF, fs, 2, pos);
	pos := FIND(DT_TO_STRF, '#');
END_WHILE;


(* revision history
hm	7. oct. 2008	rev 1.0
	original version

hm	19. oct. 2008	rev 1.1
	changed language setup constants
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>39aec167-6c46-4bc1-9914-6cac0786bd9f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DWORD_TO_STRB" pouType="function">
        <interface>
          <returnType>
            <string length="32" />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* pointer für die ausgabe ermitteln *)
pt := ADR(DWORD_TO_STRB);
(* die 8 ausgabecharacter ermitteln und schreiben *)
FOR i := 1 TO 32 DO
	pt^:= BOOL_TO_BYTE(in.31) + 48;
	in := SHL(in,1);
	pt := pt + 1;
END_FOR;

(* der ausgabestring muss nochg mit 0 abgeschlossen werden *)
pt^ := 0;

(* revision history
hm		9.6.2007	rev 1.0		
	original version

hm		15.dec 2007	rev 1.1
	changed code for better performance

hm	29. mar. 2008	rev 1.2
	changed STRING to STRING(32)

hm	20. jun. 2008	rev 1.3
	performance improvement

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ba71a54c-4280-40bf-8032-f8073d2f70da</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DWORD_TO_STRF" pouType="function">
        <interface>
          <returnType>
            <string length="20" />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* limit N to max 20 characters *)
(* convert dword to string first and cut to length N *)
DWORD_TO_STRF := FIX(DWORD_TO_STRING(in),LIMIT(0,N,20),48,1);


(* revision history
hm	26. jan.2007	rev 1.0		
	original version

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(20)
	limit the output string to max 20 digits
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7a7e7b32-bb43-4bbe-865d-4282628954d8</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DWORD_TO_STRH" pouType="function">
        <interface>
          <returnType>
            <string length="8" />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="temp">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read output adress to pointer *)
pt := ADR(DWORD_TO_STRH) + 8;
(* wirte the closing byte for the string *)
pt^:= 0;

(* write the 8 hex characters backwards *)
FOR i := 1 TO 8 DO;
	(* decrement the pointer *)
	pt := pt - 1;
	(* read the lowest order hex value *)
	temp := DWORD_TO_BYTE(in AND 16#0000000F);
	(* convert value to hex character *)
	IF temp &lt;= 9 THEN temp := temp + 48; ELSE temp := temp + 55; END_IF;
	(* write character to output string *)
	PT^ := temp;
	(* shift in for nect hex character *)
	in := SHR(in,4);
END_FOR;


(* code beofre rev 1.2
FOR i := 1 TO 8 DO
	X := DWORD_TO_BYTE(in AND 2#1111);
	IF X &lt;= 9 THEN X := X + 48; ELSE X := X + 55; END_IF;
	Cx := CHR(X);
	temp := CONCAT(Cx, temp);
	in := SHR(in,4);
END_FOR;
DWORD_TO_STRH := temp;
*)


(* revision history
hm	9. jun. 2007	rev 1.0		
	original version 

hm	11. sep. 2007	rev 1.1
	changed coding for compatibility with twincat, concat cannot support a function as an argument.

hm	15. dec. 2007	rev 1.2
	changed code for better performance

hm	29. mar. 2008	rev 1.3
	changed STRING to STRING(8)

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c0150f33-dd0f-4ef8-8ad2-2698cb2ea3ba</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="EXEC" pouType="function">
        <interface>
          <returnType>
            <string length="STRING_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="R1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="R2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="operator">
              <type>
                <string length="10" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* extract both numbers and operator *)
EXEC := UPPERCASE(TRIM(str));

pos := FINDB_NONUM(EXEC);
IF pos &gt; 1 THEN R1 := STRING_TO_REAL(LEFT(EXEC,pos-1)); END_IF;
R2 := STRING_TO_REAL(RIGHT(EXEC,LEN(EXEC)-pos));
EXEC := LEFT(EXEC,pos);
pos := FINDB_NUM(EXEC);
operator := RIGHT(EXEC,LEN(EXEC) - pos);
IF operator = '' AND LEN(str) = 0 THEN
	EXEC := '';
	RETURN;
ELSIF operator = '' THEN
	EXEC := str;
	RETURN;
END_IF;
IF operator = '^' THEN
	EXEC := REAL_TO_STRING(EXPT(R1, R2));
ELSIF operator = 'SQRT' THEN
	EXEC := REAL_TO_STRING(SQRT(R2));
ELSIF operator = 'SIN' THEN
	EXEC := REAL_TO_STRING(SIN(r2));
ELSIF operator = 'COS' THEN
	EXEC := REAL_TO_STRING(COS(r2));
ELSIF operator = 'TAN' THEN
	EXEC := REAL_TO_STRING(TAN(R2));
ELSIF operator = '*' THEN
	EXEC := REAL_TO_STRING(R1 * R2);
ELSIF operator = '/' THEN
	IF R2 &lt;&gt; 0 THEN EXEC := REAL_TO_STRING(R1 / R2); ELSE EXEC := 'ERROR'; END_IF;
ELSIF operator = '+' THEN
	EXEC := REAL_TO_STRING(r1 + r2);
ELSIF operator = '-' THEN
	EXEC := REAL_TO_STRING(r1 - r2);
ELSE
	EXEC := 'ERROR';
END_IF;

IF EXEC = 'ERROR' THEN
	RETURN;
(* some systems deliver integer instead of real *)
ELSIF FIND(EXEC,'.') = 0 THEN
	EXEC := CONCAT(EXEC, '.0');
(* some systems deliver n. instead of n.0 ! *)
ELSIF RIGHT(EXEC,1) = '.' THEN
	EXEC := CONCAT(EXEC,'0');
END_IF;


(* revision history

hm 	6.feb 2007		rev 1.1
	cos has to be written in uppercase
	divide by 0 will return an error

hm	5. mar. 2008	rev 1.2
	add a 0 to the string if a '.' is at the end of the string

hm	20. mar. 2008	rev 1.3
	make sure the function always returns a real value in the form of x.y

hm	29. mar. 2008	rev 1.4
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0f74cb6a-f6af-4a1a-89cd-c74009e12279</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FILL" pouType="function">
        <interface>
          <returnType>
            <string length="STRING_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="C">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="L">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="sx">
              <type>
                <string length="1" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">Sx := CHR_TO_STRING(c);
(* limit L to maximum 80 characters the length of a standard string *)
L := LIMIT(0,L,STRING_LENGTH);
(* create a string of characters to be connected to str *)
FOR i := 1 TO 8 DO
	FILL := CONCAT(FILL,FILL);
	IF L.7 THEN FILL := CONCAT(FILL,Sx); END_IF;
	L := SHL(L,1);
END_FOR;




(* revision histroy
hm	29. mar. 2008	rev 1.0
	original release

hm	17. dec. 2008	rev 1.1
	changed function chr to chr_to_string

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7e490abb-a126-4ef2-8bd4-2084568ac174</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FIND_CHAR" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="1" upper="255" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="X">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(str);
stop := LEN(str);
FOR i := MAX(pos,1) TO stop DO;
	X := pt^[i];
	IF X &gt; 31 AND ((setup.EXTENDED_ASCII AND X &lt;&gt; 127) OR (NOT setup.EXTENDED_ASCII AND X &lt; 127)) THEN
		FIND_CHAR := i;
		RETURN;
	END_IF;
END_FOR;
FIND_CHAR := 0;


(* revision history
hm	29. feb 2008	rev 1.0
	original version

hm	26. mar. 2008	rev 1.1
	char will now accept extended ascii

hm	29. mar. 2008	rev 1.2
	changed STRING to STRING(STRING_LENGTH)

hm	21. oct. 2008	rev 1.3
	changes setup constants
	optimized code
*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b46e5d27-27e1-4868-98ca-4f5c278122e1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FIND_CTRL" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="1" upper="255" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="x">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(str);
stop := LEN(str);
FOR i := MAX(pos,1) TO stop DO;
	x := PT^[I];
	IF x &lt; 32 OR X = 127 THEN
		FIND_CTRL := i;
		RETURN;
	END_IF;
END_FOR;
FIND_CTRL := 0;


(* revision history
hm	29. feb 2008	rev 1.0
	original version

hm	26. mar. 2008	rev 1.1
	character 127 is now recognized as control

hm	29. mar. 2008	rev 1.2
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2c55bdaf-1c83-4af9-b72d-17c73c14f980</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FIND_NONUM" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="1" upper="255" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="end">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="X">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(str);
end := LEN(str);
FOR i := MAX(pos,1) TO end DO;
	X := pt^[i];
	IF (X &lt; 48 AND X &lt;&gt; 46) OR X &gt; 57 THEN
		FIND_NONUM := i;
		RETURN;
	END_IF;
END_FOR;
FIND_NONUM := 0;


(* revision history
hm	6. oct. 2006	rev 1.0
	original version

hm	29. feb 2008	rev 1.1
	added input pos to start search at position

hm	29. mar. 2008	rev 1.2
	changed STRING to STRING(STRING_LENGTH)

hm	21. oct. 2008	rev 1.3
	optimized code

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>9c7d210c-ac45-4c66-bdda-4ee7ef65403d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FIND_NUM" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="1" upper="255" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="X">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(str);
stop := LEN(str);
FOR i := MAX(pos,1) TO stop DO;
	X := pt^[i];
	IF (X &gt; 47 AND X &lt; 58) OR X = 46 THEN
		FIND_NUM := i;
		RETURN;
	END_IF;
END_FOR;
FIND_NUM := 0;


(* revision history
hm	6. oct. 2006	rev 1.0
	original version

hm	29. feb 2008	rev 1.1
	added input pos to start search at position

hm	29. mar. 2008	rev 1.2
	changed STRING to STRING(STRING_LENGTH)

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>86af8df9-5e52-4ae7-bba6-abf0a255413e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FINDB" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="str1">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="str2">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="length">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">length := LEN(str2);
FOR pos := LEN(str1) - length + 1 TO 1 BY -1 DO
	IF MID(str1,length,pos) = str2 THEN
		FindB := pos;
		RETURN;
	END_IF;
END_FOR;
FindB := 0;

(* revision history
hm	6. oct 2006		rev 1.0
	original version

hm	15 dec 2007		rev 1.1
	changed code for better performance

hm	29. feb 2008	rev 1.2
	added findb := 0 for compatibility reasons

hm	29. mar. 2008	rev 1.3
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c8afc6e9-cd78-4b84-b0a2-c7064764314c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FINDB_NONUM" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(str) + LEN(str) - 1;
FOR pos := LEN(str) TO 1 BY -1 DO;
	IF (PT^ &lt; 48 AND PT^ &lt;&gt; 46) OR PT^ &gt; 57 THEN
		FINDB_NONUM := pos;
		RETURN;
	END_IF;
	PT := PT - 1;
END_FOR;
FINDB_NONUM := 0;


(* revision history
hm	6. oct 2006		rev 1.0
	original version

hm	29. feb 2008	rev 1.1
	improved performance

hm	29. mar. 2008	rev 1.2
	changed STRING to STRING(STRING_LENGTH)

hm	21. oct. 2008	rev 1.3
	optimized code
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e290e69a-353c-4d4b-bdcf-945f6cb0f155</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FINDB_NUM" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(str) + LEN(str) - 1;
FOR pos := LEN(str) TO 1 BY -1 DO;
	IF (PT^ &gt; 47 AND PT^ &lt; 58) OR PT^ = 46 THEN
		FINDB_NUM := pos;
		RETURN;
	END_IF;
	PT := PT - 1;
END_FOR;
FINDB_NUM := 0;

(* revision history
hm	6. oct 2006		rev 1.0
	original version

hm	29. feb 2008	rev 1.1
	improved performance

hm	29. mar. 2008	rev 1.2
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0b18abf8-6427-45ff-bba2-45632bdd548e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FINDP" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="src">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="ls">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="lx">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="stp">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">ls := LEN(str);
lx := LEN(src);
IF ls &lt; lx OR lx = 0 THEN RETURN; END_IF;
stp := ls - lx + 1;
FOR i := MAX(pos,1) TO stp DO
	IF MID(str,lx,i) = src THEN
		FINDP := i;
		RETURN;
	END_IF;
END_FOR;
FINDP := 0;

(* revision histroy
hm	4. feb. 2008	rev 1.0
	original release

hm	29. feb 2008	rev 1.1
	ADDED MAX(pos,1) in loop initialization

hm	29. mar. 2008	rev 1.2
	changed STRING to STRING(STRING_LENGTH)
*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>becc8877-ec29-47f2-b2a4-4f4cec7d1c18</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FIX" pouType="function">
        <interface>
          <returnType>
            <string length="STRING_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="L">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="C">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="M">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="SX">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* make sure L does not exceed the limits of a string *)
N := LIMIT(0,L,STRING_LENGTH) - LEN(str);
IF N &lt;= 0 THEN
	(* truncate the string at length N *)
	IF M = 1 THEN
		FIX := RIGHT(str,L);
	ELSE
		FIX := LEFT(str,L);
	END_IF;
ELSIF M = 1 THEN
	(* connect fill characters at the beginning *)
	sx := FILL(C,N);
	FIX := CONCAT(sx,str);
ELSIF M = 2 THEN
	(* center str beween fill characters *)
	(* for an uneven number of fill characters, there is one more at the end *)
	sx := FILL(C,SHR(N+1,1));
	FIX := CONCAT(str,sx);
	SX := LEFT(sx,SHR(N,1));
	FIX := CONCAT(sx,FIX);
ELSE
	(* connect fill characters at the end *)
	SX := FILL(C,N);
	FIX := CONCAT(str,SX);
END_IF;


(* revision histroy
hm	29. mar. 2008	rev 1.0
	original release

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>59ca4a27-b166-49e8-8581-4779e49fb390</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FLOAT_TO_REAL" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="FLT">
              <type>
                <string length="20" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="1" upper="20" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="X">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="sign">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <DINT />
              </type>
            </variable>
            <variable name="d">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(FLT);
stop := LEN(FLT);

(* we first check for sign and exit if first number or dot is reached *)
FOR i := 1 TO stop DO
	X := pt^[i];
	IF X &gt; 47 AND X &lt; 58 OR X = 46 THEN
		EXIT;
	ELSIF X = 45 THEN
		(* code 45 is sign *)
		sign := -1;
	END_IF;
END_FOR;

(* now we scan numbers till end or dot or E is reached *)
FOR i := i TO stop DO
	X := pt^[i];
	IF X = 44 OR X = 46 OR X = 69 OR X = 101 THEN
		EXIT;
	(* calculate the value of the digit *)
	ELSIF X &gt; 47 AND x &lt; 58 THEN
		tmp := tmp * 10 + X - 48;
	END_IF;
END_FOR;

(* process the portion after the comma if comma or dot is reached exit if exponent starts *)
IF x = 44 OR X = 46 THEN
	FOR i := i + 1 TO stop DO
		X := pt^[i];
		IF X = 69 OR X = 101 THEN
			EXIT;
		ELSIF x &gt; 47 AND x &lt; 58 THEN
			tmp := tmp * 10 + X - 48;
			d := d - 1;
		END_IF;
	END_FOR;
END_IF;

(* process exponent if present *)
IF X = 69 OR X = 101 THEN
	d := d + DEC_TO_INT(RIGHT(FLT, stop - i));
END_IF;

FLOAT_TO_REAL :=  EXPN(10, d) * DINT_TO_REAL(TMP * SIGN);




(* revision histroy
hm	22. jun. 2008	rev 1.0
	original release

hm	2. oct. 2008	rev 1.1
	fixed an error, characters 8 and 9 would not be converted

hm	22. oct. 2008	rev 1.2
	last fix was not done correctly

hm	23. oct. 2008	rev 1.3
	optimzed code
*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>3696f742-1056-4b3c-a9c1-13af95dc9f28</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FSTRING_TO_BYTE" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <string length="12" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF LEFT(IN, 2) = '2#' THEN
	(* we need to convert binary *)
	FSTRING_TO_BYTE := BIN_TO_BYTE(RIGHT(in, LEN(in) - 2));
ELSIF LEFT(in, 2) = '8#' THEN
	(* weneed to convert octals *)
	FSTRING_TO_BYTE := OCT_TO_BYTE(RIGHT(in, LEN(in) - 2));
ELSIF LEFT(in, 3) = '16#' THEN
	(* we need to convert hexadecimal *)
	FSTRING_TO_BYTE := HEX_TO_BYTE(RIGHT(in, LEN(in) - 3));
ELSE
	(* we assume decimal representation *)
	FSTRING_TO_BYTE := DEC_TO_BYTE(CLEAN(in,'0123456789'));
END_IF;


(* revision histroy
hm	18. jun. 2008	rev 1.0
	original release

hm	20. sep. 2008	rev 1.1
	changed length of input string from 20 to 12
*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c099f828-c7a2-4b4d-927e-fac093db4455</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FSTRING_TO_DT" pouType="function">
        <interface>
          <returnType>
            <DT />
          </returnType>
          <inputVars>
            <variable name="SDT">
              <type>
                <string length="60" />
              </type>
            </variable>
            <variable name="FMT">
              <type>
                <string length="60" />
              </type>
            </variable>
          </inputVars>
          <localVars constant="true">
            <variable name="ignore">
              <type>
                <string length="1" />
              </type>
              <initialValue>
                <simpleValue value="'*'" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> ignore character is * </xhtml>
              </documentation>
            </variable>
            <variable name="fchar">
              <type>
                <string length="1" />
              </type>
              <initialValue>
                <simpleValue value="'#'" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> format character is # </xhtml>
              </documentation>
            </variable>
          </localVars>
          <localVars>
            <variable name="c">
              <type>
                <string length="1" />
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <string length="20" />
              </type>
            </variable>
            <variable name="end">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="dy">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1970" />
              </initialValue>
            </variable>
            <variable name="dm">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="dd">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="th">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="tm">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="ts">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* scan input string *)
WHILE fmt &lt;&gt; '' DO
	c := LEFT(fmt,1);
	IF c = ignore THEN
		(* skip ignore characters *)
		fmt := DELETE(fmt,1,1);
		sdt := DELETE(sdt,1,1);
	ELSIF C = fchar THEN
		(* format chracter found skip format char and read identifier *)
		(* store format identifier in c and skip to next char in fmt *)
		c := MID(fmt,1,2);
		fmt := DELETE(fmt,2,1);
		(* extract the substring until the end of sdt or to next char of fmt *)
		IF fmt = '' THEN
			tmp := sdt;
		ELSE
			(* serach for end of substring *)
			end := FIND(sdt, LEFT(fmt,1))-1;
			tmp := LEFT(sdt, end);
			sdt := DELETE(sdt, end,1);
		END_IF;
		(* extract information from substring *)
		IF c = 'Y' THEN
			dy := STRING_TO_INT(tmp);
			IF dy &lt; 100 THEN dy := dy + 2000; END_IF;
		ELSIF c = 'M' THEN
			dm := STRING_TO_INT(tmp);
		ELSIF c = 'N' THEN
			dm := FSTRING_TO_MONTH(tmp,0);
		ELSIF c = 'D' THEN
			dd := STRING_TO_INT(tmp);
		ELSIF c = 'h' THEN
			th := STRING_TO_INT(tmp);
		ELSIF c = 'm' THEN
			tm := STRING_TO_INT(tmp);
		ELSIF c = 's' THEN
			ts := STRING_TO_INT(tmp);
		END_IF;
	ELSIF c = LEFT(sdt,1) THEN
		(* skip matching characters *)
		fmt := DELETE(fmt,1,1);
		sdt := DELETE(sdt,1,1);
	ELSE
		RETURN;
	END_IF;
END_WHILE;

FSTRING_TO_DT := SET_DT(dy,dm,dd,th,tm,ts);


(* revision histroy
hm	24. sep. 2008	rev 1.0
	original release


*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>15f47317-f538-42a4-b1e8-860797cccac7</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FSTRING_TO_DWORD" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <string length="40" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF LEFT(IN, 2) = '2#' THEN
	(* we need to convert binary *)
	FSTRING_TO_DWORD := BIN_TO_DWORD(RIGHT(in, LEN(in) - 2));
ELSIF LEFT(in, 2) = '8#' THEN
	(* weneed to convert octals *)
	FSTRING_TO_DWORD := OCT_TO_DWORD(RIGHT(in, LEN(in) - 2));
ELSIF LEFT(in, 3) = '16#' THEN
	(* we need to convert hexadecimal *)
	FSTRING_TO_DWORD := HEX_TO_DWORD(RIGHT(in, LEN(in) - 3));
ELSE
	(* we assume decimal representation *)
	FSTRING_TO_DWORD := DEC_TO_DWORD(CLEAN(in,'0123456789'));
END_IF;


(* revision histroy
hm	18. jun. 2008	rev 1.0
	original release

hm	20. sep. 2008	rev 1.1
	changed length of input dtring from 20 to 40


*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>bf2e0f2b-b212-4f5b-a9da-3b39ad38e9a0</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FSTRING_TO_MONTH" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="MTH">
              <type>
                <string length="20" />
              </type>
            </variable>
            <variable name="LANG">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="lx">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF LANG = 0 THEN lx := LANGUAGE.DEFAULT; ELSE lx := MIN(LANG, LANGUAGE.LMAX); END_IF;
MTH := TRIM(mth);
MTH := CAPITALIZE(LOWERCASE(MTH));

FOR FSTRING_TO_MONTH := 1 TO 12 DO
	IF MTH = language.MONTHS[lx, FSTRING_TO_MONTH] THEN RETURN; END_IF;
	IF MTH = language.MONTHS3[lx, FSTRING_TO_MONTH] THEN RETURN; END_IF;
END_FOR;

(* since no name matched try to decode as integer *)
FSTRING_TO_MONTH := STRING_TO_INT(MTH);




(* revision histroy
hm	25. sep. 2008	rev 1.0
	original release

hm	19. oct. 2008	rev 1.1
	changed language setup constants

hm	25. oct. 2008	rev 1.2
	optimized code
*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ea987b3c-1518-492b-a04e-9b9740dee2b2</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FSTRING_TO_WEEK" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="WEEK">
              <type>
                <string length="60" />
              </type>
            </variable>
            <variable name="LANG">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pos := FIND(WEEK, ',');
WHILE pos &gt; 0 DO
	FSTRING_TO_WEEK := FSTRING_TO_WEEK OR SHR(BYTE#128, FSTRING_TO_WEEKDAY(MID(WEEK, pos - 1, 1), LANG));
	WEEK := RIGHT(WEEK, LEN(Week) - pos);
	pos := FIND(WEEK, ',');
END_WHILE;
FSTRING_TO_WEEK := (FSTRING_TO_WEEK OR SHR(BYTE#128, FSTRING_TO_WEEKDAY(WEEK, LANG))) AND BYTE#127;


(* revision histroy
hm	18. jun. 2008	rev 1.0
	original release

hm	25. oct. 2008	rev 1.1
	using language defauls and input lang
*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e1a9bd91-374c-4c22-a2c3-ab53784af261</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FSTRING_TO_WEEKDAY" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="WDAY">
              <type>
                <string length="20" />
              </type>
            </variable>
            <variable name="LANG">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="tmp">
              <type>
                <string length="2" />
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="ly">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF LANG = 0 THEN ly := LANGUAGE.DEFAULT; ELSE ly := MIN(LANG, LANGUAGE.LMAX); END_IF;
(* tmp needs to be calculated first otherwise find can return wrong values *)
tmp := TRIM(wday);
tmp := CAPITALIZE(LOWERCASE(tmp));
FOR i := 1 TO 7 DO
	IF language.WEEKDAYS2[ly, i] = tmp THEN
		FSTRING_TO_WEEKDAY := i;
		RETURN;
	END_IF;
END_FOR;
FSTRING_TO_WEEKDAY := STRING_TO_INT(WDAY);




(* revision histroy
hm	18. jun. 2008	rev 1.0
	original release

hm	18. jul. 2008	rev 1.1
	changed nested call of left(trim()) for compatibility reasons

hm	25. oct. 2008	rev 1.2
	using language constants
*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e3e057ef-9817-4041-9d23-3b1cc835ecc1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="HEX_TO_BYTE" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="HEX">
              <type>
                <string length="5" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="X">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(hex);
stop := LEN(hex);
FOR I := 1 TO stop DO
	(* read the first character and subtract 48 to get value in decimal 0 = 48 *)
	x := pt^;
	(* calculate the value of the digit *)
	IF X &gt; 47 AND x &lt; 58 THEN
		HEX_TO_BYTE := SHL(HEX_TO_BYTE,4) + X - 48;
	ELSIF X &gt; 64 AND X &lt; 71 THEN
		HEX_TO_BYTE := SHL(HEX_TO_BYTE,4) + X - 55;
	ELSIF X &gt; 96 AND X &lt; 103 THEN
		HEX_TO_BYTE := SHL(HEX_TO_BYTE,4) + X - 87;
	END_IF;
	pt := pt + 1;
END_FOR;




(* revision histroy
hm	18. jun. 2008	rev 1.0
	original release

hm	20. sep.2008	rev 1.1
	changed length of input string from 20 to 5

*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a0f863eb-4c70-4c29-af6b-faf1dacc26b1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="HEX_TO_DWORD" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="Hex">
              <type>
                <string length="20" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="X">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(hex);
stop := LEN(hex);
FOR I := 1 TO stop DO
	(* read the first character and subtract 48 to get value in decimal 0 = 48 *)
	x := pt^;
	(* calculate the value of the digit *)
	IF X &gt; 47 AND x &lt; 58 THEN
		HEX_TO_DWORD := SHL(HEX_TO_DWORD,4) + X - 48;
	ELSIF X &gt; 64 AND X &lt; 71 THEN
		HEX_TO_DWORD := SHL(HEX_TO_DWORD,4) + X - 55;
	ELSIF X &gt; 96 AND X &lt; 103 THEN
		HEX_TO_DWORD := SHL(HEX_TO_DWORD,4) + X - 87;
	END_IF;
	pt := pt + 1;
END_FOR;



(* revision histroy
hm	2.10.2007		rev 1.0
	original release

hm	19.11.2007		rev 1.1
	changed type of function from int to dword

hm 	4. mar 2008		rev 1.2
	added support for a..f and return 0 for invalid string

hm	29. mar. 2008	rev 1.3
	changed STRING to STRING(8)

hm	18. jun. 2008	rev 1.4
	changed input hex to STRING(20)
	function now ignores wrong characters
*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a0bf84d0-656e-45b5-911b-bd049cb0c07b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="IS_ALNUM" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="L">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PT := ADR(str);
L := LEN(str);
FOR pos := 1 TO L DO
	IF NOT (ISC_ALPHA(pt^) OR ISC_NUM(pt^)) THEN
		IS_ALNUM := FALSE;
		RETURN;
	END_IF;
    	PT := PT + 1;
END_FOR;
IS_ALNUM := L &gt; 0;


(* revision history
hm	29. feb 2008	rev 1.0
	original version

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>311bdeed-4776-40a1-999c-c59f10d31ed6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="IS_ALPHA" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="L">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PT := ADR(str);
L := LEN(str);
FOR pos := 1 TO L DO
	IF NOT ISC_ALPHA(pt^) THEN
		IS_ALPHA := FALSE;
		RETURN;
	END_IF;
    	PT := PT + 1;
END_FOR;
IS_ALPHA := L &gt; 0;


(* revision history
hm	29. feb 2008	rev 1.0
	original version

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>01ef57a0-8aac-4249-98ae-34b4edccbfa1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="IS_CC" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="cmp">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="L">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">L := LEN(str);
FOR pos := 1 TO L DO
	IF FIND(CMP,MID(str,1,pos)) = 0 THEN RETURN; END_IF;
END_FOR;
IS_CC := L &gt; 0;



(* revision history
hm	19. mar 2008	rev 1.0
	original version

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>674f1011-5a81-441f-b925-321dbcd6a187</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="IS_CTRL" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="STR">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="L">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PT := ADR(str);
L := LEN(str);
FOR pos := 1 TO L DO
	IF NOT (ISC_CTRL(pt^)) THEN
		IS_CTRL := FALSE;
		RETURN;
	END_IF;
    	PT := PT + 1;
END_FOR;
IS_CTRL := L &gt; 0;


(* revision history
hm	29. feb. 2008	rev 1.0
	original version

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e9fbfbef-8ec5-4a8b-8807-4d91493f0cee</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="IS_HEX" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="L">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PT := ADR(str);
L := LEN(str);
FOR pos := 1 TO L DO
	IF NOT (ISC_HEX(pt^)) THEN
		IS_HEX := FALSE;
		RETURN;
	END_IF;
    	PT := PT + 1;
END_FOR;
IS_HEX := L &gt; 0;


(* revision history
hm	29. feb 2008	rev 1.0
	original version

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>51139703-524a-45ee-b384-631f9fa363b1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="IS_LOWER" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="l">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PT := ADR(str);
L := LEN(str);
FOR pos := 1 TO L DO
	IF NOT (ISC_LOWER(pt^)) THEN
		IS_LOWER := FALSE;
		RETURN;
	END_IF;
    	PT := PT + 1;
END_FOR;
IS_LOWER := L &gt; 0;


(* revision history
hm	29. feb 2008	rev 1.0
	original version

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0116925e-73b5-4697-8c66-1d4b5baa476b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="IS_NCC" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="cmp">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="L">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">L := LEN(str);
FOR pos := 1 TO L DO
	IF FIND(CMP,MID(str,1,pos)) &gt; 0 THEN RETURN; END_IF;
END_FOR;
IS_NCC := TRUE;



(* revision history
hm	19. mar 2008	rev 1.0
	original version

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>6a33b31a-8438-4558-8f3f-be42a24be300</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="IS_NUM" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="L">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PT := ADR(str);
L := LEN(str);
FOR pos := 1 TO L DO
	IF NOT (ISC_NUM(pt^)) THEN
		IS_NUM := FALSE;
		RETURN;
	END_IF;
    	PT := PT + 1;
END_FOR;
IS_NUM := L &gt; 0;


(* revision history
hm	29. feb 2008	rev 1.0
	original version

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8afacc60-1289-481e-8fc6-9ce24383d545</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="IS_UPPER" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="L">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PT := ADR(str);
L := LEN(str);
FOR pos := 1 TO L DO
	IF NOT (ISC_UPPER(pt^)) THEN
		IS_UPPER := FALSE;
		RETURN;
	END_IF;
    	PT := PT + 1;
END_FOR;
IS_UPPER := L &gt; 0;


(* revision history
hm	29. feb 2008	rev 1.0
	original version

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0881393b-a375-454d-8fb6-e88f89bfeb53</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ISC_ALPHA" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF setup.EXTENDED_ASCII THEN
	ISC_ALPHA := (in &gt; 64 AND in &lt; 91) OR (in &gt; 191  AND in &lt;&gt; 215 AND in &lt;&gt; 247) OR (in &gt; 96 AND in &lt; 123);
ELSE
	ISC_ALPHA := (IN &gt; 64 AND IN &lt; 91) OR (in &gt; 96 AND in &lt; 123);
END_IF;

(* revision history
hm	6. mar. 2008	rev 1.0
	original version

hm	19. oct. 2008	rev 1.1
	changes setup constants
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d163f822-7688-48ba-a792-d621ead22a11</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ISC_CTRL" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">ISC_CTRL := IN &lt; 32 OR IN = 127;

(* revision history
hm		6. mar. 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>00d7c634-1d8f-43c9-8fae-d268a8bfd6ec</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ISC_HEX" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">ISC_HEX := (IN &gt; 47 AND IN &lt; 58) OR (IN &gt; 64 AND IN &lt; 71) OR (IN &gt; 96 AND IN &lt; 103);

(* revision history
hm		6. mar. 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e2e184e4-916d-4b3e-b530-dd534db0cde9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ISC_LOWER" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF setup.EXTENDED_ASCII THEN
	ISC_LOWER := ((in &gt; 96) AND (in &lt; 123)) OR ((in &gt; 222) AND (in &lt;&gt; 247));
ELSE
	ISC_LOWER := ((in &gt; 96) AND (in &lt; 123));
END_IF;

(* revision history
hm	6. mar. 2008	rev 1.0
	original version

hm	19. oct. 2008	rev 1.1
	changes setup constants
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ac31afca-e18e-4758-b62c-5448ccb5ed39</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ISC_NUM" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">ISC_NUM := IN &gt; 47 AND IN &lt; 58;

(* revision history
hm		6. mar. 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0aa02038-b77e-43cd-87d4-dc8d99cb19d3</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ISC_UPPER" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF setup.EXTENDED_ASCII THEN
	ISC_UPPER :=  ((in &gt; 64) AND (in &lt; 91)) OR (((in &gt; 191) AND (in &lt; 223)) AND (in &lt;&gt; 215));
ELSE
	ISC_UPPER := ((in &gt; 64) AND (in &lt; 91));
END_IF;


(* revision history
hm	6. mar. 2008	rev 1.0
	original version

hm	19. oct. 2008	rev 1.1
	changes setup constants

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>3779223f-ad37-48f5-ac84-6f045a3d886c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LOWERCASE" pouType="function">
        <interface>
          <returnType>
            <string length="STRING_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="PT">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="l">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PT := ADR(LOWERCASE);
lowercase := str;
l := LEN(str);
FOR pos := 1 TO l DO
	pt^ := TO_LOWER(pt^);
	PT := PT + 1;
END_FOR;

(* revision histroy
hm	6. oct. 2006	rev 1.0
	original release

hm	4. feb. 2008	rev 1.1
	improved performance
	added Ä.Ö,Ü

hm	6. mar. 2008	rev 1.2
	added support for exteded Ascii

hm	29. mar. 2008	rev 1.3
	changed STRING to STRING(STRING_LENGTH)
*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>aa90a2f0-882b-46a8-b9b4-856b04c5fe4d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MESSAGE_4R" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="M0">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="M1">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="M2">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="M3">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="MM">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="3" />
              </initialValue>
            </variable>
            <variable name="ENQ">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="CLK">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="T1">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#3s0ms" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="MX">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="MN">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="TR">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* check for rising edge on EN *)
TR := FALSE;
IF ENQ THEN
	IF (NOT edge AND clk) OR timer.q THEN
			MN := INC1(MN, MM);
			TR := TRUE;
			timer(in := FALSE);
			CASE MN OF
				0 : MX := M0;
				1 : MX := M1;
				2 : MX := M2;
				3 : MX := M3;
			END_CASE;
	END_IF;
	edge := clk;
	timer( in := CLK, pt := T1);
ELSE
	MX := '';
	MN := 0;
END_IF;




(* revision history
hm	8. oct. 2008	rev 1.0
	original version

hm	27. oct. 2008	rev 1.1
	changed _INC to INC1

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>01780b84-57e6-4269-92fa-9050045679ac</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MESSAGE_8" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN6">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN7">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="IN8">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="S1">
              <type>
                <string length="STRING_LENGTH" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="S2">
              <type>
                <string length="STRING_LENGTH" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="S3">
              <type>
                <string length="STRING_LENGTH" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="S4">
              <type>
                <string length="STRING_LENGTH" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="S5">
              <type>
                <string length="STRING_LENGTH" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="S6">
              <type>
                <string length="STRING_LENGTH" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="S7">
              <type>
                <string length="STRING_LENGTH" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="S8">
              <type>
                <string length="STRING_LENGTH" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="M">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* check if an alarm is present if yes set the output M otherwise clear M *)
IF in1 THEN
	M := S1;
ELSIF in2 THEN
	M := S2;
ELSIF in3 THEN
	M := S3;
ELSIF in4 THEN
	M := S4;
ELSIF in5 THEN
	M := S5;
ELSIF in6 THEN
	M := S6;
ELSIF in7 THEN
	M := S7;
ELSIF in8 THEN
	M := S8;
ELSE
	M := '';
END_IF;

(* revision history
hm	26.12.2007		rev 1.0
	original version

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(STRING_LENGTH)
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2dd64648-fa5c-4404-b690-6e4a9290df8f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MIRROR" pouType="function">
        <interface>
          <returnType>
            <string length="STRING_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pi">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="1" upper="255" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="po">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="lx">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pi := ADR(str);
po := ADR(mirror);
lx := LEN(str);
FOR i := lx TO 1 BY - 1 DO
	po^ := pi^[i];
	po := po + 1;
END_FOR;
(* close output string *)
po^:= 0;


(* revision histroy
hm	4. feb. 2008	rev 1.0
	original release

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(STRING_LENGTH)
*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c847559f-6304-4461-910e-254f397db7f9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MONTH_TO_STRING" pouType="function">
        <interface>
          <returnType>
            <string length="10" />
          </returnType>
          <inputVars>
            <variable name="MTH">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="LANG">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="LX">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="ly">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF LANG = 0 THEN Ly := LANGUAGE.DEFAULT; ELSE ly := MIN(LANG, language.LMAX); END_IF;
IF MTH &lt; 1 OR MTH &gt; 12 THEN
	RETURN;
ELSIF LX = 0 THEN
	MONTH_TO_STRING := language.MONTHS[ly, MTH];
ELSIF Lx = 3 THEN
	MONTH_TO_STRING := language.MONTHS3[ly, MTH];
END_IF;


(* revisison history

hm	21. sep. 2008	rev 1.0
	original version

hm	19. oct. 2008	rev 1.1
	changed language setup constants
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>adb635e8-6462-45d4-93a1-13c88d272fd4</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="OCT_TO_BYTE" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="OCT">
              <type>
                <string length="10" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="X">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(oct);
stop := LEN(oct);
FOR I := 1 TO stop DO
	(* read the first character and subtract 48 to get value in decimal 0 = 48 *)
	x := pt^;
	(* calculate the value of the digit *)
	IF X &gt; 47 AND x &lt; 56 THEN
		OCT_TO_BYTE := SHL(OCT_TO_BYTE,3) + X - 48;
	END_IF;
	pt := pt + 1;
END_FOR;



(* revision histroy
hm	18. jun. 2008	rev 1.0
	original release

hm	20. sep. 2008	rev 1.1
	changed length of input string from 20 to 10

*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c2eacc6c-b11e-499d-bc9c-dc0157c8a86f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="OCT_TO_DWORD" pouType="function">
        <interface>
          <returnType>
            <DWORD />
          </returnType>
          <inputVars>
            <variable name="OCT">
              <type>
                <string length="20" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="X">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(oct);
stop := LEN(oct);
FOR I := 1 TO stop DO
	(* read the first character and subtract 48 to get value in decimal 0 = 48 *)
	x := pt^;
	(* calculate the value of the digit *)
	IF X &gt; 47 AND x &lt; 56 THEN
		OCT_TO_DWORD := SHL(OCT_TO_DWORD,3) + X - 48;
	END_IF;
	pt := pt + 1;
END_FOR;




(* revision histroy
hm	18. jun. 2008	rev 1.0
	original release


*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ea0e4f1d-f99b-4e8c-8a68-fb6b969f0cba</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="REAL_TO_STRF" pouType="function">
        <interface>
          <returnType>
            <string length="20" />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="O">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* LIMIT N to 0 .. 7 *)
N := LIMIT(0,N,7);
(* round the input to N digits and convert to string *)
O := ABS(in) * EXP10(N);
REAL_TO_STRF := DINT_TO_STRING(REAL_TO_DINT(O));
(* add zeroes in front to make sure sting is at least 8 digits long *)
FOR i := LEN(REAL_TO_STRF) TO N DO REAL_TO_STRF := CONCAT('0', REAL_TO_STRF); END_FOR;
(* add a dot if n &gt; 0 *)
IF n &gt; 0 THEN REAL_TO_STRF := INSERT(REAL_TO_STRF, '.', LEN(REAL_TO_STRF) - N); END_IF;
(* add a minus sign if in is negative *)
IF in &lt; 0 THEN REAL_TO_STRF := CONCAT('-', REAL_TO_STRF); END_IF;


(* revision history
hm	26 jan 2007	rev 1.0
	original version

hm	20. nov. 2007	rev 1.1
	when N=0 ther will be no dot at the end of the string.

hm	15. dec. 2007	rev 1.2
	changed code for better performance

hm	4. mar. 2008	rev 1.3
	result is now rounded instead of trunc

hm	20. mar. 2008	rev 1.4
	changed trunc to real_to_dint because trunc was generating wrong values on wago 842

hm	29. mar. 2008	rev 1.5
	changed STRING to STRING(20)

hm	4. apr. 2008	rev 1.6
	added variable O to avoid an error uner CoDeSys SP PLCWinNT V2.4

hm	27. feb. 2009	rev 1.7
	added a missing zero for IN &lt; 1

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0aba0dfc-fc37-4d20-8aba-125f54bddac6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="REPLACE_ALL" pouType="function">
        <interface>
          <returnType>
            <string length="STRING_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="src">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="rep">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="lp">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="lx">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">REPLACE_ALL := str;
lx := LEN(src);
lp := LEN(rep);
pos := FINDP(REPLACE_ALL, src, 1);
WHILE pos &gt; 0 DO
	REPLACE_ALL := REPLACE(REPLACE_ALL,rep,lx, pos);
	pos := FINDP(REPLACE_ALL, src, pos + lp);
END_WHILE;

(* revision histroy
hm	4. feb. 2008	rev 1.0
	original release

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(STRING_LENGTH)
*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>526f67e5-eaa9-4555-9eea-a458f0f44c66</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="REPLACE_CHARS" pouType="function">
        <interface>
          <returnType>
            <string length="STRING_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="STR">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
            <variable name="SRC">
              <type>
                <string />
              </type>
            </variable>
            <variable name="REP">
              <type>
                <string />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="a">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="b">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="c">
              <type>
                <string length="1" />
              </type>
            </variable>
            <variable name="stp">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">REPLACE_CHARS := STR;
(* make sure rep and src are of same length and length is &gt; 0 *)
a := LEN(src);
b := LEN(rep);
IF a &lt; b THEN
	rep := LEFT(rep, a);
ELSIF b &lt; a THEN
	src := LEFT(src, b);
END_IF;

(* search the string and replace if necessary *)
stp := LEN(str);
FOR a := 1 TO stp DO
	c := MID(REPLACE_CHARS, 1, a);
	b := FIND(src, c);
	IF b &gt; 0 THEN
		REPLACE_CHARS := REPLACE(REPLACE_CHARS, MID(rep, 1, b), 1, a);
	END_IF;
END_FOR;



(* revision history
hm	14. may. 2008	rev 1.0
	original version

*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>496a49c1-37d2-465e-9e73-d8e5dd73c93e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="REPLACE_UML" pouType="function">
        <interface>
          <returnType>
            <string length="STRING_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="L">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="pto">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="ptm">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="pt1">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="pt2">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="su">
              <type>
                <string length="2" />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PT := ADR(str);
pto := ADR(REPLACE_UML);
ptm := pto + INT_TO_DWORD(string_length);
pt1 := ADR(su);
pt2 := pt1 + 1;
L := LEN(str);
WHILE pos &lt; L AND pos &lt; string_length DO
	IF pt^ &lt; 127 THEN
		(* no uml character simlply copy the character*)
		pto^ := pt^;
	ELSE
		(* convert the uml character *)
		su := TO_UML(pt^);
		(* we must make sure pointer are not out of range *)
		pto^ := pt1^;
		IF pto &lt; ptm AND pt2^ &gt; 0 THEN
			pto := pto + 1;
			pto^ := pt2^;
		END_IF;
	END_IF;
	(* increment pointers *)
	pt := pt + 1;
	pto := pto + 1;
	pos := pos + 1;
END_WHILE;

(* properly close the output string *)
pto^ := 0;


(* revision history
hm	29. feb 2008	rev 1.0
	original version

hm	29. mar. 2008	rev 1.1
	changed STRING to STRING(STRING_LENGTH)
	new code to avoid pointer out of range
	use new function to_uml
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7e795be9-4b54-40c8-80bd-2762c2033d90</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TICKER" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="N">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="Text">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inOutVars>
          <outputVars>
            <variable name="Display">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="delay">
              <type>
                <derived name="TP" />
              </type>
            </variable>
            <variable name="step">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
(* generate next ticker when delay is low *)
IF N &lt; LEN(text) THEN
	IF NOT delay.Q THEN
		(* increase step for next tick *)
		step := step + 1;
		IF step &gt; LEN(text) THEN step := 1; END_IF;
		(* extract dispay from text *)
		display := MID(text, N, step);
		(* set delay timer for next tick *)
		delay(in := TRUE, PT := PT);
	ELSE;
		(* execute delay timer *)
		delay(in := FALSE);
	END_IF;
ELSE
	display := text;
END_IF;
(* revision history
hm	4. dec. 2007	rev 1.0
	original version

hm	15. dec. 2007	rev 1.1
	step now starts at 1 instaed of 0

hm	29. mar. 2008	rev 1.2
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7a44ca33-5369-4209-be0d-5d343fb910ae</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TO_LOWER" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF in &gt; 64 AND in &lt; 91 THEN
   TO_LOWER := in OR 16#20;
ELSIF (in &gt; 191 AND in &lt; 223) AND in &lt;&gt; 215 AND setup.EXTENDED_ASCII THEN
   TO_LOWER := in OR 16#20;
ELSE
   TO_LOWER := in;
END_IF;


(* revision history
hm	6. mar. 2008	rev 1.0
	original version

hm	19. oct. 2008	rev 1.1
	changed setup constants

ks	25. oct. 2008	rev 1.2
	optimized code
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e7610bdf-3c3c-48fa-8dc7-d1deefeb895f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TO_UML" pouType="function">
        <interface>
          <returnType>
            <string length="2" />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE in OF
	196:	(* Ä *)
		TO_UML := 'Ae';
	214:	(* Ö *)
		TO_UML := 'Oe';
	220:	(* Ü *)
		TO_UML := 'Ue';
	223:	(* ß *)
		TO_UML := 'ss';
	228:	(* ä *)
		TO_UML := 'ae';
	246:	(* ö *)
		TO_UML := 'oe';
	252:	(* ü *)
		TO_UML := 'ue';
ELSE
	TO_UML := CHR_TO_STRING(IN);
END_CASE;



(* revision history
hm	29. mar. 2008	rev 1.0
	original version

hm	17. dec. 2008	rev 1.1
	changes name of function chr to chr_to_string

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>3bcad282-0eb3-4cc5-be14-bcc83333c310</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TO_UPPER" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF in &gt; 96 AND in &lt; 123 THEN
   TO_UPPER := in AND 16#DF;
ELSIF in &gt; 223 AND in &lt;&gt; 247 AND in &lt;&gt; 255 AND setup.EXTENDED_ASCII THEN
   TO_UPPER := in AND 16#DF;
ELSE
   TO_UPPER := in;
END_IF;




(* revision history
hm	6. mar. 2008	rev 1.0
	original version

hm	19. oct. 2008	rev 1.1
	changed setup constants

ks	25. oct. 2008	rev 1.2
	optimized code

hm 16. jan 2009	rev 1.3
	corrected an error in module

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8dbc0f8d-b36b-4617-bef8-e28eaec407c6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TRIM" pouType="function">
        <interface>
          <returnType>
            <string length="STRING_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">TRIM := str;
REPEAT
	pos := FIND(trim,' ');
	IF pos &gt; 0 THEN TRIM := REPLACE(TRIM,'',1,pos); END_IF;
UNTIL pos = 0	END_REPEAT;


(* revision histroy
hm	6.10.2006		rev 1.0
	original release

hm	20. mar. 2008	rev 1.1
	avoid to call replace with pos = 0 because some systems will produce an error

hm	29. mar. 2008	rev 1.2
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f11d1b35-f31d-4cc5-9771-175e20d802ea</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TRIM1" pouType="function">
        <interface>
          <returnType>
            <string length="STRING_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">TRIM1 := str;
REPEAT
	pos := FIND(trim1,'  ');
	IF pos &gt; 0 THEN TRIM1 := REPLACE(TRIM1,' ',2,pos); END_IF;
UNTIL pos = 0	END_REPEAT;
(* beginning and ending blanks need to be stripped off *)
IF LEFT(trim1,1) = ' ' THEN trim1 := DELETE(trim1,1,1); END_IF;
IF RIGHT(trim1,1) = ' ' THEN trim1 := DELETE(trim1,1,LEN(trim1)); END_IF;


(* revision histroy
hm	4. feb. 2008    rev 1.0
	original release

hm	20. mar. 2008	rev 1.1
	avoid to call replace with pos = 0 because some systems will produce an error

hm	29. mar. 2008	rev 1.2
	changed STRING to STRING(STRING_LENGTH)
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>39aa6f74-943e-4ba2-b12f-d9d5fa4e3210</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TRIME" pouType="function">
        <interface>
          <returnType>
            <string length="string_length" />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">TRIME := str;
(* beginning blanks need to be stripped off *)
WHILE LEFT(TRIME,1) = ' ' DO
	TRIME := DELETE(TRIME,1,1);
END_WHILE;

(* ending blanks need to be stripped off *)
WHILE RIGHT(TRIME,1) = ' ' DO
	TRIME := DELETE(TRIME,1,LEN(TRIME));
END_WHILE;


(* revision histroy
hm	28. mar. 2008	rev 1.0
	original release

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>052cfc02-d974-4fd2-8e3a-07da9cecb239</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="UPPERCASE" pouType="function">
        <interface>
          <returnType>
            <string length="STRING_LENGTH" />
          </returnType>
          <inputVars>
            <variable name="str">
              <type>
                <string length="STRING_LENGTH" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="pt">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="l">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">pt := ADR(UPPERCASE);
UPPERCASE := str;
l := LEN(str);
FOR pos := 1 TO l DO
	pt^ := TO_UPPER(pt^);
	pt := pt + 1;
END_FOR;

(* revision histroy
hm	6. oct. 2006	rev 1.0
	original release

hm	4. feb. 2008	rev 1.1
	improved performance
	added Ä,Ö,Ü

hm	6. mar. 2008	rev 1.2
	added support for exteded Ascii

hm	29. mar. 2008	rev 1.3
	changed STRING to STRING(STRING_LENGTH)

*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8b8c35e0-6b6d-45d4-bf90-8793aff29ed6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="WEEKDAY_TO_STRING" pouType="function">
        <interface>
          <returnType>
            <string length="10" />
          </returnType>
          <inputVars>
            <variable name="WDAY">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="LANG">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="LX">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="ly">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF LANG = 0 THEN ly := LANGUAGE.DEFAULT; ELSE ly := MIN(LANG, LANGUAGE.LMAX); END_IF;
IF wday &lt; 1 OR wday &gt; 7 THEN
	RETURN;
ELSIF LX = 0 THEN
	WEEKDAY_TO_STRING := language.WEEKDAYS[ly, WDAY];
ELSIF Lx = 2 THEN
	WEEKDAY_TO_STRING := language.WEEKDAYS2[ly, WDAY];
END_IF;


(* revisison history

hm	21. sep. 2008	rev 1.0
	original version

hm	19. oct. 2008	rev 1.1
	changed language setup constants
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f5d70291-bf72-48d4-82c2-58f37f153791</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CALENDAR_CALC" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SPE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="H">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-0.83333333333" />
              </initialValue>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="XCAL">
              <type>
                <derived name="CALENDAR" />
              </type>
            </variable>
            <variable name="HOLIDAYS">
              <type>
                <array>
                  <dimension lower="0" upper="29" />
                  <baseType>
                    <derived name="HOLIDAY_DATA" />
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="last">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="last_day">
              <type>
                <DINT />
              </type>
            </variable>
            <variable name="holy">
              <type>
                <derived name="HOLIDAY" />
              </type>
            </variable>
            <variable name="sun">
              <type>
                <derived name="SUN_TIME" />
              </type>
            </variable>
            <variable name="last_hour">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="utod">
              <type>
                <TOD />
              </type>
            </variable>
            <variable name="pos">
              <type>
                <derived name="SUN_POS" />
              </type>
            </variable>
            <variable name="plast">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="dtemp">
              <type>
                <DINT />
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF xcal.UTC &lt;&gt; last THEN
	(* run once per second *)
	(* update utc last calculated  *)
	last := XCAL.UTC;
	utod := DT_TO_TOD(xcal.UTC);

	(* calculate ltc from utc *)
	XCAL.LDT := UTC_TO_LTIME(XCAL.UTC, XCAL.DST_EN, XCAL.OFFSET);
	XCAL.LDATE := DT_TO_DATE(XCAL.LDT);
	XCAL.LTOD := DT_TO_TOD(XCAL.LDT);
	dtemp := DAY_OF_DATE(XCAL.LDATE);

	(* run once per hour *)
	tmp := HOUR(xcal.LTOD);
	IF  tmp &lt;&gt; last_hour THEN
		XCAL.DST_ON := DST(XCAL.UTC) AND xcal.DST_EN;
		last_hour := tmp;
	END_IF;
	xcal.night := utod &lt; xcal.SUN_RISE OR utod &gt; xcal.SUN_SET;

	(* run once per day *)
	IF dtemp &lt;&gt; last_day THEN
		last_day := dtemp;
		(* a new day has started, recalculate daily events *)
		XCAL.YEAR := YEAR_OF_DATE(XCAL.LDATE);
		XCAL.MONTH := MONTH_OF_DATE(XCAL.LDATE);
		XCAL.DAY := DAY_OF_MONTH(XCAL.LDATE);
		XCAL.WEEKDAY := DAY_OF_WEEK(XCAL.LDATE);
		HOLY(date_in := XCAL.LDATE, LANGU := xcal.LANGUAGE, HOLIDAYS := HOLIDAYS);
		XCAL.HOLIDAY := HOLY.Y;
		XCAL.HOLY_NAME := HOLY.NAME;
		sun(latitude := XCAL.LATITUDE, longitude := xcal.LONGITUDE, utc := DT_TO_DATE(xcal.UTC), H := H);
		XCAL.SUN_RISE := DINT_TO_TOD(TOD_TO_DINT(sun.sun_rise) + XCAL.OFFSET * 60000 + SEL(XCAL.DST_ON,DINT#0,3600000));
		XCAL.SUN_SET := DINT_TO_TOD(TOD_TO_DINT(sun.sun_set) + XCAL.OFFSET * 60000 + SEL(XCAL.DST_ON,DINT#0,3600000));
		XCAL.SUN_MIDDAY := DINT_TO_TOD(TOD_TO_DINT(sun.MIDDAY) + XCAL.OFFSET * 60000 + SEL(XCAL.DST_ON,DINT#0,3600000));
		XCAL.SUN_HEIGTH := sun.sun_declination;
		XCAL.WORK_WEEK := WORK_WEEK(XCAL.LDATE);
	END_IF;

	(* calculate the suns position every 10 seconds when SPE = TRUE *)
	IF SPE AND xcal.UTC -  plast &gt;= t#25s THEN
		plast := last;
		pos(latitude := xcal.LATITUDE, longitude := xcal.LONGITUDE, utc := xcal.UTC);
		xcal.SUN_HOR := pos.B;
		xcal.SUN_VER := pos.HR;
	END_IF;
END_IF;



(* revision history

hm 23. oct. 2008	rev 1.0
	original version

hm	8. feb. 2009	rev 1.1
	night was calculated wrong
	added sun position data

hm	10. mar. 2009	rev 1.2
	added work_week, sun_midday, sun_heigth
	sun_position will only be calculated evey 25 seconds
	dst will only become true when dst_en = true

hm	23. jan 2010	rev 1.3
	sun_rise, sun_set and sun_midday are now calculated in local time

hm	18. jan. 2011	rev 1.4
	added input holidays to specify local holidays
	changed call for function sun_time

hm	2. feb. 2011		rev 1.5
	added input H to specify twilight

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a0d7f559-f8b9-4e83-b38e-735df3eabf20</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DATE_ADD" pouType="function">
        <interface>
          <returnType>
            <DATE />
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <DATE />
              </type>
            </variable>
            <variable name="D">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="W">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="M">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="Y">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="mo">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="yr">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">yr := Y + YEAR_OF_DATE(IDATE);
mo := M + MONTH_OF_DATE(IDATE);
WHILE mo &gt; 12 DO
	mo := mo - 12;
	yr := yr + 1;
END_WHILE;
WHILE mo &lt; 1 DO
	mo := mo + 12;
	yr := yr - 1;
END_WHILE;
DATE_ADD := SET_DATE(yr, mo, D + DAY_OF_YEAR(idate) + W * 7);


(* revision history

hm 27.12.2006	rev 1.0
	nrw module

hm 12.4.2007		rev 1.1
	corrected an error while date would be incorrect when year  = 0

hm	1.11.2007		rev 1.2
	added int_to_dword stetements to avoid possible overrun with möller ecp4

hm	22. mar. 2008	rev 1.3
	fixed some bugs when month was negative

hm	7. oct. 2008	rev 1.4
	changed function year to year_of_date
	changed function month to month_of_date

hm	29. mar. 2009	rev 1.5
	improved performance

hm	27. jan. 2011	rev 1.6
	faster code

hm	2. feb. 2011		rev 1.7
	fixed an error, weeks not calculated
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>86e1accf-c5ef-4d1b-94ef-d15f1044ae68</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DAY_OF_DATE" pouType="function">
        <interface>
          <returnType>
            <DINT />
          </returnType>
          <inputVars>
            <variable name="idate">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">DAY_OF_DATE := DWORD_TO_DINT(DATE_TO_DWORD(idate) / 86400);


(* revision history
hm		16.9.2007		rev 1.0
	original version

hm		1. okt 2007		rev 1.1
	added step7 compatibility

hm		22. mar. 2008	rev 1.2
	changed output from int to Dint because the total date range is 49710 days

hm		7. apr. 2008	rev 1.3
	deleted unused step7 code

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>90545b68-c6d8-4549-b372-e3810ea355b5</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DAY_OF_MONTH" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="leap">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* calculate the day in the year *)
DAY_OF_MONTH := DAY_OF_YEAR(idate);
(* leap will be set to one for a leap year *)
leap := BOOL_TO_INT(LEAP_OF_DATE(idate));
(* if leap year deduct one from the days of the year *)
DAY_OF_MONTH := DAY_OF_MONTH - leap;
(* search if we are in month december to march ? *)
IF DAY_OF_MONTH &gt; setup.MTH_OFS[9] THEN
	IF DAY_OF_MONTH &gt; setup.MTH_OFS[11] THEN
		IF DAY_OF_MONTH &gt; setup.mth_ofs[12] THEN
			DAY_OF_MONTH := DAY_OF_MONTH - setup.MTH_OFS[12];
		ELSE
			DAY_OF_MONTH := DAY_OF_MONTH - setup.MTH_OFS[11];
		END_IF;
	ELSE
		IF DAY_OF_MONTH &gt; setup.mth_ofs[10] THEN
			DAY_OF_MONTH := DAY_OF_MONTH - setup.MTH_OFS[10];
		ELSE
			DAY_OF_MONTH := DAY_OF_MONTH - setup.MTH_OFS[9];
		END_IF;
	END_IF;
ELSIF DAY_OF_MONTH &gt; setup.MTH_OFS[5] THEN
	IF DAY_OF_MONTH &gt; setup.MTH_OFS[7] THEN
		IF DAY_OF_MONTH &gt; setup.mth_ofs[8] THEN
			DAY_OF_MONTH := DAY_OF_MONTH - setup.MTH_OFS[8];
		ELSE
			DAY_OF_MONTH := DAY_OF_MONTH - setup.MTH_OFS[7];
		END_IF;
	ELSE
		IF DAY_OF_MONTH &gt; setup.mth_ofs[6] THEN
			DAY_OF_MONTH := DAY_OF_MONTH - setup.MTH_OFS[6];
		ELSE
			DAY_OF_MONTH := DAY_OF_MONTH - setup.MTH_OFS[5];
		END_IF;
	END_IF;
ELSIF DAY_OF_MONTH &gt; setup.MTH_OFS[3] THEN
	IF DAY_OF_MONTH &gt; setup.MTH_OFS[4] THEN
		DAY_OF_MONTH := DAY_OF_MONTH - setup.MTH_OFS[4];
	ELSE
		DAY_OF_MONTH := DAY_OF_MONTH - setup.MTH_OFS[3];
	END_IF;
ELSE
	(* since now we must be in february or january we need to add leap again *)
	DAY_OF_MONTH := DAY_OF_MONTH + leap;
	IF DAY_OF_MONTH &gt; setup.MTH_OFS[2] THEN DAY_OF_MONTH := DAY_OF_MONTH - setup.mth_ofs[2]; END_IF;
	(* since nothing was true before, day_of_month must already be good *)
END_IF;


(*
Revision history

hm 22.1.2007		rev 1.1
	deleted unused variable day_in_year and day_in_year_begin

hm	1. okt 2007	rev 1.2
	changed code to use day_of_year and leap_of_date
	added compatibility to STEP7

hm	8. oct 2007	rev 1.3
	deleted unused variable yr

hm	8. jan 2008	rev 1.4
	improved performance

hm	25. oct. 2008	rev 2.0
	new code using setup constants

hm	10. mar. 2009	rev 2.1
	removed nested comments

*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>49b794e1-f924-4fcb-ae9b-b653936e1091</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DAY_OF_WEEK" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">DAY_OF_WEEK := DWORD_TO_INT((DATE_TO_DWORD(idate) / 86400 + 3) MOD 7) + 1;


(* revision history
hm 	21.8.06 		rev 1.1
	corrected a miscalculation

hm	23.12.2007		rev 1.2
	correction for step7

hm	7. apr. 2008	rev 1.3
	deleted unused step7 code

hm	7. oct. 2008	rev 1.4
	changed name of function from weekday to day_of_week

*)



</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>45d6ba9d-c855-4579-9a90-5a7c000653eb</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DAY_OF_YEAR" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">DAY_OF_YEAR := UDINT_TO_INT((DATE_TO_UDINT(idate) / UDINT#86400) MOD UDINT#1461);
IF DAY_OF_YEAR &gt; 729 THEN
	IF DAY_OF_YEAR &gt; 1095 THEN DAY_OF_YEAR := DAY_OF_YEAR - 1095; ELSE DAY_OF_YEAR := DAY_OF_YEAR - 729; END_IF;
ELSIF DAY_OF_YEAR &gt; 364 THEN
	DAY_OF_YEAR := DAY_OF_YEAR - 364;
ELSE
	DAY_OF_YEAR := DAY_OF_YEAR + 1;
END_IF;


(*
DAY_OF_YEAR := DWORD_TO_INT((DATE_TO_DWORD(idate) - DATE_TO_DWORD(YEAR_BEGIN(YEAR_OF_DATE(idate)))) / 86400) + 1;
*)


(* revivision history
hm	4. aug. 2007		rev 1.0
	original version

hm	1. oct. 2007		rev 1.1
	added compatibility to STEP7

hm	4. jan. 2008		rev 1.2
	changed code for better performance

hm	7. oct. 2008		rev 1.3
	changed name of function year to year_of_date

hm	28. jan. 2011	rev 1.4
	improved code
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>95b76e54-f191-4c6f-b6a0-ca551cf1c2d0</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DAY_TO_TIME" pouType="function">
        <interface>
          <returnType>
            <TIME />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">DAY_TO_TIME := DWORD_TO_TIME(REAL_TO_DWORD(IN * 86400000.0));


(* revision history
hm	4. aug. 2006	rev 1.0
	original release

hm	24. feb. 2009	rev 1.1
	renamed input to IN
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>fd27b05c-e584-437c-abdf-0c0aa80edc29</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DAYS_DELTA" pouType="function">
        <interface>
          <returnType>
            <DINT />
          </returnType>
          <inputVars>
            <variable name="date_1">
              <type>
                <DATE />
              </type>
            </variable>
            <variable name="date_2">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF DATE_1 &gt; DATE_2 THEN
	DAYS_DELTA := - DWORD_TO_DINT((DATE_TO_DWORD(date_1) - DATE_TO_DWORD(date_2)) / 86400);
ELSE
	DAYS_DELTA := DWORD_TO_DINT((DATE_TO_DWORD(date_2) - DATE_TO_DWORD(date_1)) / 86400);
END_IF;

(* revision history
hm	27. dec 2006	rev 1.0
	original version

hm	16.9.2007		rev 1.1
	coorected an error in formula and changed algorithm to show positive and negative delta

hm	22. mar. 2008	rev 1.2
	changed output from int to dint because the total date range is 49710 days

hm	25. jan. 2011	rev 1.3
	improved performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>40255d78-49e7-4879-9be0-250b1b0b040b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DAYS_IN_MONTH" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">DAYS_IN_MONTH := DAY_OF_YEAR(IDATE);
IF LEAP_OF_DATE(IDATE) THEN
	CASE DAYS_IN_MONTH OF
		32..60	:	DAYS_IN_MONTH := 29;
		92..121 :	DAYS_IN_MONTH := 30;
		153..182:	DAYS_IN_MONTH := 30;
		245..274:	DAYS_IN_MONTH := 30;
		306..335:	DAYS_IN_MONTH := 30;
	ELSE
		DAYS_IN_MONTH := 31;
	END_CASE;
ELSE
	CASE DAYS_IN_MONTH OF
		32..59	:	DAYS_IN_MONTH := 28;
		91..120 :	DAYS_IN_MONTH := 30;
		152..181:	DAYS_IN_MONTH := 30;
		244..273:	DAYS_IN_MONTH := 30;
		305..334:	DAYS_IN_MONTH := 30;
	ELSE
		DAYS_IN_MONTH := 31;
	END_CASE;
END_IF;



(* revision history
hm	27. mar. 2009		rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5d0a8b0b-f461-4a9d-a023-5079a492fd98</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DAYS_IN_YEAR" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF LEAP_OF_DATE(IDATE) THEN
	DAYS_IN_YEAR := 366;
ELSE
	DAYS_IN_YEAR := 365;
END_IF;


(* revision history
hm	27. mar. 2009		rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>fffbf974-d5c3-4010-b1b5-db0043b3ba9a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DCF77" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="REC">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SDT">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="DSI">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SYNC_TIMEOUT">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#2m0s0ms" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="TIME_OFFSET">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="DST_EN">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="TP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="DS">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="WDAY">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="ERROR">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="RTC">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="RTC1">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="MSEC">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="SYNC">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="mez">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="utc">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="state">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="ty">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="bits">
              <type>
                <array>
                  <dimension lower="0" upper="58" />
                  <baseType>
                    <BOOL />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="old_time">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="minute">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="hour">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="day">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="month">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="year">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="last_sync">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="t1">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tz">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* if tp was set it should only be active for 1 cycle *)
TP := FALSE;

(* read system time *)
t1 := DWORD_TO_TIME(T_PLC_MS());
tx := t1 - last;

IF rec XOR edge THEN
	edge := rec;
	IF NOT rec AND tx &gt; t#1700ms AND tx &lt; t#2000ms THEN
		(* start condition reached *)
		state := 0;
		tp := NOT error;
	ELSIF NOT rec AND tx &gt; t#700ms AND tx &lt; t#1000ms THEN
		(* second switch detected *)
		IF state &lt; 58 THEN state := state +1; ELSE state := 0; END_IF;
	ELSIF rec AND tx  &lt; t#120ms THEN
		(* bit 0 detected  *)
		bits[state] := 0;
	ELSIF rec AND tx &gt; t#120ms AND tx &lt; t#250ms THEN
		(* bit 1 detected *)
		bits[state] := 1;
	ELSE
		(* error condition received signal is not valid *)
		error := TRUE;
		state := 0;
	END_IF;
	last := last + tx;
	IF rec AND state = 58 THEN
		error := FALSE;

		(* decode the bits and check for possible errors *)
		IF bits[0] OR NOT (bits[17] XOR bits[18]) OR NOT bits[20] THEN error := TRUE; END_IF;
		(* decode minute *)
		MINUTE := 0;
		MINUTE.0 := bits[21];
		MINUTE.1 := bits[22];
		MINUTE.2 := bits[23];
		MINUTE.3 := bits[24];
		IF bits[25] THEN MINUTE := MINUTE + 10; END_IF;
		IF bits[26] THEN MINUTE := MINUTE + 20; END_IF;
		IF bits[27] THEN MINUTE := MINUTE + 40; END_IF;
		IF MINUTE &gt; 59 OR (bits[21] XOR bits[22] XOR bits[23] XOR bits[24] XOR bits[25] XOR bits[26] XOR bits[27] XOR bits[28]) THEN error := TRUE; END_IF;

		(* decode hour *)
		HOUR := 0;
		HOUR.0 := bits[29];
		HOUR.1 := bits[30];
		HOUR.2 := bits[31];
		HOUR.3 := bits[32];
		IF bits[33] THEN HOUR := HOUR + 10; END_IF;
		IF bits[34] THEN HOUR := HOUR +20; END_IF;
		IF HOUR &gt; 23 OR (bits[29] XOR bits[30] XOR bits[31] XOR bits[32] XOR bits[33] XOR bits[34] XOR bits[35]) THEN error := TRUE; END_IF;

		(* decode day of month *)
		day := 0;
		day.0 := bits[36];
		day.1 := bits[37];
		day.2 := bits[38];
		day.3 := bits[39];
		IF bits[40] THEN day := day + 10; END_IF;
		IF bits[41] THEN day := day + 20; END_IF;
		IF day &gt; 31 THEN error := TRUE; END_IF;

		(* decode day of week *)
		wday := 0;
		wday.0 := bits[42];
		wday.1 := bits[43];
		wday.2 := bits[44];
		IF wday &gt; 7 OR wday &lt; 1 THEN error := TRUE; END_IF;

		(* decode month *)
		MONTH := 0;
		MONTH.0 := bits[45];
		MONTH.1 := bits[46];
		MONTH.2 := bits[47];
		MONTH.3 := bits[48];
		IF bits[49] THEN MONTH := MONTH +10; END_IF;
		IF MONTH &gt; 12 THEN error := TRUE; END_IF;

		(* decode year *)
		YEAR := 0;
		YEAR.0 := bits[50];
		YEAR.1 := bits[51];
		YEAR.2 := bits[52];
		YEAR.3 := bits[53];
		IF bits[54] THEN YEAR := YEAR + 10; END_IF;
		IF bits[55] THEN YEAR := YEAR + 20; END_IF;
		IF bits[56] THEN YEAR := YEAR + 40; END_IF;
		IF bits[57] THEN YEAR := YEAR + 80; END_IF;

		(* check parity for bits 36 to 58 *)
		cnt := 0;
		FOR i := 36 TO 58 DO IF bits[i] THEN cnt := cnt + 1; END_IF; END_FOR;
		IF NOT EVEN(cnt) THEN error := TRUE; END_IF;

		(* time must be valid for two cycles to clear error flag *)
		IF NOT error THEN
			(* set outputs *)
			old_time := mez;
			IF YEAR &gt;= 70 THEN YEAR := YEAR + 1900; ELSE YEAR := YEAR + 2000; END_IF;
			mez := SET_DT(YEAR,MONTH,day,HOUR,MINUTE,0);
			DS := bits[17];
			IF DS THEN
				UTC := DWORD_TO_DT(DT_TO_DWORD(mez) - 7200);
			ELSE
				UTC := DWORD_TO_DT(DT_TO_DWORD(mez) - 3600);
			END_IF;

			(* set trigger signal only if the receiver has received 2 successive minutes *)
			IF mez &lt;&gt; old_time + t#1m THEN error := TRUE ; END_IF;
		END_IF;
	END_IF;
END_IF;

(* this portion implements a free running clock which is triggered by the dcf77 signal *)
tz := DWORD_TO_TIME(INT_TO_DWORD(ABS(time_offset))* 3600000);

(* input sdt is copied to utc at first power up *)
IF NOT init OR SET THEN
	init := TRUE;
	utc := sdt;
	tp := TRUE;
	DS := DSI;
END_IF;

IF tp THEN
	rtc := utc;
	IF DS AND dst_en THEN
		IF time_offset &lt; 0 THEN	rtc1 := rtc - tz + t#1h; ELSE rtc1 := rtc + tz + t#1h; END_IF;
	ELSE
		IF time_offset &lt; 0 THEN rtc1 := rtc - tz; ELSE rtc1 := rtc + tz; END_IF;
	END_IF;
	sync := TRUE;
	last_sync := last;
	ty := last;
ELSIF rtc &gt; DWORD_TO_DT(0) AND T1 - ty &gt;= t#1s THEN
	rtc := rtc + t#1s;
	rtc1 := rtc1 + t#1s;
	ty := ty + t#1s;
	sync := ty - last_sync &lt; sync_timeout AND last_sync &gt; DWORD_TO_TIME(0);
	wday := DAY_OF_WEEK(DT_TO_DATE(rtc1));
	DS := dst_en AND DST(utc);
END_IF;
msec := TIME_TO_INT(t1 - ty);



(* decode information
bits		content
0			Bitwert immer 0
1 bis 14	reserviert für Betriebsinformationen (nicht für DCF77-Nutzer bestimmt)
15			Rufbit für Alarmierung der PTB-Mitarbeiter
			(bis Mai 2003: Bitwert = 0 falls normale Antenne in Verwendung; 1 = Backupantenne)
16			Bitwert = 1 falls ein Wechsel von MEZ nach MESZ oder umgekehrt bevorsteht; Dauer der Anzeige: 1 Stunde
17 + 18	gültige Zeit = MEZ, falls Bit 17=0 und Bit 18=1
			gültige Zeit = MESZ, falls Bit 17=1 und Bit 18=0
19			Bitwert = 1 falls innerhalb den nächsten 59 Minuten eine Schaltsekunde angeordnet ist. Beim Einfügen einer Schaltsekunde wird anstelle der 59. die 60. Sekundenmarke weggelassen und in der 58. erfolgt ausnahmsweise ein Trägerabfall.
20			Startbit für Zeitinformation (immer 1)
21 - 27		1, 2, 4, 8, 10, 20, 40 Minuten (bitweise Addition)
28			Prüfbit (gerade Parität) für die Bits 21-27
29 - 34		1, 2, 4, 8, 10, 20 Stunden (bitweise Addition)
35			Prüfbit (gerade Parität) für die Bits 29-34
36 - 41		Tagesnummer im aktuellen Monat: 1, 2, 4, 8, 10, 20 (bitweise Addition)
42 - 44		Tagesnummer in der aktuellen Woche: 1, 2, 4 (bitweise Addition)
45 - 49		Monatsnummer: 1, 2, 4, 8, 10 (bitweise Addition)
50 - 57		Jahr (zweistellig): 1, 2, 4, 8, 10, 20, 40, 80 (bitweise Addition)
58			Prüfbit (gerade Parität) füR die Bits 36-57

*)
(* revision history

hm 2.feb 2007		rev 1.1
	change wday and dst outputs when there is no dcf reception

hm	26.feb 2007		rev 1.2
	changed statements where t#1h would be substracted from DT.
	under certain conditions the compiler would crash translating this statement

hm	17. sep 2007	rev 1.3
	replaced time() with T_PLC_MS() for compatibility reasons

hm	24. oct 2007		rev 1.4
	changed dst calculation because function dst was upgraded no error in DCF77 only a change in DST

hm	12. nov 2007		rev 1.5
	changed time_offset from time to integer to allow for negative offset time zones

hm	8. dec 2007		rev 1.6
	corrected an error in time_zone calculation

hm 23. jan 2008		rev 1.7
	added sdt input which is used to initialize rtc and rtc1 during first cycle.

hm 16. mar 2008		rev 1.8
	changed output weekday to wday and dst to ds for compatibility reasons

hm	19. apr. 2008	rev 1.9
	added input dsi to allow to set daylight savings time when SDT is TRUE.
	added asynchronous SET input

hm	7. oct. 2008	rev 1.10
	changed function weekday to day_of_week

*)


</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d4910713-31a5-4636-8210-99b3c237f2e1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DST" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="UTC">
              <type>
                <DT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="yr">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="yr4">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="ltc">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="idate">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">yr := YEAR_OF_DATE(DT_TO_DATE(UTC));
ltc := DT_TO_DWORD(UTC);
idate := DT_TO_DWORD(SET_DT(yr, 3, 31, 1, 0, 0));
yr4 := SHR(5 * INT_TO_DWORD(yr), 2) + 1;
DST := (idate - ((yr4 + 3) MOD 7) * 86400 &lt;= ltc) AND (idate + (214 - (yr4) MOD 7) * 86400 &gt; ltc);


(*
Equation used TO calculate the beginning OF European Summer TIME:
Sunday (31 - (5*y/4 + 4) mod 7) March at 01.00 UTC
(valid through 2099, courtesy of Robert H. van Gent, EC).

European Summer Time ends (clocks go back) at 01.00 UTC on

    * 29 October 2006
    * 28 October 2007
    * 26 October 2008

Equation used to calculate the end of European Summer Time:
Sunday (31 - (5*y/4 + 1) mod 7) October at 01.00 UTC
(validity AND credits as above).

*)



(* revision history
hm	4. aug 2006	rev 1.0
	original version

hm	24. okt 2007	rev 1.1
	deleted time_zone_offset input because dst is generally at 01:00 utc and not mesz
	uk starts 01:00 utc and also greece

hm	1. dec 2007	rev 1.2
	changed code to improve performance

hm	16. mar. 2008	rev 1.3
	added type conversion to avoid warnings under codesys 3.0
	code improvement for better performance

hm	7. oct. 2008	rev 1.4
	changed name of function year to year_of_date

hm	24. jan. 2011	rev 1.5
	improved performance
*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>249a7cc4-a4ef-4b8e-82ae-619a857c93b2</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DT_TO_SDT" pouType="function">
        <interface>
          <returnType>
            <derived name="SDT" />
          </returnType>
          <inputVars>
            <variable name="DTI">
              <type>
                <DT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="tmp">
              <type>
                <DATE />
              </type>
            </variable>
            <variable name="tdt">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tmp := DT_TO_DATE(dti);
tdt := DT_TO_DWORD(dti) - DATE_TO_DWORD(tmp);
DT_TO_SDT.YEAR := YEAR_OF_DATE(tmp);
DT_TO_SDT.MONTH := MONTH_OF_DATE(tmp);
DT_TO_SDT.DAY := DAY_OF_MONTH(tmp);
DT_TO_SDT.WEEKDAY := DAY_OF_WEEK(tmp);
DT_TO_SDT.SECOND := DWORD_TO_INT(tdt MOD 60);
DT_TO_SDT.MINUTE := DWORD_TO_INT((tdt / 60) MOD 60);
DT_TO_SDT.HOUR := DWORD_TO_INT(tdt / 3600);

(* revision history

hm 18. oct. 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f1f92604-a741-4ab0-adcc-dcd52c866c11</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DT2_TO_SDT" pouType="function">
        <interface>
          <returnType>
            <derived name="SDT" />
          </returnType>
          <inputVars>
            <variable name="DI">
              <type>
                <DATE />
              </type>
            </variable>
            <variable name="TI">
              <type>
                <TOD />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">DT2_TO_SDT.YEAR := YEAR_OF_DATE(di);
DT2_TO_SDT.MONTH := MONTH_OF_DATE(di);
DT2_TO_SDT.DAY := DAY_OF_MONTH(di);
DT2_TO_SDT.WEEKDAY := DAY_OF_WEEK(di);
DT2_TO_SDT.MS := DWORD_TO_INT(TOD_TO_DWORD(ti) MOD 1000);
DT2_TO_SDT.SECOND := DWORD_TO_INT((TOD_TO_DWORD(ti) / 1000) MOD 60);
DT2_TO_SDT.MINUTE := DWORD_TO_INT((TOD_TO_DWORD(ti) / 60000) MOD 60);
DT2_TO_SDT.HOUR := DWORD_TO_INT(TOD_TO_DWORD(ti) / 3600000);

(* revision history

hm 18. oct. 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>06f59a59-1f50-4974-9a85-1bf6872291db</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="EASTER" pouType="function">
        <interface>
          <returnType>
            <DATE />
          </returnType>
          <inputVars>
            <variable name="year">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="b">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="c">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="oday">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">b := (204 - 11 * (YEAR MOD 19)) MOD 30;
IF b &gt; 27 THEN b := b - 1; END_IF;
c := (year + SHR(year,2) + b - 13) MOD 7;
oday := 28 + b - c;
IF oday &gt; 33 THEN
	EASTER := SET_DATE(year, 4, oday - 31);
ELSE
	EASTER := SET_DATE(year, 3, oday);
END_IF;




(* alternativer algorithmus ueber das pasah fest
execution time roughly 200us
Der sog. Passah-Vollmond wird berechnet, in dem das Jahr durch 19 ge-
teilt wird und der Rest mit der folgenden Tabelle verglichen wird:
 
    0: Apr 14       5: Apr 18      10: Mrz 25      15: Mrz 30
    1: Apr 03       6: Apr 08      11: Apr 13      16: Apr 17
    2: Mrz 23       7: Mrz 28      12: Apr 02      17: Apr 07
    3: Apr 11       8: Apr 16      13: Mrz 22      18: Mrz 27
    4: Mrz 31       9: Apr 05      14: Apr 10
 
Faellt dieses Datum auf einen Sonntag, ist Ostern der naechste Sonntag!
 
Beispiel: 1992 MOD 19 = 16, daraus folgt 17.04., der naechste Sonntag
          ist dann der 19. April (Ostersonntag)
*)


(* this algorithm is 180 us
a := year MOD 19;
b := year / 100;
c := year MOD 100;
d := b / 4;
e := b MOD 4;
f := (b + 8) / 25;
g := (b - f + 1) / 3;
h := (19 * a + b - d -g + 15) MOD 30;
i := C / 4;
k := c MOD 4;
l := (32 + 2*e + 2*i - h - k) MOD 7;
m := (a + 11 * h + 22 * l) / 451;
x := h + l - 7 * m + 114;
n := X / 31;
o := x MOD 31 + 1;

easter := set_Date(year,n,o);
*)
(*
Im Magazin "Nature" vom 20. April 1876 veröffentlichte ein anonymer Autor eine Tabelle mit Regeln zur Berechnung des (Gregorianischen) Ostersonntages des Jahres J. In Formeln ausgedrückt erhält man das Folgende:
a	=	J mod 19
b	=	int(J / 100)
c	=	J mod 100
d	=	int(b / 4)
e	=	b mod 4
f	=	int((b + 8) / 25)
g	=	int((b - f + 1) / 3
h	=	(19 · a + b - d - g + 15) mod 30
i	=	int(c / 4)
k	=	c mod 4
l	=	(32 + 2 · e + 2 · i - h - k) mod 7
m	=	int((a + 11 · h + 22 · l) / 451)
n	=	int((h + l - 7 · m + 114) / 31)
o	=	(h + l - 7 · m + 114) mod 31

n ist hierbei die Nummer des Monats, o + 1 die Nummer des Tages auf welchen der Ostersonntag im Jahr J fällt. Dieser Algorithmus kommt ohne Hilfszahlen aus.

*)

(* revision history
hm	27. dec 2006	rev 1.0
	original version

hm	15. dec 2007	rev 1.1
	modified code for better performance

hm	3. feb 2008		rev 1.2
	modified code for better performance

hm	7. apr. 2008	rev 1.3
	improved performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>44f2bde0-9869-4b49-b410-48cdb6f8824e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="EVENTS" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="DATE_IN">
              <type>
                <DATE />
              </type>
            </variable>
            <variable name="ENA">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="NAME">
              <type>
                <string length="30" />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="last_active">
              <type>
                <DATE />
              </type>
            </variable>
            <variable name="size">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="49" />
              </initialValue>
            </variable>
            <variable name="day_in">
              <type>
                <DINT />
              </type>
            </variable>
            <variable name="cyr">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="lday">
              <type>
                <DINT />
              </type>
            </variable>
            <variable name="check">
              <type>
                <derived name="HOLIDAY_DATA" />
              </type>
            </variable>
            <variable name="y_int">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="name_int">
              <type>
                <string length="30" />
              </type>
            </variable>
          </localVars>
          <inOutVars>
            <variable name="ELIST">
              <type>
                <array>
                  <dimension lower="0" upper="49" />
                  <baseType>
                    <derived name="HOLIDAY_DATA" />
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* for performance reasons only activate once a day *)
IF last_active &lt;&gt; date_in THEN
	last_active := DATE_IN;
	Y_int := FALSE;
	name_int := '';
	day_in := DAY_OF_DATE(DATE_IN);
	cyr := YEAR_OF_DATE(DATE_IN);

	(* search list for events *)
	FOR i := 0 TO size DO
		check := elist[i];
		lday := DAY_OF_DATE(SET_DATE(cyr,check.month, check.day));
		IF day_in &gt;= lday AND day_in &lt;= lday + check.use - 1 THEN
			y_int := TRUE;
			name_int := check.name;
			EXIT;
		END_IF;
	END_FOR;
END_IF;

IF ENA THEN
	Y := y_int;
	NAME := name_int;
ELSE
	Y := FALSE;
	NAME := '';
END_IF;

(* revision history
hm  18. jan. 2011	rev 1.0
	new module

*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0f20ac71-12c0-40d9-965f-b787f42298d5</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="HOLIDAY" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="DATE_IN">
              <type>
                <DATE />
              </type>
            </variable>
            <variable name="LANGU">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="FRIDAY">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SATURDAY">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SUNDAY">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="HOLIDAYS">
              <type>
                <array>
                  <dimension lower="0" upper="29" />
                  <baseType>
                    <derived name="HOLIDAY_DATA" />
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <localVars constant="true">
            <variable name="SIZE">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="29" />
              </initialValue>
            </variable>
          </localVars>
          <outputVars>
            <variable name="Y">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="NAME">
              <type>
                <string length="30" />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last_active">
              <type>
                <DATE />
              </type>
            </variable>
            <variable name="ostern">
              <type>
                <DATE />
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="jahr">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="x_date">
              <type>
                <DATE />
              </type>
            </variable>
            <variable name="lx">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="wdx">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* for performance reasons only activate once a day *)
IF last_active = date_in THEN RETURN; END_IF;
last_active := DATE_IN;

(* determine language *)
IF LANGU = 0 THEN
	lx := language.DEFAULT;
ELSE
	lx := MIN(language.LMAX, LANGU);
END_IF;

(* berechnung von ostern für das aktuelle jahr *)
jahr := YEAR_OF_DATE(date_in);
ostern := EASTER(jahr);
wdx := DAY_OF_WEEK(DATE_IN);
Y := FALSE;

(* check for holidays *)
FOR i := 0 TO size DO
	x_date := SET_DATE(jahr, HOLIDAYS[i].MONTH , HOLIDAYS[i].DAY);
	IF HOLIDAYS[i].USE = 1 AND HOLIDAYS[i].MONTH &gt; 0 THEN
		(* check for fixed date holiday *)
		IF x_date = date_in THEN
			Y := TRUE;
			NAME := HOLIDAYS[i].NAME;
			RETURN;
		END_IF;
	ELSIF HOLIDAYS[i].USE = 1 AND HOLIDAYS[i].MONTH = 0 THEN
		(* check for holiday in reference to easter *)
		IF DATE_ADD(ostern, HOLIDAYS[i].DAY ,0,0,0) = date_in THEN
			Y := TRUE;
			NAME := HOLIDAYS[i].NAME;
			RETURN;
		END_IF;
	ELSIF HOLIDAYS[i].USE &lt; 0 THEN
		(* check for holiday on a weekday before date *)
		IF DAY_OF_WEEK(date_in) = ABS(HOLIDAYS[i].USE) AND date_in &lt; x_date AND date_in &gt;= DATE_ADD(x_date,-7,0,0,0) THEN
			Y := TRUE;
			NAME := HOLIDAYS[i].NAME;
			RETURN;
		END_IF;
	END_IF;
END_FOR;

(* check array if today is weekend *)
IF NOT Y AND (wdx = 5 AND FRIDAY OR wdx = 6 AND SATURDAY OR wdx = 7 AND SUNDAY) THEN
	Y := TRUE;
	NAME := LANGUAGE.WEEKDAYS[LOCATION.LANGUAGE[lx],wdx];
ELSE
	NAME := '';
END_IF;


(*
Neujahrstag 	1. Januar 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	
Heilige Drei Könige 	6. Januar 	 	 												 		
Karfreitag 	Ostersonntag - 2d 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	
Ostersonntag 	siehe Osterdatum 				() 												
Ostermontag 	Ostersonntag + 1d 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	
Tag der Arbeit 	1. Mai 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	
Christi Himmelfahrt 	Ostersonntag + 39d 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	
Pfingstsonntag 	Ostersonntag + 49d 				() 												
Pfingstmontag 	Ostersonntag + 50d 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	
Fronleichnam 	Ostersonntag + 60d 	 	 					 			 	 	 	1) 			2)
Augsburger Friedensfest 	8. August 		(3) 														
Mariä Himmelfahrt 	15. August 		(5) 										 				
Tag der Deutschen Einheit 	3. Oktober 6) 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	
Reformationstag 	31. Oktober 				 				 					 	 		
Allerheiligen 	1. November 	 	 								 	 	 				
Buß- und Bettag 4) 	Mittwoch vor dem 23.11. 			7 										 			
1. Weihnachtstag 	25. Dezember 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	
2. Weihnachtstag 	26. Dezember 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	
*)



(* revision history
hm 	27. feb. 2007	rev 1.1
	deleted unused variable init

hm	31. oct. 2007	rev 1.2
	changed holiday definition from constant to input constant to allow easier changes by user without recompilation of the lib

hm 	24. nov. 2007	rev 1.3
	changes F_use of  Buß_und_Bettag to 0 because this is no official holiday

hm	7. apr. 2008	rev 1.4
	improved performance

hm	7. oct. 2008	rev 1.5
	changed code to use setup data from global constants
	changed length of output NAME from 20 to 30
	holiday will now also be indicated on a weekend
	changed function year to year_of_date
	changed function weekday to day_of_week

hm	21. oct. 2008	rev 1.6
	using location constants

hm	18. jan 2011	rev 2.0
	using user specified array for holidays

*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>bd0fadbb-035e-4b5f-ab9c-5456b28b7595</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="HOUR" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="itod">
              <type>
                <TOD />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">HOUR := DWORD_TO_INT(TOD_TO_DWORD(itod) / 3600000);


(* change history
hm 4. aug 2006	rev 1.0
	original version

hm 2.10.2006 	rev 1.1
	changed name of input to itod

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5acbcb0d-055d-4286-995b-9c9ba7c9401e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="HOUR_OF_DT" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="XDT">
              <type>
                <DT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">HOUR_OF_DT := DWORD_TO_INT((DT_TO_DWORD(XDT) MOD 86400) / 3600);


(* revision history
hm		6.9.2008	rev 1.0
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>833ca1f6-c12b-46ac-96f9-e547c19c7f61</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="HOUR_TO_TIME" pouType="function">
        <interface>
          <returnType>
            <TIME />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">HOUR_TO_TIME := DWORD_TO_TIME(REAL_TO_DWORD(IN * 3600000));


(* revision history
hm		4. aug 2006	rev 1.0
	original version

hm	14. mar. 2008	rev 1.1
	rounded the input after the last digit

hm	24. feb. 2009	rev 1.2
	changed input to IN
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>08e4a9ed-31e1-48e9-b7af-de3b006c3011</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="HOUR_TO_TOD" pouType="function">
        <interface>
          <returnType>
            <TOD />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">HOUR_TO_TOD := DWORD_TO_TOD(REAL_TO_DWORD(IN * 3600000));


(* revision history
hm	4. aug. 2006	rev 1.0
	original version

hm	14. mar. 2008	rev 1.1
	rounded the input after the last digit

hm	24. feb. 2009	rev 1.2
	changed input to IN
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>dff9c610-8c77-4f2b-a92c-c1e7b58e6c04</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="JD2000" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="DTI">
              <type>
                <DT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">JD2000 := DWORD_TO_REAL(DT_TO_DWORD(DTI) - 946728000) / 86400.0;

(* revision histroy
hm	15. jul. 2008	rev 1.0
	original release


*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7502ff7a-24c0-4c35-8f49-4f11187f2e2a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LEAP_DAY" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">LEAP_DAY := DATE_TO_UDINT(IDATE) MOD 126230400 = 68169600;


(* change history

hm 	15. jun. 2008	rev 1.0
	original version

hm	7. oct. 2008	rev 1.1
	changed function month to month_of_date

hm	24. jan. 2011	rev 1.2
	improved performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d5777147-2af1-4389-b6d1-45b5288e8207</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LEAP_OF_DATE" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="idate">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">LEAP_OF_DATE := SHL(((DATE_TO_DWORD(idate) + 43200) / 31557600), 30) = 16#80000000;


(* change history

2.10.2006		rev 1.1
the function now calls leap_year to accomodate further accuracy.
the function now works for any year from 1970 to 2100

8. jan 2008		rev 1.2
	improved code for better performance

28. jan. 2011	rev 1.3
	improved performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>52b95997-0b84-4e8f-8f73-7e48243d50e5</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LEAP_YEAR" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="yr">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">LEAP_YEAR := SHL(yr,14) = 0;

(* this code was used prior to rev 1.1

IF yr MOD 400 = 0 THEN leap_year := TRUE;
ELSIF yr MOD 100 = 0 THEN leap_year := FALSE;
ELSIF yr MOD 4 =0 THEN leap_year := TRUE;
ELSE leap_year := FALSE;
END_IF;

*)

(* change history

hm 	2.10.2006		rev 1.1
	the function now works for any year from 1970 up to 2100

hm	1. oct 2007		rev 1.2
	chaged code for higher performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e68f5980-db84-473d-9c43-c14e38d2a0d1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LTIME_TO_UTC" pouType="function">
        <interface>
          <returnType>
            <DT />
          </returnType>
          <inputVars>
            <variable name="CONVERSION_LTIME">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="DST">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TIME_ZONE_OFFSET">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">LTIME_TO_UTC := UDINT_TO_DT(DT_TO_UDINT(CONVERSION_LTIME) - INT_TO_UDINT(TIME_ZONE_OFFSET) * 60);
IF DST THEN LTIME_TO_UTC := LTIME_TO_UTC - T#1h; END_IF;

(* revision history
hm 5.7.2007		rev 1.0		
	original version

hm 5.11.2007		rev 1.1
	replaced literal constant with variable because of error in möller ecp4 compiler

hm	12.nov 2007	rev 1.2
	changed Type of time_zone_offset from time to int to allow for time zones with negative offset

hm	8. dec 2007	rev 1.3
	corrected a problem with time_zone_offset

hm	14. oct. 2008	rev 1.4
	changed time_zone_offset from int to real to allow for half hour offset

hm	20. oct. 2006	rev 1.5
	changed time_zone_offset from Real to INT, now in Minutes

hm	27. feb. 2009	rev 1.6
	added type conversions to avoid warnings under codesys 3.0

ks	13. nov. 2009	rev 1.7
	corrected error in formula

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>47fac7f2-f0ad-4886-a2b8-362abbbbe038</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MINUTE" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="itod">
              <type>
                <TOD />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MINUTE := DWORD_TO_INT(TOD_TO_DWORD(itod) / 60000 - TOD_TO_DWORD(itod) / 3600000 * 60);


(* change history

2.10.2006 changes name of input to itod

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e8e40b23-b70d-4c21-b684-e01c4b0add79</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MINUTE_OF_DT" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="XDT">
              <type>
                <DT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MINUTE_OF_DT := DWORD_TO_INT(DT_TO_DWORD(XDT) MOD 3600) / 60;


(* revision history
hm		6.9.2008	rev 1.0
	original version


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7c956a4f-dc3a-4ddf-ab3e-7408321bd1b9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MINUTE_TO_TIME" pouType="function">
        <interface>
          <returnType>
            <TIME />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MINUTE_TO_TIME := DWORD_TO_TIME(REAL_TO_DWORD(IN * 60000.0));


(* revision history
hm	4. aug 2006	rev 1.0
	original version

hm	14. mar 2008	rev 1.1
	rounded the input after the last digit

hm	24. feb. 2009	rev 1.2
	changed input to IN

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e6312cdd-7b1f-4c60-9a25-bb02ce38f0d6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MONTH_BEGIN" pouType="function">
        <interface>
          <returnType>
            <DATE />
          </returnType>
          <inputVars>
            <variable name="idate">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MONTH_BEGIN := DWORD_TO_DATE(DATE_TO_DWORD(idate) - INT_TO_DWORD(DAY_OF_MONTH(idate) - 1) * 86400);

(* revision history
hm	15. jun. 2008	rev 1.0
	original version	

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>88937bd6-d341-4f3f-98c8-450b1bb4d885</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MONTH_END" pouType="function">
        <interface>
          <returnType>
            <DATE />
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MONTH_END := DWORD_TO_DATE(DATE_TO_DWORD(SET_DATE(YEAR_OF_DATE(idate),MONTH_OF_DATE(idate)+1,1)) - 86400);



(* revision history
hm	15. jun. 2008	rev 1.0
	original version	

hm	7. oct. 2008	rev 1.1
	changed function year to year_of_date
	changed function month to month_of_date

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>3592f222-62c4-4d3d-a9eb-320761ecfef5</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MONTH_OF_DATE" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MONTH_OF_DATE := DAY_OF_YEAR(idate);
IF MONTH_OF_DATE &lt; 32 THEN
	MONTH_OF_DATE := 1;
ELSIF LEAP_OF_DATE(IDATE) THEN
	MONTH_OF_DATE := (MONTH_OF_DATE * 53 + 1668) / 1623;
ELSE
	MONTH_OF_DATE := (MONTH_OF_DATE * 53 + 1700) / 1620;
END_IF;


(* code for rev 1.2
MONTH_OF_DATE := DAY_OF_YEAR(IDATE);
IF LEAP_OF_DATE(IDATE) THEN
	CASE MONTH_OF_DATE OF
		1..31 	:	MONTH_OF_DATE := 1;
		32..60	:	MONTH_OF_DATE := 2;
		61..91	:	MONTH_OF_DATE := 3;
		92..121 :	MONTH_OF_DATE := 4;
		122..152:	MONTH_OF_DATE := 5;
		153..182:	MONTH_OF_DATE := 6;
		183..213:	MONTH_OF_DATE := 7;
		214..244:	MONTH_OF_DATE := 8;
		245..274:	MONTH_OF_DATE := 9;
		275..305:	MONTH_OF_DATE := 10;
		306..335:	MONTH_OF_DATE := 11;
		336..366:	MONTH_OF_DATE := 12;
	END_CASE;
ELSE
	CASE MONTH_OF_DATE OF
		1..31 	:	MONTH_OF_DATE := 1;
		32..59	:	MONTH_OF_DATE := 2;
		60..90	:	MONTH_OF_DATE := 3;
		91..120 :	MONTH_OF_DATE := 4;
		121..151:	MONTH_OF_DATE := 5;
		152..181:	MONTH_OF_DATE := 6;
		182..212:	MONTH_OF_DATE := 7;
		213..243:	MONTH_OF_DATE := 8;
		244..273:	MONTH_OF_DATE := 9;
		274..304:	MONTH_OF_DATE := 10;
		305..334:	MONTH_OF_DATE := 11;
		335..365:	MONTH_OF_DATE := 12;
	END_CASE;
END_IF;
*)


(* revision history
hm	1. aug 2006	rev 1.0
	original version	

hm	1. okt 2007	rev 1.1
	replaced old code (string conversion) with mathematics
	the execution time is now multiple times faster.

hm	7. oct. 2008	rev 1.2
	changed name of function from month to MONTH_OF_DATE

hm	27. mar. 2009	rev 1.3
	new improved code

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2fb8623c-618c-4cb3-9c89-25cb3b8877d6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MULTIME" pouType="function">
        <interface>
          <returnType>
            <TIME />
          </returnType>
          <inputVars>
            <variable name="t">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="M">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MULTIME := DWORD_TO_TIME(REAL_TO_DWORD(DWORD_TO_REAL(TIME_TO_DWORD(t))*M));

(* revision history
hm		2. oct 2006	rev 1.0
	original version

hm		14. mar 2008	rev 1.1
	rounded the result after the last digit

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>6b36b12e-e773-497f-89c5-272a77a90f5f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="PERIOD" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="d1">
              <type>
                <DATE />
              </type>
            </variable>
            <variable name="dx">
              <type>
                <DATE />
              </type>
            </variable>
            <variable name="d2">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="day1">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="day2">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="dayx">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">day1 := DAY_OF_YEAR(d1);
day2 := DAY_OF_YEAR(d2);
dayx := DAY_OF_YEAR(dx);
IF NOT LEAP_OF_DATE(dx) AND dayx &gt; 58 THEN dayx := dayx + 1; END_IF;
IF NOT LEAP_OF_DATE(d1) AND day1 &gt; 58 THEN day1 := day1 + 1; END_IF;
IF NOT LEAP_OF_DATE(d2) AND day2 &gt; 58 THEN day2 := day2 + 1; END_IF;

IF day2 &lt; day1 THEN
	(* the period spans over the new year *)
	PERIOD := dayx &lt;= day2 OR dayx &gt;= day1;
ELSE
	PERIOD := dayx &gt;= day1 AND dayx &lt;= day2;
END_IF;

(* code before rev 1.2
yx := year(dx);
p1 := date_add(d1,0,0,0,yx - year(d1));
p2 := date_add(d2,0,0,0,yx - year(d2));

IF p2 &gt;= p1 THEN
	period := dx &lt;= p2  AND dx &gt;= p1;
ELSE
	period := dx &lt;= p2 OR dx &gt;= p1;
END_IF;
*)


(* revision history

hm		19. sep 2007	rev 1.0
	original version

hm		20. sep 2007	rev 1.1
	corrected a problem with leap year

hm		4. jan 2008		rev 1.2
	changed code for better performance

hm		22. mar. 2008	rev 1.3
	function would deliver wrong results when d1, d2 or dx are a leap_year

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>38c418f7-14c1-4c74-b758-a1e012f9f465</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="PERIOD2" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="DP">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <dimension lower="0" upper="1" />
                  <baseType>
                    <DATE />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="DX">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">PERIOD2 := 	(DX &gt;= DP[0,0] AND DX &lt;= DP[0,1]) OR
			(DX &gt;= DP[1,0] AND DX &lt;= DP[1,1]) OR
			(DX &gt;= DP[2,0] AND DX &lt;= DP[2,1]) OR
			(DX &gt;= DP[3,0] AND DX &lt;= DP[3,1]);


(* revision history

hm		27. apr 2008	rev 1.0
	original version


*) </xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>fb18d5d5-83d5-410c-9b26-9c0a8b83ab30</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="REFRACTION" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="ELEV">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">elev := LIMIT(-1.9, elev, 80.0);
REFRACTION := 0.0174532925199433 / TAN(0.0174532925199433 * (ELEV + 10.3 / (ELEV + 5.11)));


(* revision histroy
hm	14. jul. 2008	rev 1.0
	original release

hm	7. mar. 2009	rev 1.1
	using new formula

*)	
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a64a1eca-54f6-40a1-8af4-9248d47829b9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="RTC_2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SDT">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="SMS">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="DEN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="OFS">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="UDT">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="DSO">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="XMS">
              <type>
                <INT />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="RT">
              <type>
                <derived name="RTC_MS" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* call rtc *)
RT(SET := SET, SDT := SDT, SMS := SMS);
UDT := rt.xdt;
XMS := rt.XMS;

(* check for daylight savings time and set dso output *)
DSO := DST(udt) AND DEN;

(* calculate time offset and set ldt output *)
LDT := DWORD_TO_DT(DT_TO_DWORD(UDT) + INT_TO_DWORD(ofs + BOOL_TO_INT(DSO)) * 60);


(* revision history
hm		20. jan. 2008	rev 1.0
	original version

hm		20. feb. 2008	rev 1.1
	added Millisecond Set input

hm		12. jun. 2008	rev 1.2
	improved performance

hm		20. jan. 2011	rev 1.3
	changed offset to be in minutes

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>87a077c4-532f-4029-b200-b7c1eab2cfa5</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="RTC_MS" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SDT">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="SMS">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="XDT">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="XMS">
              <type>
                <INT />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="last">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="Tx">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tx := T_PLC_MS();
IF set OR NOT init THEN
	(* clock needs to be set when set is true or after power up *)
	init := TRUE;
	xdt := SDT;
	XMS := SMS;
ELSE
	XMS := XMS + DWORD_TO_INT(tx - last);
	(* check if one second has expired *)
	IF XMS &gt; 999 THEN
		XDT := XDT + T#1s;
		XMS := XMS - 1000;
	END_IF;
END_IF;
last := tx;


(* revision history
hm		20. jan. 2008	rev 1.0
	original version

hm		20. feb. 2008	rev 1.1
	added Millisecond Set input
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ecaa85ad-04bd-4149-81e2-0664b6890624</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SDT_TO_DATE" pouType="function">
        <interface>
          <returnType>
            <DATE />
          </returnType>
          <inputVars>
            <variable name="DTI">
              <type>
                <derived name="SDT" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SDT_TO_DATE := SET_DATE(DTI.YEAR, DTI.MONTH, DTI.DAY);



(* revision history

hm 18. oct. 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>acb625c0-27ca-4c98-900e-03a206ec02a2</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SDT_TO_DT" pouType="function">
        <interface>
          <returnType>
            <DT />
          </returnType>
          <inputVars>
            <variable name="DTI">
              <type>
                <derived name="SDT" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SDT_TO_DT := SET_DT(DTI.YEAR, DTI.MONTH, DTI.DAY, DTI.HOUR, DTI.MINUTE, DTI.SECOND);



(* revision history

hm 18. oct. 2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a32a221e-786f-45f8-9605-04ef10b97bf7</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SDT_TO_TOD" pouType="function">
        <interface>
          <returnType>
            <TOD />
          </returnType>
          <inputVars>
            <variable name="DTI">
              <type>
                <derived name="SDT" />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SDT_TO_TOD := DWORD_TO_TOD(INT_TO_DWORD(DTI.HOUR) * 3600000 + INT_TO_DWORD(DTI.MINUTE) * 60000 + INT_TO_DWORD(DTI.SECOND) * 1000 + INT_TO_DWORD(DTI.MS));



(* revision history

hm 18. oct. 2008	rev 1.0
	original version

hm	16. nov. 2008	rev 1.1
	added typecasts to avoid warnings
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>210abb24-14ad-4efe-92c2-22653320d065</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SECOND" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="itod">
              <type>
                <TOD />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SECOND := DWORD_TO_REAL(TOD_TO_DWORD(itod) - TOD_TO_DWORD(itod)/60000 * 60000) / 1000.0;



(* change history

hm	2. oct. 2006 rev 1.1 
	changed name of input to itod

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7f619fdd-a9ba-4d18-aaca-58dc261938d7</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SECOND_OF_DT" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="XDT">
              <type>
                <DT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SECOND_OF_DT := DWORD_TO_INT(DT_TO_DWORD(XDT) MOD 60);

(* revision history
hm		6.9.2008	rev 1.0
	original version

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>9ec0da4b-6bdc-4083-b489-509ed6d157a1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SECOND_TO_TIME" pouType="function">
        <interface>
          <returnType>
            <TIME />
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SECOND_TO_TIME := DWORD_TO_TIME(REAL_TO_DWORD(IN * 1000.0));

(* revision history
hm	4. aug. 2006	rev 1.0
	original version

hm	14. mar. 2008	rev 1.1
	rounded the input after the last digit

hm	24. feb. 2009	rev 1.2
	changed input to IN
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>cdd6c180-35c1-4172-94be-e5da199ea1fd</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SET_DATE" pouType="function">
        <interface>
          <returnType>
            <DATE />
          </returnType>
          <inputVars>
            <variable name="YEAR">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="MONTH">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="DAY">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="count">
              <type>
                <DWORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* calculate the amount of days to 31.12. the year before *)
count := SHR(INT_TO_DWORD(YEAR) * 1461 - 2878172, 2) + INT_TO_DWORD(DAY + setup.MTH_OFS[LIMIT(1,month,12)]);
(* for leap years and month &gt; february then add one more day *)
IF MONTH &lt; 3 AND LEAP_YEAR(YEAR) THEN
	SET_DATE := DWORD_TO_DATE((count - 1) * 86400);
ELSE
	SET_DATE := DWORD_TO_DATE(count * 86400);
END_IF;


(* revision history
hm	4. aug. 2006	rev 1.0
	original version

hm	19 sep. 2007	rev 1.1
	use function leap_year to calculate leap year, more exceptions are handled

hm	1. okt	2007	rev 1.2
	added compatibility to step7

hm	16.dec 2007		rev 1.3
	changed code to improove performance

hm	3. jan. 2008	rev 1.4
	further improvements in performance

hm	16. mar. 2008	rev 1.5
	added type conversions to avoid warnings under codesys 3.0

hm	7. apr. 2008	rev 1.6
	deleted unused step7 code

hm	14. oct. 2008	rev 1.7
	optimized code for better performance

hm	25. oct. 2008	rev 2.0
	new code using setup constants

hm	16. nov. 2008	rev 2.1
	added typecasts to avoid warnings

hm	22. jan. 2011	rev 2.2
	improved performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>acb9c023-4b0e-47d7-a0a9-2262f64e9e43</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SET_DT" pouType="function">
        <interface>
          <returnType>
            <DT />
          </returnType>
          <inputVars>
            <variable name="year">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="month">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="day">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="hour">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="minute">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="second">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SET_DT := DWORD_TO_DT(DATE_TO_DWORD(SET_DATE(YEAR, MONTH, day)) + INT_TO_DWORD(SECOND) + INT_TO_DWORD(MINUTE) * 60 + INT_TO_DWORD(HOUR) * 3600);


(* revision history
hm	4. aug. 2006		rev 1.0
	original version

hm		19 sep. 2007	rev 1.1
	use function leap_year to calculate leap year, more exceptions are handled

hm		1. okt 2007		rev 1.2
	added step7 compatibility
	call function set_date

hm		8. oct 2007		rev 1.3
	deleted unused variables count and leap

hm		1. 11 2007		rev 1.4
	converted hour type integer to dword in calculation to avoid overrun on möller ecp4

hm		16. mar 2008	rev 1.5
	added type conversions to avoid warnings under codesys 3.0
*)

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>96706a04-fbdc-44a2-bcb8-d01049cad4b1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SET_TOD" pouType="function">
        <interface>
          <returnType>
            <TOD />
          </returnType>
          <inputVars>
            <variable name="hour">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="minute">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="second">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SET_TOD := DWORD_TO_TOD(REAL_TO_DWORD(SECOND * 1000.0) + INT_TO_DWORD(MINUTE) * 60000 + INT_TO_DWORD(HOUR) * 3600000);

(* revision history

hm		4.aug.2006		rev 1.0
	original version

hm		11. sep 2007	rev 1.1
	changed coding to avoid a compiler warning under twincat.

hm		1. nov 2007	rev 1.2
	changed coding to avoid possible overrun situation on möller ecp4

hm		2. Nov	2007	rev 1.3
	changed dword to DINT in calcualtion to avoid warnings with some compilers

hm		14. mar 2008	rev 1.4
	changed code to avoid rounding problem at last digit of millisecond

hm		16. mar. 2008	rev 1.5
	added type conversions to avoid warning under codesys 3.0
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>efa38aa3-436a-4d1d-888d-84c9920d997a</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SUN_MIDDAY" pouType="function">
        <interface>
          <returnType>
            <TOD />
          </returnType>
          <inputVars>
            <variable name="LON">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="UTC">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="T">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="OFFSET">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">T := INT_TO_REAL(DAY_OF_YEAR(utc));
OFFSET := -0.1752 * SIN(0.033430 * T + 0.5474) - 0.1340 * SIN(0.018234 * T - 0.1939);
SUN_MIDDAY := HOUR_TO_TOD(12.0 - OFFSET - lon * 0.0666666666666);


(* revision history

hm	26. jan. 2011	rev 1.0
	initial release

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>43f905ac-d628-4cde-aeb1-b372f4025bb8</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SUN_POS" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="latitude">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> latitude of geographical position  </xhtml>
              </documentation>
            </variable>
            <variable name="longitude">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> longitude of geographical position  </xhtml>
              </documentation>
            </variable>
            <variable name="utc">
              <type>
                <DT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">	world time				</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="B">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="H">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="HR">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="g">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="a">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="d">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="t1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="n">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="e">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="c">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="tau">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="sin_d">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rlat">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="sin_lat">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="cos_lat">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="cos_tau">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="cos_d">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
(* n is the julian date and the number of days since 1.1.2000-12:00 midday *)
(* be careful for step7 date startes 1.1.1990 instead of 1.1.1970 *)
(* for step7 this line must change *)
n := DWORD_TO_REAL(DT_TO_DWORD(UTC) - 946728000) * 0.000011574074074074;
g :=MODR(6.240040768 + 0.01720197 * n, math.PI2);
d := MODR(4.89495042 + 0.017202792 * n, math.PI2) + 0.033423055 * SIN(g) + 0.000349066 * SIN(2.0*g);
e := 0.409087723 - 0.000000006981317008 * n;
cos_d := COS(d);
sin_d := SIN(d);
a := ATAN(COS(e) * sin_d / cos_d);
IF cos_d &lt; 0.0 THEN a := a + math.PI; END_IF;
c := ASIN(SIN(e) * sin_d);

(* also here we must be very careful utc is from 1.1.1970 for step7 the formula must change *)
tau := RAD(MODR(6.697376 + (n - 0.25) * 0.0657098245037645 + DWORD_TO_REAL(TOD_TO_DWORD(DT_TO_TOD(utc))) * 0.0000002785383333, 24.0) * 15.0 + longitude) - a;
rlat := RAD(latitude);
sin_lat := SIN(rlat);
cos_lat := COS(rlat);
cos_tau := COS(tau);
t1 := cos_tau * sin_lat - TAN(c) * cos_lat;
B := ATAN(SIN(tau) / t1);
IF t1&lt; 0.0 THEN B := B + math.PI2; ELSE B := B + math.PI; END_IF;
B := DEG(MODR(B, math.PI2));
h := DEG(ASIN(COS(C) * cos_tau * cos_lat +SIN(c) * sin_lat));
IF h &gt; 180.0 THEN h := h - 360.0; END_IF;
(* consider refraction *)
HR := h + REFRACTION(h);


(* revision history
hm	1. feb 2007	rev 1.0
	original version

hm	6. jan 2008	rev 1.1
	performance improvements

hm	18. jan 2008	rev 1.2
	further performance improvements
	only calculate once every 10 seconds

hm	16. mar. 2008	rev 1.3
	added type conversion to avoid warnings under codesys 3.0

hm	30. jun. 2008	rev 1.4
	added type conversions to avoid warnings under codesys 3.0

hm	18. oct. 2008	rev 1.5
	using math constants

hm	17. dec. 2008	rev 1.6
	angles below horizon are displayed in negative degrees

hm	27. feb. 2009	rev 2.0
	new code with better accuracy

hm	7. mar. 2009	rev 2.1
	refraction is added after angle normalization
	deleted 10 second lockout
	added output for astronomical heigth h
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a0d9a87d-a1d3-475d-9f00-28ab27fa9387</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SUN_TIME" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="LATITUDE">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> latitude of geographical position  </xhtml>
              </documentation>
            </variable>
            <variable name="LONGITUDE">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> longitude of geographical position  </xhtml>
              </documentation>
            </variable>
            <variable name="UTC">
              <type>
                <DATE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">	world time	</xhtml>
              </documentation>
            </variable>
            <variable name="H">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="-0.83333333333" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> heighth above horizon for sunrise </xhtml>
              </documentation>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="MIDDAY">
              <type>
                <TOD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">	astrological midday in hours when sun stands at south direction	</xhtml>
              </documentation>
            </variable>
            <variable name="SUN_RISE">
              <type>
                <TOD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">	sun rise for current day in local time </xhtml>
              </documentation>
            </variable>
            <variable name="SUN_SET">
              <type>
                <TOD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">	sun set for current day in local time </xhtml>
              </documentation>
            </variable>
            <variable name="SUN_DECLINATION">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">	sun declination above horizon at midday in degrees	</xhtml>
              </documentation>
            </variable>
          </outputVars>
          <localVars>
            <variable name="dk">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> sun declination at midday </xhtml>
              </documentation>
            </variable>
            <variable name="delta">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> delta from midday for sunrise and sunset  </xhtml>
              </documentation>
            </variable>
            <variable name="b">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">B := latitude * 0.0174532925199433;
MIDDAY := SUN_MIDDAY(longitude, utc);
DK := 0.40954 * SIN(0.0172 * (INT_TO_REAL(DAY_OF_YEAR(utc)) - 79.35));
sun_declination := DEG(DK);
IF sun_declination &gt; 180.0 THEN sun_declination := sun_declination - 360.0; END_IF;
sun_declination := 90.0 - LATITUDE + sun_declination;
delta := HOUR_TO_TIME(ACOS((SIN(RAD(H)) - SIN(B) * SIN(DK)) / (COS(B) * COS(DK))) * 3.819718632);
sun_rise := MIDDAY - delta;
sun_set := MIDDAY + delta;

(* revision history

rev 1.1	hm	20.1.2007
	deleted unused variables sun_riseR and sun_setR

rev 1.2 hm 17.4.2007
	corrected error while sun:midday would not be corrected for longitude.

rev 1.3	hm	6. jan 2008
	performance improvements

rev	1.4 hm	17. jan 2008
	calculation is now only performed once a day

hm	10. mar. 2009	rev 1.5
	improved performance
	calculation will be performed on every call to allow movong installations

hm	26. jul 2009	rev 1.6
	fixed a problem with wrong midday calculation

hm	25. jan. 2011	rev 1.7
	using function sun_midday
	corrected angle of sun_declination
	added input H
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c5842405-55ba-4638-8df1-8abf6ce39a39</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TIMECHECK" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="TD">
              <type>
                <TOD />
              </type>
            </variable>
            <variable name="START">
              <type>
                <TOD />
              </type>
            </variable>
            <variable name="STOP">
              <type>
                <TOD />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF stop &lt; start THEN
	TIMECHECK := start &lt;= TD OR TD &lt; stop;
ELSE
	TIMECHECK := start &lt;= TD AND TD &lt; stop;
END_IF;



(* revision history
hm 19. jul. 2009	rev 1.0
	original release

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>05187abb-2a44-429b-b0c9-fea9fbd87d5c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="UTC_TO_LTIME" pouType="function">
        <interface>
          <returnType>
            <DT />
          </returnType>
          <inputVars>
            <variable name="UTC">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="DST_ENABLE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TIME_ZONE_OFFSET">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="tmp">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">tmp := TIME_ZONE_OFFSET * 60 + BOOL_TO_INT(DST_ENABLE AND DST(UTC)) * 3600;
IF tmp &lt; 0 THEN
	tmp := ABS(tmp);
	UTC_TO_LTIME := DWORD_TO_DT(DT_TO_DWORD(UTC) -  INT_TO_DWORD(tmp));
ELSE
	UTC_TO_LTIME := DWORD_TO_DT(DT_TO_DWORD(UTC) +  INT_TO_DWORD(tmp));
END_IF;


(* revision history

hm 2.10.2006	rev 1.1
	corrected an error where dst would be delayed by 0.1second

hm 17.1.2007	rev 1.2
	added utc input instead of internal sysrtcgettime because this would only work on wago.
	dst_enable would not be checked before dst would be enabled.

hm 18.3.2007	rev 1.3
	changed code, dst would not work during first cycle.

hm 24.10.2007	rev 1.4
	changed code because the execution every 100ms can cause major problems if the supplied time was not correct at start.
	use of new dst function

hm 12. nov 2007	rev 1.5
		changed Type of time_zone_offset from time to int to allow for time zones with negative offset

hm	8 dec 2007		rev 1.6
	corrected a problem with time_zone_offset

hm	14. oct. 2008	rev 1.7
	renamed module from LTIME to UTC_TO_LTIME
	changed function weekday to day_of_week
	optimized code for better performance

hm	20. oct. 2008	rev 1.8
	changes type of input TIME_ZONE_OFFSET from real to int, now is in +/-minutes
	deleted outputs DST_ON and WDAY
	converted to function

hm	27. feb. 2009	rev 1.9
	added type conversions to avoid warnings under codesys 3.0

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>cf43b22a-d28e-46a2-8069-e8c10826c199</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="WORK_WEEK" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="idate">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="d1">
              <type>
                <DATE />
              </type>
            </variable>
            <variable name="w1">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="ds">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="yr">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="w31">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="w01">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="wm">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* berechne den 1.1 des jahres von idate. *)
yr := YEAR_OF_DATE(idate);
d1 := YEAR_BEGIN(yr);
(* wochentag von d1 *)
w1 := DAY_OF_WEEK(d1);
(* offset des montags der eletzten KW des vorjahres *)
(* wenn der erste tag des jahres größer als donnerstag ist dann beginnt die letzte kw am montag davor *)
(* wenn der erste tag des jahres ein donnerstag oder kleiner ist beginnt die erste kw 2 montage davor *)
IF w1 &lt; 5 THEN
	ds := DATE_TO_DWORD(d1) - INT_TO_DWORD(w1+6) * 86400;
ELSE
	ds := DATE_TO_DWORD(d1) - INT_TO_DWORD(w1-1) * 86400;
END_IF;

(* kalenderwoche des eingangsdatums *)
WORK_WEEK := DWORD_TO_INT((DATE_TO_DWORD(idate) - ds) / 604800);

(* korrektur wenn work_week = 0 *)
IF work_week = 0 THEN
	(* work_week needs to be 53 when 1.jan of the year before is thursday or dec 31. is thursday. *)
	(* first and last weekday of a year is equal and one more day for a leap_year. *)
	IF w1 &gt; 1 THEN w31 := w1 - 1; ELSE W31 := 7; END_IF;
	IF LEAP_YEAR(yr - 1) AND w31 &gt; 1 THEN w01 := W31 - 1; ELSE w1 := 7; END_IF;
	(* if first or last day of a year is a thursday, the year has 53 weeks *)
	WORK_WEEK := 52 + BOOL_TO_INT(w31 = 4 OR w01 = 4);
ELSE
	(* end of year calculation *)
	(* calculated the first and last weekday *)
	IF leap_year(yr) THEN
		IF w1 &lt; 7 THEN w31 := w1 + 1; ELSE w31 := 1; END_IF;
	ELSE
		w31 := w1;
	END_IF;
	(* if first or last day is thursday then the year has 53 weeks otherwise only 52 *)
	wm := 52 + BOOL_TO_INT(w31 = 4 OR w1 = 4);
	IF WORK_WEEK &gt; wm THEN WORK_WEEK := 1; END_IF;
END_IF;



(* revision history

hm 	17.1.2007		rev 1.1
	deleted unused variable yday

hm	19. dec 2007	rev 1.2
	changed code for better performance
	changed code to comply with ISO8601

hm	16. mar 2008	rev 1.3
	added type conversions to avoid warnings under codesys 3.0

hm	7. oct. 2008	rev 1.4
	changed function year to year_of_date
	changed function weekday to day_of_week

hm	25. oct. 2008	rev 1.5
	optimized code for performance
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c35d3f38-5ec2-4c0d-9f6a-7c6ec6d0256c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="YEAR_BEGIN" pouType="function">
        <interface>
          <returnType>
            <DATE />
          </returnType>
          <inputVars>
            <variable name="y">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">YEAR_BEGIN := DWORD_TO_DATE(SHR(INT_TO_DWORD(y) * 1461 - 2878169,2) * 86400);



(* revision history
hm	19. dec 2007	rev 1.0
	original version

hm	4. jan 2008		rev 1.1
	formula for step7 was incorrect during leap years

hm	7. apr. 2008	rev 1.2
	deleted unused step7 code
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>6bd75b72-063a-4c73-bd21-e3d2163bc0c2</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="YEAR_END" pouType="function">
        <interface>
          <returnType>
            <DATE />
          </returnType>
          <inputVars>
            <variable name="y">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">YEAR_END := DWORD_TO_DATE(SHR(INT_TO_DWORD(y) * 1461 - 2876712, 2) * 86400);



(* revision history
hm	15. jun. 2008	rev 1.0
	original version

hm	24. jan 2011	rev 1.1
	improved performance
*)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ec1e45c4-d21a-47fe-ac71-f2a1410849e1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="YEAR_OF_DATE" pouType="function">
        <interface>
          <returnType>
            <INT />
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <DATE />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">YEAR_OF_DATE := DWORD_TO_INT((DATE_TO_DWORD(idate) + 43200) / 31557600 + 1970);


(* revision history
hm	4. aug 2006		rev 1.0
	original version

hm	1. okt 2007		rev 1.1
	corrected error in algorithm
	adjustment for S7 compatibility

hm	23.12.2007		rev 1.2
	changed code for better performance

hm	7. apr. 2008	rev 1.3
	deleted unused step7 code

hm	7. oct. 2008	rev 1.4
	renamed function (year) to year_of_date

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a25f37ab-d749-497d-8d32-bca5f07ad6f3</ObjectId>
          </data>
        </addData>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations />
  </instances>
  <addData>
    <data name="http://www.3s-software.com/plcopenxml/globalvars" handleUnknown="implementation">
      <globalVars name="Constants" constant="true">
        <variable name="STRING_LENGTH">
          <type>
            <INT />
          </type>
          <initialValue>
            <simpleValue value="250" />
          </initialValue>
        </variable>
        <variable name="LIST_LENGTH">
          <type>
            <INT />
          </type>
          <initialValue>
            <simpleValue value="250" />
          </initialValue>
        </variable>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>172761d7-35c2-42cb-996e-a2e49d5acc34</ObjectId>
          </data>
        </addData>
      </globalVars>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/globalvars" handleUnknown="implementation">
      <globalVars name="Globale_Variablen">
        <variable name="MATH">
          <type>
            <derived name="CONSTANTS_MATH" />
          </type>
        </variable>
        <variable name="PHYS">
          <type>
            <derived name="CONSTANTS_PHYS" />
          </type>
        </variable>
        <variable name="LANGUAGE">
          <type>
            <derived name="CONSTANTS_LANGUAGE" />
          </type>
        </variable>
        <variable name="SETUP">
          <type>
            <derived name="CONSTANTS_SETUP" />
          </type>
        </variable>
        <variable name="LOCATION">
          <type>
            <derived name="CONSTANTS_LOCATION" />
          </type>
        </variable>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e47d43bd-b888-4036-ad99-7befb3b335e5</ObjectId>
          </data>
        </addData>
      </globalVars>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/globalvars" handleUnknown="implementation">
      <globalVars name="Setup_Data">
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>913dad78-aca2-4551-aa54-7104c7789528</ObjectId>
          </data>
        </addData>
      </globalVars>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/libraries" handleUnknown="implementation">
      <Libraries>
        <Library Name="Standard, 3.5.15.0 (System)" Namespace="Standard" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="true" SystemLibrary="false" LinkAllContent="false" />
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>566de744-5de9-4470-829a-80aa82902c43</ObjectId>
          </data>
        </addData>
      </Libraries>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/projectstructure" handleUnknown="discard">
      <ProjectStructure>
        <Object Name="Library Manager" ObjectId="566de744-5de9-4470-829a-80aa82902c43" />
        <Folder Name="Data types">
          <Object Name="CALENDAR" ObjectId="a5b9d157-1c1e-4909-9f33-b4a9ef38b2d9" />
          <Object Name="COMPLEX" ObjectId="e8ac4e09-b0ab-4efb-93c5-cd575e26493b" />
          <Object Name="CONSTANTS_LANGUAGE" ObjectId="1f1649b0-1f08-441e-a123-09b032bc609b" />
          <Object Name="CONSTANTS_LOCATION" ObjectId="63dceff4-b361-4326-800c-a8d91ec4c15e" />
          <Object Name="CONSTANTS_MATH" ObjectId="177f03fe-7b14-47c8-a426-2cdeef436051" />
          <Object Name="CONSTANTS_PHYS" ObjectId="b6e62329-4c48-4f1d-86a2-19ae0a9c3fd8" />
          <Object Name="CONSTANTS_SETUP" ObjectId="d3477ca2-4e8c-4688-8872-a6addb6be8a6" />
          <Object Name="ESR_DATA" ObjectId="a604c0b3-ddf2-4fd3-b0e1-b6bad31a3399" />
          <Object Name="FRACTION" ObjectId="74ee3251-d3ab-48ac-b550-d5640e628960" />
          <Object Name="HOLIDAY_DATA" ObjectId="55194d09-7b2d-45ee-b4b3-4e84540a4271" />
          <Object Name="REAL2" ObjectId="53551506-c042-4606-8762-327e7b0fdf91" />
          <Object Name="SDT" ObjectId="1e5ea29c-02ab-4afc-8992-f1bca676b21f" />
          <Object Name="TIMER_EVENT" ObjectId="ad189606-94b5-4173-b9b4-6203a525118f" />
          <Object Name="VECTOR_3" ObjectId="beff4b13-8fed-49a8-856c-eebf8e68a388" />
        </Folder>
        <Folder Name="Global Variables">
          <Object Name="Constants" ObjectId="172761d7-35c2-42cb-996e-a2e49d5acc34" />
          <Object Name="Globale_Variablen" ObjectId="e47d43bd-b888-4036-ad99-7befb3b335e5" />
          <Object Name="Setup_Data" ObjectId="913dad78-aca2-4551-aa54-7104c7789528" />
        </Folder>
        <Folder Name="POUs">
          <Folder Name="Buffer Management">
            <Object Name="_BUFFER_CLEAR" ObjectId="5f0aad9f-fb78-4b26-b8b7-90857bfe74f3" />
            <Object Name="_BUFFER_INIT" ObjectId="8b90ecb1-4862-4bcb-be6c-7c4e128bc7c3" />
            <Object Name="_BUFFER_INSERT" ObjectId="8f47b667-f334-464f-8810-e3095433f546" />
            <Object Name="_BUFFER_UPPERCASE" ObjectId="bef19552-428f-4139-82dc-b97763e1b041" />
            <Object Name="_STRING_TO_BUFFER" ObjectId="ffa2002f-20af-49bb-bcbb-4c37818eadc9" />
            <Object Name="BUFFER_COMP" ObjectId="1703a4be-04d1-4d26-8804-d0e36a777646" />
            <Object Name="BUFFER_SEARCH" ObjectId="aafa40fe-2b6b-47be-9a6e-3ae0e8a72fda" />
            <Object Name="BUFFER_TO_STRING" ObjectId="5e5b404b-1dd8-4436-bde4-416151f36c60" />
          </Folder>
          <Folder Name="Engineering">
            <Folder Name="automation">
              <Object Name="DRIVER_1" ObjectId="643fac37-568d-445a-84a7-f93963324f5e" />
              <Object Name="DRIVER_4" ObjectId="e2d9b8c0-eef1-418c-8b16-f987a573656b" />
              <Object Name="DRIVER_4C" ObjectId="fa068df6-b002-45f4-a9c4-5d155a49a853" />
              <Object Name="FLOW_CONTROL" ObjectId="b201b613-0562-41be-aab6-9e9b39f27984" />
              <Object Name="FT_Profile" ObjectId="aecdf0d1-6c02-4d85-9792-2660c3b17965" />
              <Object Name="INC_DEC" ObjectId="81f5e27e-8abe-471c-9825-cb335ccc9a2b" />
              <Object Name="INTERLOCK" ObjectId="4b5f6878-c118-48e5-b690-cf0dcc682b88" />
              <Object Name="INTERLOCK_4" ObjectId="d686a97e-3715-4809-a4ca-be821f441c24" />
              <Object Name="MANUAL" ObjectId="51bf13e9-d81d-43e9-a836-389754fc9db2" />
              <Object Name="MANUAL_1" ObjectId="0894d015-e26b-4390-a64e-a0e4b63d029f" />
              <Object Name="MANUAL_2" ObjectId="efa0f7ff-a06f-465a-a8bc-ee1b4cfde02d" />
              <Object Name="MANUAL_4" ObjectId="5d9819a1-e1ed-431b-a460-dcef3e66370a" />
              <Object Name="PARSET" ObjectId="e706a545-9629-4601-a27c-e0d02981124a" />
              <Object Name="PARSET2" ObjectId="5efaffc4-0b91-4dc3-a113-bb63de157f1e" />
              <Object Name="SIGNAL" ObjectId="68491bf4-5cfa-444f-a981-006b4a9e083a" />
              <Object Name="SIGNAL_4" ObjectId="547c6909-bbf2-41cd-8c32-b98b564ee41e" />
              <Object Name="SRAMP" ObjectId="afa0bc8b-6928-4d72-8ef5-de0c8ccca2bf" />
              <Object Name="TUNE" ObjectId="be3321b5-bced-412d-bb5c-9458955f7d04" />
              <Object Name="TUNE2" ObjectId="7e476db2-b83f-4313-84b1-e2470fb4d1e1" />
            </Folder>
            <Folder Name="control">
              <Object Name="BAND_B" ObjectId="11f8a954-cfe7-4bf5-aa64-b5d0e50ddc45" />
              <Object Name="CONTROL_SET1" ObjectId="3da13fc8-3fdd-48d1-af62-c1955ac3885a" />
              <Object Name="CONTROL_SET2" ObjectId="da0c41d5-9944-472b-88b2-f071510ccf63" />
              <Object Name="CTRL_IN" ObjectId="e626a7da-9d8d-49a3-9b0d-112c467183de" />
              <Object Name="CTRL_OUT" ObjectId="2334af9f-8346-40d9-8c03-3f72eec7f79c" />
              <Object Name="CTRL_PI" ObjectId="949219f9-3937-4fdc-ad09-f477af914d6c" />
              <Object Name="CTRL_PID" ObjectId="36eecd8b-fde1-41c3-a5be-87130836ff6e" />
              <Object Name="CTRL_PWM" ObjectId="fa74c46a-e95e-4563-abc5-6c3641d1e2f8" />
              <Object Name="DEAD_BAND" ObjectId="4ee0db09-3674-4f56-b361-f6bf125a4ec6" />
              <Object Name="DEAD_BAND_A" ObjectId="069947df-6327-4e92-a174-82d45e48dbd2" />
              <Object Name="DEAD_ZONE" ObjectId="df8a730e-4fac-4d3b-bab4-43cd9ab2c372" />
              <Object Name="DEAD_ZONE2" ObjectId="74fddb64-805f-4ec9-9295-675651fc9f59" />
              <Object Name="FT_DERIV" ObjectId="5e9b1c80-1b8f-4a0d-87ee-32e6a36061a8" />
              <Object Name="FT_IMP" ObjectId="e648711f-b407-4317-838a-c52f946fb781" />
              <Object Name="FT_INT" ObjectId="18d4437a-a05e-40de-9438-f7fda2792da0" />
              <Object Name="FT_INT2" ObjectId="c3c36002-9989-4b93-a954-ec4495b770bb" />
              <Object Name="FT_PD" ObjectId="42f7c874-bdc6-4d7f-a44f-4ac39ffb455a" />
              <Object Name="FT_PDT1" ObjectId="5ecdcf92-8310-40c3-8047-1482bc4bba42" />
              <Object Name="FT_PI" ObjectId="5b622655-94f3-48a2-a49a-3e6ece0b3b76" />
              <Object Name="FT_PID" ObjectId="a3da8d94-7f21-4024-88df-c51cdcfbeb99" />
              <Object Name="FT_PIDW" ObjectId="bf65c227-f413-4335-9b9b-84441d75743b" />
              <Object Name="FT_PIDWL" ObjectId="28235897-0a0a-46d5-aa71-39717c10137c" />
              <Object Name="FT_PIW" ObjectId="e12f0080-8c81-4b92-acd9-c61cfe5052a6" />
              <Object Name="FT_PIWL" ObjectId="ca2e6a5f-e988-4cab-ba82-dc857d996069" />
              <Object Name="FT_PT1" ObjectId="b293d651-3b96-412a-991a-d82c5d599e18" />
              <Object Name="FT_PT2" ObjectId="1997d614-1c00-40ba-8b31-db0a54edde83" />
              <Object Name="FT_TN16" ObjectId="76c8cd62-7f24-477e-9971-428f86c35c67" />
              <Object Name="FT_TN64" ObjectId="cfa0da78-69e3-453e-b55d-9ccdeca5e7f1" />
              <Object Name="FT_TN8" ObjectId="438bbb1d-7b2c-4991-95c0-ce7f57093f87" />
              <Object Name="HYST" ObjectId="eb0f3089-3b0d-4602-bce8-148a6e9ec075" />
              <Object Name="HYST_1" ObjectId="199454a8-30d3-4c93-9f6a-d9c323f0337d" />
              <Object Name="HYST_2" ObjectId="ca6acf61-166f-4737-ab20-dd0b9ceafa26" />
              <Object Name="HYST_3" ObjectId="db8de9f3-d57d-4e29-9475-8fee4b119ab1" />
              <Object Name="INTEGRATE" ObjectId="42ea4fc4-8a9c-4793-8151-ba746ac3009a" />
            </Folder>
            <Folder Name="conversion">
              <Object Name="ASTRO" ObjectId="aea1b32e-48d1-405f-9d4e-44c448c54934" />
              <Object Name="BFT_TO_MS" ObjectId="a272451a-0611-46b6-aad9-6e1f56eb6992" />
              <Object Name="C_TO_F" ObjectId="8f800ab9-e9af-48d9-b316-5527cc9b3ed2" />
              <Object Name="C_TO_K" ObjectId="54e6b3f0-f68c-4cdf-a2bf-cf5c4e80d8ec" />
              <Object Name="DEG_TO_DIR" ObjectId="140a9248-b593-4834-93c0-73dded33381c" />
              <Object Name="DIR_TO_DEG" ObjectId="eea005e9-f93f-4c15-a351-579519ec2152" />
              <Object Name="ENERGY" ObjectId="62d6f4c2-d524-4d61-a22c-941841ca923e" />
              <Object Name="F_TO_C" ObjectId="42e47a36-227b-43e1-ab19-3d9242796365" />
              <Object Name="F_TO_OM" ObjectId="e18b8e7a-f6e2-4a19-b85e-5d481814cb53" />
              <Object Name="F_TO_PT" ObjectId="504490ec-9b93-4b5b-864c-20ed78cce536" />
              <Object Name="GEO_TO_DEG" ObjectId="b2675c36-0a94-404e-b1bf-808e57f8f31b" />
              <Object Name="K_TO_C" ObjectId="073c1edb-9f9d-443f-850c-2478e088061b" />
              <Object Name="KMH_TO_MS" ObjectId="4ccd5147-bc31-4132-996f-6004070e66fe" />
              <Object Name="LENGTH" ObjectId="fd7787b7-636f-4f53-a90f-9aa8f11e1921" />
              <Object Name="MS_TO_BFT" ObjectId="6b15dd2d-603d-41d9-b1b4-6149d7c9e6b8" />
              <Object Name="MS_TO_KMH" ObjectId="bedab5f1-b71d-4677-af20-6cb61b66fe5a" />
              <Object Name="OM_TO_F" ObjectId="e7da2557-c0b2-4f96-9fde-9eb5426e3979" />
              <Object Name="PRESSURE" ObjectId="b0f24e0e-d77e-476e-82e0-42a0f8df92b9" />
              <Object Name="PT_TO_F" ObjectId="5d330437-04fd-43cb-baca-107c0d76116b" />
              <Object Name="SPEED" ObjectId="407d342f-1520-428e-9493-120ea7e3cf17" />
              <Object Name="TEMPERATURE" ObjectId="532b31f5-2ba1-4b99-aa98-878935b81c15" />
            </Folder>
            <Folder Name="measurements">
              <Object Name="ALARM_2" ObjectId="72724efb-b923-46d7-9c54-0306d8d75edb" />
              <Object Name="BAR_GRAPH" ObjectId="441235cf-0530-4770-b65b-db7d818faf78" />
              <Object Name="CALIBRATE" ObjectId="df5c17b2-38b4-4706-96b4-f767c573dec2" />
              <Object Name="CYCLE_TIME" ObjectId="b4ceff3e-04e7-4a45-8223-7a3168d2ff37" />
              <Object Name="DT_SIMU" ObjectId="19e97595-b9cf-4299-b716-c793d19527e9" />
              <Object Name="FLOW_METER" ObjectId="6c35a5ec-2815-47c1-a530-9f58e14af80f" />
              <Object Name="M_D" ObjectId="e97f8fbe-c67f-44d8-84e8-baa1a9357670" />
              <Object Name="M_T" ObjectId="45f8c037-a5e7-4739-931c-62f30a23155e" />
              <Object Name="M_TX" ObjectId="e0cfe404-21bd-4a97-9f39-2e3bdd706557" />
              <Object Name="METER" ObjectId="40ac5c64-ad70-4610-a45a-60ff48f7a6e1" />
              <Object Name="METER_STAT" ObjectId="d6433212-9d0a-414f-8941-a1a1b9cd6de8" />
              <Object Name="ONTIME" ObjectId="96a60a66-5a9d-44ae-9558-156bc3eb38e6" />
              <Object Name="T_PLC_MS" ObjectId="c97c6a40-cea5-47e6-afe2-be246a9b28af" />
              <Object Name="T_PLC_US" ObjectId="367031e7-ad9b-40ef-85f8-d214da93d053" />
              <Object Name="TC_MS" ObjectId="34d2d3ac-ae08-4bb7-8333-e9e7ad24a25c" />
              <Object Name="TC_S" ObjectId="5e2cfe40-706f-40b7-a723-ae19d9accd74" />
              <Object Name="TC_US" ObjectId="921d0475-e2ca-49bf-aa24-68db7d39c232" />
            </Folder>
            <Folder Name="sensor">
              <Object Name="MULTI_IN" ObjectId="96f0e65e-c66a-47f2-96e3-80f28eeef210" />
              <Object Name="RES_NI" ObjectId="e5390e68-687b-473c-bec7-112bae1e95ce" />
              <Object Name="RES_NTC" ObjectId="7d86c835-5837-4d24-93fb-65897535d7ff" />
              <Object Name="RES_PT" ObjectId="ffe19050-5841-4634-89bc-15da8669e477" />
              <Object Name="RES_SI" ObjectId="02e8965f-5289-46ac-a707-e32e9e8b9a70" />
              <Object Name="SENSOR_INT" ObjectId="c9f61885-a9b4-4d6c-ad57-43d9ef8b8b6b" />
              <Object Name="TEMP_NI" ObjectId="ba2daeb3-44d6-40a7-b27e-f876451e8214" />
              <Object Name="TEMP_NTC" ObjectId="65127495-0255-4e4c-af91-f421660e4a74" />
              <Object Name="TEMP_PT" ObjectId="eec5f185-ac07-4c99-b885-9191d940a15a" />
              <Object Name="TEMP_SI" ObjectId="e469f09f-dfab-4e69-a94a-6fb6b707ac81" />
            </Folder>
            <Folder Name="signal generators">
              <Object Name="_RMP_B" ObjectId="f5f6bd43-08bf-4d8c-bfb4-cd8ea7e42636" />
              <Object Name="_RMP_NEXT" ObjectId="3d02d344-3dfb-4d20-813d-123cea3fd76e" />
              <Object Name="_RMP_W" ObjectId="22919bab-4175-41c8-89b7-bfd07ad95edf" />
              <Object Name="GEN_PULSE" ObjectId="b84655e5-d6b4-4093-8e02-1df75cf535cf" />
              <Object Name="GEN_PW2" ObjectId="969fd7df-14b3-4553-bd4a-9b821a005a9a" />
              <Object Name="GEN_RDM" ObjectId="73963004-f4a0-4ac5-a218-2b1bf9819547" />
              <Object Name="GEN_RDT" ObjectId="2171bff8-72ff-4c7b-bc1d-c9f060f7a71d" />
              <Object Name="GEN_RMP" ObjectId="f0b2d758-8e7f-4ab0-b1d6-cdddc219946c" />
              <Object Name="GEN_SIN" ObjectId="be729935-59ca-4674-a00e-de2cb70660f3" />
              <Object Name="GEN_SQR" ObjectId="c8c0369d-b4c9-49a6-926b-245590399f3d" />
              <Object Name="PWM_DC" ObjectId="f021ce35-3a59-483f-b659-da7d7f5d1aec" />
              <Object Name="PWM_PW" ObjectId="5e4dd744-fdaa-41c3-a0e1-071af30ba135" />
              <Object Name="RMP_B" ObjectId="a51d62b3-7aaf-4cd2-89a8-f72c207fef74" />
              <Object Name="RMP_SOFT" ObjectId="d84d5267-8399-4307-a612-0d3485f2ba39" />
              <Object Name="RMP_W" ObjectId="7fec7b19-194e-489d-873a-28b852801474" />
            </Folder>
            <Folder Name="signal processing">
              <Object Name="AIN" ObjectId="9f189695-b6d4-42f6-9aec-7e6bd571fab2" />
              <Object Name="AIN1" ObjectId="62998ee3-9f8c-4ca4-a60a-ff588e5d9164" />
              <Object Name="AOUT" ObjectId="ba6564b4-a54b-4bfc-ba52-5e8ae141e2ed" />
              <Object Name="AOUT1" ObjectId="631acd3e-94ac-433f-9a05-7ce7daf5d001" />
              <Object Name="BYTE_TO_RANGE" ObjectId="1cbe67e9-e5c7-4f16-b86a-8081736fe6c4" />
              <Object Name="DELAY" ObjectId="c4e3a1b5-dbfb-4620-9c5c-561a6ccfb7e0" />
              <Object Name="DELAY_4" ObjectId="6fd22e6d-015f-4be5-a1ae-8783779b0414" />
              <Object Name="FADE" ObjectId="9d1b08ee-9482-41b0-86f5-b4d440f20516" />
              <Object Name="FILTER_DW" ObjectId="7b5de28e-1a61-4f88-8665-cba12126ead1" />
              <Object Name="FILTER_I" ObjectId="b5406eeb-c711-492f-8e33-0ddf6e13b15d" />
              <Object Name="FILTER_MAV_DW" ObjectId="96fe32e3-1fe6-4a31-a679-b9b8dfa06e98" />
              <Object Name="FILTER_MAV_W" ObjectId="2cea7743-ff67-482b-af91-d36f2795b17a" />
              <Object Name="FILTER_W" ObjectId="07680d00-9bc2-41f4-b8cc-583909153ae8" />
              <Object Name="FILTER_WAV" ObjectId="c26ff96c-2498-422e-bf61-05b5396fcbd7" />
              <Object Name="MIX" ObjectId="0e76303d-0221-40ae-8e87-d3aaeaef7848" />
              <Object Name="MUX_R2" ObjectId="ae5dc544-5beb-45a3-9bcd-03c6d8cdeb1e" />
              <Object Name="MUX_R4" ObjectId="32331617-e01e-4c47-bdf8-378d26a39468" />
              <Object Name="OFFSET" ObjectId="ce816371-709d-4f88-8073-cc978688221f" />
              <Object Name="OFFSET2" ObjectId="ba7a80c0-4d91-4e09-ba84-12dc6ff3131b" />
              <Object Name="OVERRIDE" ObjectId="cb4ec5e6-1b8f-4c1b-a3c3-d8bb3e61e502" />
              <Object Name="RANGE_TO_BYTE" ObjectId="20c2145d-11ff-4cb6-8dda-784b53b83109" />
              <Object Name="RANGE_TO_WORD" ObjectId="ba060be5-dcc5-4fa5-83e7-f9665cbc17e0" />
              <Object Name="SCALE" ObjectId="3e183adc-0a29-4ac5-bc77-345aecbec482" />
              <Object Name="SCALE_B" ObjectId="6610630e-86ba-4867-a4ae-45086e2aaf4f" />
              <Object Name="SCALE_B2" ObjectId="4e487c6e-916a-4811-b40b-04e64f4b89c4" />
              <Object Name="SCALE_B4" ObjectId="d854863a-4341-46ab-88a3-c6790ca32ed5" />
              <Object Name="SCALE_B8" ObjectId="820006c1-9d5a-41da-9527-93fe6227c25c" />
              <Object Name="SCALE_D" ObjectId="dbaab335-4d9f-4713-b3a0-c145e77a36bc" />
              <Object Name="SCALE_R" ObjectId="cc853f4c-e73d-4151-9654-1c66a1c033e4" />
              <Object Name="SCALE_X2" ObjectId="a240e13f-b00c-4610-b4fa-f210a17fc0c9" />
              <Object Name="SCALE_X4" ObjectId="d695f591-0bba-4334-bd42-73dff0055654" />
              <Object Name="SCALE_X8" ObjectId="4064d069-942f-4ef2-a2f2-39d48ca12cad" />
              <Object Name="SEL2_OF_3" ObjectId="8bb1e73b-91f1-4398-8d2d-0a23c5b0ca3d" />
              <Object Name="SEL2_OF_3B" ObjectId="504e5b4b-1e45-4859-adc5-7e9456966ca6" />
              <Object Name="SH" ObjectId="03addff4-4662-4d7c-8fd2-5b9e20928244" />
              <Object Name="SH_1" ObjectId="c28204f8-c3d7-4e2c-b38e-3d77defc3599" />
              <Object Name="SH_2" ObjectId="5b847c51-7262-4b72-85a7-bde2c85b151a" />
              <Object Name="SH_T" ObjectId="607c0f42-4ea2-4d07-9a8f-2b77328b42ef" />
              <Object Name="STAIR" ObjectId="7139fa71-806a-4850-95ac-8f1b9d85dd87" />
              <Object Name="STAIR2" ObjectId="566e3b9e-0512-49cd-8f67-93466a162c25" />
              <Object Name="TREND" ObjectId="7f2f3513-357a-4493-963c-044c6c4dad62" />
              <Object Name="TREND_DW" ObjectId="50921217-4eb0-48c6-9ae5-ead4b3dfac1f" />
              <Object Name="WORD_TO_RANGE" ObjectId="4cc7a579-2a49-48fc-8431-54b1c135329e" />
            </Folder>
          </Folder>
          <Folder Name="List Processing">
            <Object Name="LIST_CLEAN" ObjectId="87ce8a97-e1c1-4845-8be0-a0c279b9cdc8" />
            <Object Name="LIST_GET" ObjectId="743a005d-5776-47c1-b1cf-a7905a506a88" />
            <Object Name="LIST_INSERT" ObjectId="3cf8bc29-467c-4cfd-81ac-46e3bffdef6c" />
            <Object Name="LIST_LEN" ObjectId="395e37ab-92d7-46e7-a76c-1d060c3fbe66" />
            <Object Name="LIST_NEXT" ObjectId="4cc84108-3ec8-460e-9759-41d8b5b1aef6" />
            <Object Name="LIST_RETRIEVE" ObjectId="b4d8bccd-a237-4dec-9a23-5ca1a770d6af" />
            <Object Name="LIST_RETRIEVE_MAX" ObjectId="9a02e9d6-dced-43c6-934b-72e34623747e" />
            <Object Name="LIST_RETRIEVE_MIN" ObjectId="371f716e-76c7-4e6a-af96-1e7a5c3813f1" />
            <Object Name="LIST_SORT_L" ObjectId="13b3577a-0e33-440a-8d03-0a670b33c6d7" />
          </Folder>
          <Folder Name="Logic">
            <Folder Name="FF edge triggered">
              <Object Name="COUNT_BR" ObjectId="7811d0eb-b282-4662-8f47-7d95f6c5141a" />
              <Object Name="COUNT_DR" ObjectId="be0a1d3f-7fd4-46fe-9f8d-d65ef74d8d63" />
              <Object Name="FF_D2E" ObjectId="124cd85c-3246-4ceb-bf9f-850bda9c4001" />
              <Object Name="FF_D4E" ObjectId="4b2222e8-2c31-4cc5-88e3-52cded7725cf" />
              <Object Name="FF_DRE" ObjectId="f16dcea6-aba3-4fb3-b515-36b4cfe29c0c" />
              <Object Name="FF_JKE" ObjectId="52f4397a-b05e-42f7-8983-390fb66035d9" />
              <Object Name="FF_RSE" ObjectId="2dfb5b30-426b-43c4-8fa5-a1f6087b6911" />
              <Object Name="SELECT_8" ObjectId="d5f5eafc-b104-4914-861e-49c1022dd7fd" />
              <Object Name="SHR_4E" ObjectId="687c9193-6081-478a-bae3-711c80ca8939" />
              <Object Name="SHR_4UDE" ObjectId="068aa4dc-1f25-4dff-a63a-12cc38937813" />
              <Object Name="SHR_8PLE" ObjectId="4f8580a5-5a0c-4e85-a37d-fd56e52dacce" />
              <Object Name="SHR_8UDE" ObjectId="81f7e275-fd19-46c3-9683-a42375851153" />
              <Object Name="TOGGLE" ObjectId="24cbb80a-066c-4427-9784-9da5e6a58463" />
            </Folder>
            <Folder Name="FF pulse triggered">
              <Object Name="LTCH" ObjectId="e155ff92-afc8-4cc3-acd5-d846803d6827" />
              <Object Name="LTCH_4" ObjectId="380920c8-7d97-4409-aa66-a43eb8d880e4" />
              <Object Name="STORE_8" ObjectId="e3bb6d14-9fa2-4b80-bf3d-bce54dd4e21b" />
            </Folder>
            <Folder Name="gate logic">
              <Object Name="BCDC_TO_INT" ObjectId="cfe07cc0-6553-4345-9e4a-aee0070fbecb" />
              <Object Name="BIT_COUNT" ObjectId="caed469e-6278-4b93-9696-3954d246135c" />
              <Object Name="BIT_LOAD_B" ObjectId="3170fa88-d793-4379-b0a5-51bcfdc9e34d" />
              <Object Name="BIT_LOAD_B2" ObjectId="137ee14b-8866-498d-a25c-b2616dbb8392" />
              <Object Name="BIT_LOAD_DW" ObjectId="b70bde73-f82d-47bb-a631-4c879cc4935f" />
              <Object Name="BIT_LOAD_DW2" ObjectId="c8690866-6a7a-4ff3-8d8f-0b65d010b70a" />
              <Object Name="BIT_LOAD_W" ObjectId="7370c29f-a787-44c2-b722-8bc3854a3bf8" />
              <Object Name="BIT_LOAD_W2" ObjectId="ec1caf9b-0baf-449c-8947-17afb47e4a6e" />
              <Object Name="BIT_OF_DWORD" ObjectId="8f653a07-d443-4dba-8fc3-4a2953ae5fec" />
              <Object Name="BIT_TOGGLE_B" ObjectId="8e351c47-90b9-4e13-bdb1-9f23bcfbdb26" />
              <Object Name="BIT_TOGGLE_DW" ObjectId="8178e303-473e-4647-86d2-7dc92c39dae5" />
              <Object Name="BIT_TOGGLE_W" ObjectId="bc5619ca-32bc-4e72-86e6-0fe911308d25" />
              <Object Name="BYTE_OF_BIT" ObjectId="add4f04b-5055-4173-a1a5-39ff98c38a8c" />
              <Object Name="BYTE_OF_DWORD" ObjectId="a7a6eb36-d2c7-4cf2-9a03-9e7df4e6a752" />
              <Object Name="BYTE_TO_BITS" ObjectId="bc906f55-4949-498b-97c1-9caee5cc6321" />
              <Object Name="BYTE_TO_GRAY" ObjectId="b6014c03-2de5-49fe-9731-0e004b0094c6" />
              <Object Name="CHECK_PARITY" ObjectId="594bc979-dfdb-473d-a89a-285edbd89831" />
              <Object Name="CHK_REAL" ObjectId="656220cb-df8b-4b81-9c6b-8d8f4218c32b" />
              <Object Name="DEC_2" ObjectId="94bbeb88-c444-43ff-9a0f-429b22d6d1df" />
              <Object Name="DEC_4" ObjectId="db9ecfcf-e459-454c-a991-0aaf9560b230" />
              <Object Name="DEC_8" ObjectId="4e8dbfd7-b8a5-4e09-8075-23b0fc50ba73" />
              <Object Name="DW_TO_REAL" ObjectId="4d546cc2-ad5b-490e-981e-e13b30c07b53" />
              <Object Name="DWORD_OF_BYTE" ObjectId="4b46121b-3640-49a0-a659-400ad32eb973" />
              <Object Name="DWORD_OF_WORD" ObjectId="5f71df9d-e9de-4aa6-a789-b8af8ac41121" />
              <Object Name="GRAY_TO_BYTE" ObjectId="eb1f2d0b-c256-4671-934e-0df8683b4751" />
              <Object Name="INT_TO_BCDC" ObjectId="89354b12-55e2-4e16-b86c-723b98179bec" />
              <Object Name="MUX_2" ObjectId="a5db44f2-f509-49e6-b923-a78dce07bd59" />
              <Object Name="MUX_4" ObjectId="eec632e8-6b65-4a36-a7e5-9e9f23555a64" />
              <Object Name="PARITY" ObjectId="7298fb20-6a56-42e6-a17c-3fffe431fd6b" />
              <Object Name="REAL_TO_DW" ObjectId="063878ae-ca8b-4485-86aa-958e7ee016a8" />
              <Object Name="REFLECT" ObjectId="ffbcbea8-862d-46a6-97da-f31a43d19d59" />
              <Object Name="REVERSE" ObjectId="a52b3dd3-b7c6-4419-af6e-b808011072a5" />
              <Object Name="SHL1" ObjectId="a81b41eb-b012-48f7-8688-8452dbca9220" />
              <Object Name="SHR1" ObjectId="6374febc-1f0b-4736-90d7-9a3630840e1e" />
              <Object Name="SWAP_BYTE" ObjectId="1d26072c-24cd-4b2a-950e-e0c3f58cd61e" />
              <Object Name="SWAP_BYTE2" ObjectId="f46b3aca-cc3f-457c-90d7-9e883051934a" />
              <Object Name="WORD_OF_BYTE" ObjectId="78f0f7e5-9be5-4b67-b552-3fe0457cf7c7" />
              <Object Name="WORD_OF_DWORD" ObjectId="f19ea3f3-12bd-4df1-b580-9c2a669b0cc5" />
            </Folder>
            <Folder Name="generators">
              <Object Name="A_TRIG" ObjectId="5ee8529f-9dca-4668-86fe-b099d10ce193" />
              <Object Name="B_TRIG" ObjectId="c2fdab2a-57ca-4223-a7ae-86b56eedee2c" />
              <Object Name="CLICK_CNT" ObjectId="4bad6b9a-1897-4119-91a6-d55cf9ec7356" />
              <Object Name="CLICK_DEC" ObjectId="93d576cc-b401-4e8d-b091-14901ef54946" />
              <Object Name="CLK_DIV" ObjectId="a0bd8950-f406-45c0-8e38-fc74b664d233" />
              <Object Name="CLK_N" ObjectId="bd4308b5-4519-4fda-8066-12c7805dab79" />
              <Object Name="CLK_PRG" ObjectId="59d89b5b-4fe4-433d-82a8-e0bcbd578f55" />
              <Object Name="CLK_PULSE" ObjectId="d4868424-390c-4e6b-8b11-76a36ea449f5" />
              <Object Name="CYCLE_4" ObjectId="c3966816-50ce-40a6-8f99-c35feadafd7f" />
              <Object Name="D_TRIG" ObjectId="d13f3da8-706c-4b7d-9e15-08ba1393880a" />
              <Object Name="GEN_BIT" ObjectId="d2c48fd8-4e4d-41b7-bdf6-142e22dad2d6" />
              <Object Name="GEN_SQ" ObjectId="a466fda1-7094-484c-99fd-c372a15a5038" />
              <Object Name="SCHEDULER" ObjectId="f2489a90-a13d-41e8-835a-8c59fdaf2700" />
              <Object Name="SCHEDULER_2" ObjectId="7cd1a237-ce97-4fb7-a94d-3e8972342ea3" />
              <Object Name="SEQUENCE_4" ObjectId="36a16cad-b80c-4e0d-8cf4-b84e56ec2afc" />
              <Object Name="SEQUENCE_64" ObjectId="4b686313-4164-473c-a8a7-f2b7d97862cb" />
              <Object Name="SEQUENCE_8" ObjectId="23517de6-9991-4231-9f75-991654a200af" />
              <Object Name="TMAX" ObjectId="54a7ca13-229a-4bbe-bd1e-6dfb25903cd9" />
              <Object Name="TMIN" ObjectId="c70e0e6d-6e6d-4680-bd84-c57c68770a74" />
              <Object Name="TOF_1" ObjectId="c3a64b61-d42c-4972-a66d-6153460ab486" />
              <Object Name="TONOF" ObjectId="bf09bac8-f63d-4ef7-b394-16bf877720ac" />
              <Object Name="TP_1" ObjectId="aa44bd28-5ab8-427d-8f13-a3345a65c7ca" />
              <Object Name="TP_1D" ObjectId="d6a42c0a-23d8-47cd-a510-43a8da2d3a72" />
              <Object Name="TP_X" ObjectId="5d0bad27-a609-4137-a975-c850813f1169" />
            </Folder>
            <Folder Name="memory">
              <Object Name="FIFO_16" ObjectId="72ef28ae-d891-45e6-9848-73d80e703472" />
              <Object Name="FIFO_32" ObjectId="ca5ef9ce-0210-49c9-9c24-b51e9d949d0d" />
              <Object Name="STACK_16" ObjectId="893fe7d9-707b-4351-a79b-4170a50a7fc2" />
              <Object Name="STACK_32" ObjectId="3da2af65-2831-4db8-aa11-0e654b8d32b7" />
            </Folder>
            <Folder Name="Others">
              <Object Name="CRC_GEN" ObjectId="e61d6a3c-9ea6-4ab6-b71e-36ef89619e8d" />
              <Object Name="MATRIX" ObjectId="e4f669b0-5683-4575-9b33-25b7a2a2f015" />
              <Object Name="PIN_CODE" ObjectId="0b86ef17-fe88-49d3-bc6f-192b34071c6b" />
            </Folder>
          </Folder>
          <Folder Name="Mathematical">
            <Folder Name="Array">
              <Object Name="_ARRAY_ABS" ObjectId="8791eef6-68c4-4bad-809e-d029f81d57ba" />
              <Object Name="_ARRAY_ADD" ObjectId="1965684d-3994-4b9b-80fd-df48d069ef5d" />
              <Object Name="_ARRAY_INIT" ObjectId="51484e79-15a8-4485-b3eb-a3b0199ea409" />
              <Object Name="_ARRAY_MEDIAN" ObjectId="2d45333c-3d69-4f1e-8fe7-df4e72009f97" />
              <Object Name="_ARRAY_MUL" ObjectId="5b7d0a5c-ae80-4239-8887-c672de72fde7" />
              <Object Name="_ARRAY_SHUFFLE" ObjectId="dcb064c0-7d3c-442a-a40c-c559f389941b" />
              <Object Name="_ARRAY_SORT" ObjectId="9fd8439d-0611-4b6a-a44f-68257cf850b3" />
              <Object Name="ARRAY_AVG" ObjectId="2691be3f-7d4e-4d2b-a6c2-6a88a370ce5d" />
              <Object Name="ARRAY_GAV" ObjectId="92081f24-29f4-486a-936f-9ca7ab6b5f5b" />
              <Object Name="ARRAY_HAV" ObjectId="8ac236cc-83a3-44f0-891c-46b6053b4593" />
              <Object Name="ARRAY_MAX" ObjectId="a2283e34-42c9-4d2f-99e4-4f1d933965ab" />
              <Object Name="ARRAY_MIN" ObjectId="a5299bc4-0c41-4892-b381-5a5a4147c210" />
              <Object Name="ARRAY_SDV" ObjectId="744fe302-01cc-4b33-bad1-ffc01a25de30" />
              <Object Name="ARRAY_SPR" ObjectId="790a64f0-06bd-4289-aa25-baa05d8133ac" />
              <Object Name="ARRAY_SUM" ObjectId="120c33f5-f3ef-4d05-ac43-94d5aa143154" />
              <Object Name="ARRAY_TREND" ObjectId="e6903e99-5a12-4258-bd64-bc1a6d70cdc2" />
              <Object Name="ARRAY_VAR" ObjectId="0d94a61a-b340-4a42-a681-47195dcd29dc" />
              <Object Name="IS_SORTED" ObjectId="c0ebae0b-4808-480c-940e-278f07ae79e0" />
            </Folder>
            <Folder Name="Complex">
              <Object Name="CABS" ObjectId="add604f3-22b2-496f-b09a-ab358fb32d6b" />
              <Object Name="CACOS" ObjectId="b113b9a2-978e-4c06-b808-d429834366a6" />
              <Object Name="CACOSH" ObjectId="ce292351-160c-45c7-8d1b-4862cac2e10b" />
              <Object Name="CADD" ObjectId="c89c680b-1797-4059-a025-94372b141d95" />
              <Object Name="CARG" ObjectId="41514a79-73f1-4dd6-a888-7c437adf9b9c" />
              <Object Name="CASIN" ObjectId="867aaba1-1a0b-4e79-a5ba-cea8111607e5" />
              <Object Name="CASINH" ObjectId="4482faf9-19cf-4b87-9944-bb546e9f1e93" />
              <Object Name="CATAN" ObjectId="aaef1289-7359-47b2-bf2f-08e34def3cc0" />
              <Object Name="CATANH" ObjectId="4edd355d-4e2c-49f2-9b1e-1e19e1335c0f" />
              <Object Name="CCON" ObjectId="0395b812-6f6f-4f5f-bff2-df7a0f17e00a" />
              <Object Name="CCOS" ObjectId="d1287463-6738-470d-83f0-bb0e5e5f525c" />
              <Object Name="CCOSH" ObjectId="7e202e1d-ed8d-4cea-87b2-df9fa0fdd14c" />
              <Object Name="CDIV" ObjectId="26102a05-f936-4e1c-9902-33c52f014a14" />
              <Object Name="CEXP" ObjectId="49aa96aa-92e2-4316-b7bc-7e2f744f974a" />
              <Object Name="CINV" ObjectId="aaaea73e-a5cf-4129-bb40-e8cf77ee4fe1" />
              <Object Name="CLOG" ObjectId="41034bc5-5079-4717-bd4f-997cc937d398" />
              <Object Name="CMUL" ObjectId="d88fab79-ad12-49a7-ab63-abafa94465c7" />
              <Object Name="CPOL" ObjectId="b74acd1d-2fed-4369-a48c-73747644e289" />
              <Object Name="CPOW" ObjectId="4b3a1ea7-c788-413c-aab8-82c6e118f126" />
              <Object Name="CSET" ObjectId="b55cdd9d-2e93-4252-8d16-ddaeae236669" />
              <Object Name="CSIN" ObjectId="69299b0c-b7af-4f17-89cb-fbe95fd6b6af" />
              <Object Name="CSINH" ObjectId="9a931e59-f77a-4032-a2fc-f0ecb2c4d4fb" />
              <Object Name="CSQRT" ObjectId="ae1248d8-5fde-4687-b6dd-08353f94f9df" />
              <Object Name="CSUB" ObjectId="e228c190-32e2-493d-a6e4-c827f791a0a6" />
              <Object Name="CTAN" ObjectId="5e937635-a2c4-41bb-a618-83344fb9ccb7" />
              <Object Name="CTANH" ObjectId="be2a5d4d-0d77-4f2d-865e-5b8ed6bd3815" />
            </Folder>
            <Folder Name="Double Precision">
              <Object Name="R2_ABS" ObjectId="05ab3c2f-00a7-4699-a713-cf2d8188a874" />
              <Object Name="R2_ADD" ObjectId="5ee7aa41-6f82-4576-8e53-2814f40785e2" />
              <Object Name="R2_ADD2" ObjectId="babfbfc9-0d4a-4f17-a75a-8dbf564c965c" />
              <Object Name="R2_MUL" ObjectId="3875a252-30f5-40b7-8ebd-70a45811d9c0" />
              <Object Name="R2_SET" ObjectId="90e9baa7-72be-4936-b543-78e0f6ba5da6" />
            </Folder>
            <Folder Name="functions">
              <Object Name="F_LIN" ObjectId="0153fded-cabc-4c27-ba76-6f3492352eae" />
              <Object Name="F_LIN2" ObjectId="e694ccc6-4466-4fcd-8e6a-21295d7aaedf" />
              <Object Name="F_POLY" ObjectId="f4b18f68-485e-4587-842f-eb99abb7f7a1" />
              <Object Name="F_POWER" ObjectId="85a57386-bfa6-4931-9c6c-eb979f6d0b8d" />
              <Object Name="F_QUAD" ObjectId="12208c1f-3476-4598-abd5-bdb7cc90cd04" />
              <Object Name="FRMP_B" ObjectId="e7ba3834-8ec0-4dbc-b0c7-b60c3d6e310f" />
              <Object Name="FT_AVG" ObjectId="85efe17d-57b5-45b9-b67a-c615ec1a0500" />
              <Object Name="FT_MIN_MAX" ObjectId="dde5ed4a-9a55-4798-ab29-15682de88316" />
              <Object Name="FT_RMP" ObjectId="22f52915-2574-4cb1-9880-aa32a60b5b8b" />
              <Object Name="LINEAR_INT" ObjectId="dd850b5c-4e31-4d05-8282-79db572c40a9" />
              <Object Name="POLYNOM_INT" ObjectId="711811c3-69f1-49d2-bc6c-820b83e41489" />
            </Folder>
            <Folder Name="Geometry">
              <Object Name="CIRCLE_A" ObjectId="0283235f-42fa-485b-8db5-e82270c50173" />
              <Object Name="CIRCLE_C" ObjectId="5a101643-0e61-4f84-bf36-79779980b596" />
              <Object Name="CIRCLE_SEG" ObjectId="d75c0602-d287-4dad-a8b5-9c2fb48a3806" />
              <Object Name="CONE_V" ObjectId="02674c20-c46e-48f3-9e48-836c4dcc29f2" />
              <Object Name="ELLIPSE_A" ObjectId="3c33d578-78e2-470c-b50c-86277dfc0dac" />
              <Object Name="ELLIPSE_C" ObjectId="2aba8a83-152a-49c5-83ca-cf8b018354af" />
              <Object Name="SPHERE_V" ObjectId="b6fe8474-5294-4b02-859c-0a6e90d20e44" />
              <Object Name="TRIANGLE_A" ObjectId="e449a57d-6bfc-4715-b6b4-fd3296fa05d9" />
            </Folder>
            <Folder Name="Vektormathematik">
              <Object Name="V3_ABS" ObjectId="4c4168ed-c6e4-4799-865b-396a5a0a429b" />
              <Object Name="V3_ADD" ObjectId="a99fd260-2700-4144-99c2-22e63154ab02" />
              <Object Name="V3_ANG" ObjectId="1185fc76-d11e-447b-ac69-52bcd69a8270" />
              <Object Name="V3_DPRO" ObjectId="8a35c041-8f88-4bfa-acf3-744a8a64c1fe" />
              <Object Name="V3_NORM" ObjectId="c3161ed0-222c-40ec-a6ea-10f4fad9a501" />
              <Object Name="V3_NUL" ObjectId="c9fa947d-6727-4ba3-8725-67a2534403bb" />
              <Object Name="V3_PAR" ObjectId="03968b5e-aef4-4735-8f43-79cb5f28a1e5" />
              <Object Name="V3_REV" ObjectId="a2cc4a0e-444c-44b5-a7fa-3754c673b939" />
              <Object Name="V3_SMUL" ObjectId="1caeec37-a63e-4797-b962-0c2bb6b89ac0" />
              <Object Name="V3_SUB" ObjectId="20aaba2a-f854-4b5d-82ce-fc797b89ad09" />
              <Object Name="V3_XANG" ObjectId="05c666c7-0226-4a30-b2fc-486165ae33f2" />
              <Object Name="V3_XPRO" ObjectId="790b6f34-ef4d-410b-a1d1-1c5fa23b0d5d" />
              <Object Name="V3_YANG" ObjectId="f0f0961d-2338-46d8-81c5-3a9991d8d852" />
              <Object Name="V3_ZANG" ObjectId="5c38258e-9cc9-4503-a532-2ffbf387264e" />
            </Folder>
            <Object Name="ACOSH" ObjectId="f4622c46-fe6d-4187-bf67-28ae374fc334" />
            <Object Name="ACOTH" ObjectId="9501ab7f-8564-4484-9408-c96cffee1bb7" />
            <Object Name="AGDF" ObjectId="5a06d39d-bc3b-4b6c-a3a1-8fcfcf0470e0" />
            <Object Name="ASINH" ObjectId="a3b610e8-5d58-4523-9083-be3825b6c627" />
            <Object Name="ATAN2" ObjectId="d2e6a04c-e896-4fd3-89d5-955c446650c1" />
            <Object Name="ATANH" ObjectId="1554ac22-af08-48c3-aaed-0f37504d7d28" />
            <Object Name="BETA" ObjectId="9785ef3c-7e54-44d5-9669-d49a0807e50a" />
            <Object Name="BINOM" ObjectId="1d18c8c8-7df5-4058-b94b-c4b40f88c50a" />
            <Object Name="CAUCHY" ObjectId="d16fa3c7-5e3b-4648-afc8-9d8395bf3a94" />
            <Object Name="CAUCHYCD" ObjectId="eccf1b66-fff7-4040-aa1c-9bbe7fe2b7c9" />
            <Object Name="CEIL" ObjectId="dd27053b-d539-4dd8-aa6e-5e0550542f8e" />
            <Object Name="CEIL2" ObjectId="74f9cc72-fcc1-492f-8fc0-075cc435588f" />
            <Object Name="CMP" ObjectId="dcf68e16-ada9-4fd4-b4fe-8e8cbb3035ef" />
            <Object Name="COSH" ObjectId="e5f5d5f3-6ed5-4d92-a2a5-99ac63476958" />
            <Object Name="COTH" ObjectId="5a40fb1d-24d0-49a5-a65a-8539bc6f9375" />
            <Object Name="D_TRUNC" ObjectId="b4211e21-30ee-4fc3-b424-e4051cf2121b" />
            <Object Name="DEC1" ObjectId="04b751de-7a97-4746-af5d-e25287c957f5" />
            <Object Name="DEG" ObjectId="f0a6a6b5-e5f6-41c8-b602-ca0501a44e9d" />
            <Object Name="DIFFER" ObjectId="20d86424-7fc1-4b47-bbaf-2f6466cb9a15" />
            <Object Name="ERF" ObjectId="a3e6c4e5-ed1f-4039-bf4c-c4c43ed22f10" />
            <Object Name="ERFC" ObjectId="465bcf3c-0944-4e7a-84ce-5e8ebf115393" />
            <Object Name="EVEN" ObjectId="80442403-7ee5-4034-a407-44cf4f6fe5a9" />
            <Object Name="EXP10" ObjectId="1bc96e1c-a8f5-4725-afd0-0dcf7483a6be" />
            <Object Name="EXPN" ObjectId="ac8308a3-ca98-4c28-811a-022786c0aee7" />
            <Object Name="FACT" ObjectId="38dd1130-d61e-4c57-8cdd-9d8b8eb4eda4" />
            <Object Name="FIB" ObjectId="3626bcfc-0203-4bc5-bc07-675bc465bceb" />
            <Object Name="FLOOR" ObjectId="67f12557-6fba-4a2e-8cde-ebab65b005ac" />
            <Object Name="FLOOR2" ObjectId="a5d2e2c8-aa5f-471c-b19b-b0082f5a5081" />
            <Object Name="FRACT" ObjectId="f1fa030f-3ca8-4156-b247-11d412aa06ac" />
            <Object Name="GAMMA" ObjectId="51ba54e1-72c8-4611-8c00-55f7f9e5fb77" />
            <Object Name="GAUSS" ObjectId="563bc4da-bb34-4ff2-9372-d1308845ee33" />
            <Object Name="GAUSSCD" ObjectId="3edd6f55-decb-4d5c-8295-6f1461810b6a" />
            <Object Name="GCD" ObjectId="58755f69-969d-488c-b29c-fa01bf1ee3c7" />
            <Object Name="GDF" ObjectId="96b7292e-f8eb-4c48-9be4-ccf7b4bc68aa" />
            <Object Name="GOLD" ObjectId="606e6288-6161-4378-9baa-2941366338b6" />
            <Object Name="HYPOT" ObjectId="1f81729d-28bc-41cc-8d12-d295653d70ec" />
            <Object Name="INC" ObjectId="d38c935e-ad10-4431-ba3b-fa091fa8e26a" />
            <Object Name="INC1" ObjectId="30f24e4f-8759-4098-a5b5-e0a19cb269b2" />
            <Object Name="INC2" ObjectId="5c6b2e2c-a5a9-46ae-a170-d0005d9c856c" />
            <Object Name="INV" ObjectId="1829c59e-4b8d-438c-b56d-28664524c405" />
            <Object Name="LAMBERT_W" ObjectId="e950e5f8-c669-42db-8af9-6c5efe4cb81a" />
            <Object Name="LANGEVIN" ObjectId="9957e86e-d774-42ea-9524-04e070cdbb70" />
            <Object Name="MAX3" ObjectId="6009dd6e-6204-417a-acf3-a843e61fea66" />
            <Object Name="MID3" ObjectId="6a3cc001-689d-468b-9212-3f316aeae6d8" />
            <Object Name="MIN3" ObjectId="2f199a4d-5b24-419e-b7dd-20040a3b1352" />
            <Object Name="MODR" ObjectId="35bc17e3-a9e1-4c36-acdf-f533c505b518" />
            <Object Name="MUL_ADD" ObjectId="8602f0e9-4d51-4e53-82b4-0877e9c06a08" />
            <Object Name="NEGX" ObjectId="4a5d16d2-b7a9-4ccc-a10f-784b2f84d596" />
            <Object Name="RAD" ObjectId="1a8c2266-b52b-4b42-af91-6f7dbe33094a" />
            <Object Name="RDM" ObjectId="a5f42dae-e7da-4980-a264-3f13b3ba9f6b" />
            <Object Name="RDM2" ObjectId="7ca8d0d9-50cb-4793-b8d7-ba1e94d9d681" />
            <Object Name="RDMDW" ObjectId="7f7a9795-181c-4d18-b93f-5226bcd39f24" />
            <Object Name="REAL_TO_FRAC" ObjectId="6cb1d7ea-2b8f-46cf-b229-5977c0f86ec6" />
            <Object Name="RND" ObjectId="679fea00-f021-4223-82b6-13e10fdfbfeb" />
            <Object Name="ROUND" ObjectId="f6822480-1637-4788-a720-d476ce6cd327" />
            <Object Name="SGN" ObjectId="b07d1e90-1566-4e21-b3d4-fbc86ae3ccad" />
            <Object Name="SIGMOID" ObjectId="24cbc356-566d-46fe-b57a-9236856b1faf" />
            <Object Name="SIGN_I" ObjectId="bd27f7b9-0d21-43e9-978c-daf8576a630f" />
            <Object Name="SIGN_R" ObjectId="428af942-7d0b-4494-9ca8-6bd7a2d81151" />
            <Object Name="SINC" ObjectId="d8cf9457-eade-49d4-8339-32549da25f0e" />
            <Object Name="SINH" ObjectId="20bcea52-28a3-402a-881c-55a23fcd9d46" />
            <Object Name="SQRTN" ObjectId="638618a1-288b-4b4d-9f13-e8d8a29d58ee" />
            <Object Name="TANC" ObjectId="0f979a51-baa6-4540-a007-456fee1cd20e" />
            <Object Name="TANH" ObjectId="1b1b173c-da34-4295-814c-56ef0df6ba3a" />
            <Object Name="WINDOW" ObjectId="4427f4b9-f45a-4a5d-b376-52a5b09e9543" />
            <Object Name="WINDOW2" ObjectId="c9836c29-b419-461e-8c1e-58f0e6fbea24" />
          </Folder>
          <Folder Name="Other">
            <Object Name="ESR_COLLECT" ObjectId="279626ba-04a9-40fb-b08e-316bd1457a46" />
            <Object Name="ESR_MON_B8" ObjectId="8e8e215a-4fb1-45c7-9e65-b246edb68189" />
            <Object Name="ESR_MON_R4" ObjectId="01eeb5bf-91ac-400e-a720-5adbee469367" />
            <Object Name="ESR_MON_X8" ObjectId="cec1d280-8e4c-4a9e-88c3-47add2060ebd" />
            <Object Name="OSCAT_VERSION" ObjectId="1339356d-c30a-4d36-ba03-fbee74c24e9c" />
            <Object Name="STATUS_TO_ESR" ObjectId="b870a77e-a110-4f10-9083-de2dca5a1303" />
          </Folder>
          <Folder Name="String">
            <Object Name="BIN_TO_BYTE" ObjectId="d48316bd-63a8-47d7-ab58-e53c0772f277" />
            <Object Name="BIN_TO_DWORD" ObjectId="bbb27a3f-21eb-464e-9010-ca02181e408b" />
            <Object Name="BYTE_TO_STRB" ObjectId="2a8f8f17-d9f9-4d7b-a489-e8e4ea3d929f" />
            <Object Name="BYTE_TO_STRH" ObjectId="e78e69e4-baeb-49b4-958f-105cc653432c" />
            <Object Name="CAPITALIZE" ObjectId="c4ed461c-06f7-4d0f-933d-c55719a0401b" />
            <Object Name="CHARCODE" ObjectId="33e725fc-4c0a-4b34-85f2-5f5f9b79719f" />
            <Object Name="CHARNAME" ObjectId="e5acf2b5-0d51-4484-971a-db4d2d0b9b84" />
            <Object Name="CHR_TO_STRING" ObjectId="cf2f39c2-7f5f-41ce-b970-db662b842f20" />
            <Object Name="CLEAN" ObjectId="e3b4663c-9fea-459c-b829-cfc4107cddfc" />
            <Object Name="CODE" ObjectId="9266fad0-e6ac-41a3-ba90-85933333f422" />
            <Object Name="COUNT_CHAR" ObjectId="5bf47efb-26f5-4c0d-973b-13b2afc1c92b" />
            <Object Name="COUNT_SUBSTRING" ObjectId="dde5e173-b388-400b-9d2c-1d1705abe28f" />
            <Object Name="DEC_TO_BYTE" ObjectId="08e09aec-7f1a-4eb2-a1ba-d420d9e03131" />
            <Object Name="DEC_TO_DWORD" ObjectId="a32d5e05-d715-4022-9b16-c06fbc3b1e61" />
            <Object Name="DEC_TO_INT" ObjectId="b63b3274-a3a8-495a-9743-fe860fef34d3" />
            <Object Name="DEL_CHARS" ObjectId="0fae5596-ae27-4bdf-9bf4-8387caabeeed" />
            <Object Name="DT_TO_STRF" ObjectId="39aec167-6c46-4bc1-9914-6cac0786bd9f" />
            <Object Name="DWORD_TO_STRB" ObjectId="ba71a54c-4280-40bf-8032-f8073d2f70da" />
            <Object Name="DWORD_TO_STRF" ObjectId="7a7e7b32-bb43-4bbe-865d-4282628954d8" />
            <Object Name="DWORD_TO_STRH" ObjectId="c0150f33-dd0f-4ef8-8ad2-2698cb2ea3ba" />
            <Object Name="EXEC" ObjectId="0f74cb6a-f6af-4a1a-89cd-c74009e12279" />
            <Object Name="FILL" ObjectId="7e490abb-a126-4ef2-8bd4-2084568ac174" />
            <Object Name="FIND_CHAR" ObjectId="b46e5d27-27e1-4868-98ca-4f5c278122e1" />
            <Object Name="FIND_CTRL" ObjectId="2c55bdaf-1c83-4af9-b72d-17c73c14f980" />
            <Object Name="FIND_NONUM" ObjectId="9c7d210c-ac45-4c66-bdda-4ee7ef65403d" />
            <Object Name="FIND_NUM" ObjectId="86af8df9-5e52-4ae7-bba6-abf0a255413e" />
            <Object Name="FINDB" ObjectId="c8afc6e9-cd78-4b84-b0a2-c7064764314c" />
            <Object Name="FINDB_NONUM" ObjectId="e290e69a-353c-4d4b-bdcf-945f6cb0f155" />
            <Object Name="FINDB_NUM" ObjectId="0b18abf8-6427-45ff-bba2-45632bdd548e" />
            <Object Name="FINDP" ObjectId="becc8877-ec29-47f2-b2a4-4f4cec7d1c18" />
            <Object Name="FIX" ObjectId="59ca4a27-b166-49e8-8581-4779e49fb390" />
            <Object Name="FLOAT_TO_REAL" ObjectId="3696f742-1056-4b3c-a9c1-13af95dc9f28" />
            <Object Name="FSTRING_TO_BYTE" ObjectId="c099f828-c7a2-4b4d-927e-fac093db4455" />
            <Object Name="FSTRING_TO_DT" ObjectId="15f47317-f538-42a4-b1e8-860797cccac7" />
            <Object Name="FSTRING_TO_DWORD" ObjectId="bf2e0f2b-b212-4f5b-a9da-3b39ad38e9a0" />
            <Object Name="FSTRING_TO_MONTH" ObjectId="ea987b3c-1518-492b-a04e-9b9740dee2b2" />
            <Object Name="FSTRING_TO_WEEK" ObjectId="e1a9bd91-374c-4c22-a2c3-ab53784af261" />
            <Object Name="FSTRING_TO_WEEKDAY" ObjectId="e3e057ef-9817-4041-9d23-3b1cc835ecc1" />
            <Object Name="HEX_TO_BYTE" ObjectId="a0f863eb-4c70-4c29-af6b-faf1dacc26b1" />
            <Object Name="HEX_TO_DWORD" ObjectId="a0bf84d0-656e-45b5-911b-bd049cb0c07b" />
            <Object Name="IS_ALNUM" ObjectId="311bdeed-4776-40a1-999c-c59f10d31ed6" />
            <Object Name="IS_ALPHA" ObjectId="01ef57a0-8aac-4249-98ae-34b4edccbfa1" />
            <Object Name="IS_CC" ObjectId="674f1011-5a81-441f-b925-321dbcd6a187" />
            <Object Name="IS_CTRL" ObjectId="e9fbfbef-8ec5-4a8b-8807-4d91493f0cee" />
            <Object Name="IS_HEX" ObjectId="51139703-524a-45ee-b384-631f9fa363b1" />
            <Object Name="IS_LOWER" ObjectId="0116925e-73b5-4697-8c66-1d4b5baa476b" />
            <Object Name="IS_NCC" ObjectId="6a33b31a-8438-4558-8f3f-be42a24be300" />
            <Object Name="IS_NUM" ObjectId="8afacc60-1289-481e-8fc6-9ce24383d545" />
            <Object Name="IS_UPPER" ObjectId="0881393b-a375-454d-8fb6-e88f89bfeb53" />
            <Object Name="ISC_ALPHA" ObjectId="d163f822-7688-48ba-a792-d621ead22a11" />
            <Object Name="ISC_CTRL" ObjectId="00d7c634-1d8f-43c9-8fae-d268a8bfd6ec" />
            <Object Name="ISC_HEX" ObjectId="e2e184e4-916d-4b3e-b530-dd534db0cde9" />
            <Object Name="ISC_LOWER" ObjectId="ac31afca-e18e-4758-b62c-5448ccb5ed39" />
            <Object Name="ISC_NUM" ObjectId="0aa02038-b77e-43cd-87d4-dc8d99cb19d3" />
            <Object Name="ISC_UPPER" ObjectId="3779223f-ad37-48f5-ac84-6f045a3d886c" />
            <Object Name="LOWERCASE" ObjectId="aa90a2f0-882b-46a8-b9b4-856b04c5fe4d" />
            <Object Name="MESSAGE_4R" ObjectId="01780b84-57e6-4269-92fa-9050045679ac" />
            <Object Name="MESSAGE_8" ObjectId="2dd64648-fa5c-4404-b690-6e4a9290df8f" />
            <Object Name="MIRROR" ObjectId="c847559f-6304-4461-910e-254f397db7f9" />
            <Object Name="MONTH_TO_STRING" ObjectId="adb635e8-6462-45d4-93a1-13c88d272fd4" />
            <Object Name="OCT_TO_BYTE" ObjectId="c2eacc6c-b11e-499d-bc9c-dc0157c8a86f" />
            <Object Name="OCT_TO_DWORD" ObjectId="ea0e4f1d-f99b-4e8c-8a68-fb6b969f0cba" />
            <Object Name="REAL_TO_STRF" ObjectId="0aba0dfc-fc37-4d20-8aba-125f54bddac6" />
            <Object Name="REPLACE_ALL" ObjectId="526f67e5-eaa9-4555-9eea-a458f0f44c66" />
            <Object Name="REPLACE_CHARS" ObjectId="496a49c1-37d2-465e-9e73-d8e5dd73c93e" />
            <Object Name="REPLACE_UML" ObjectId="7e795be9-4b54-40c8-80bd-2762c2033d90" />
            <Object Name="TICKER" ObjectId="7a44ca33-5369-4209-be0d-5d343fb910ae" />
            <Object Name="TO_LOWER" ObjectId="e7610bdf-3c3c-48fa-8dc7-d1deefeb895f" />
            <Object Name="TO_UML" ObjectId="3bcad282-0eb3-4cc5-be14-bcc83333c310" />
            <Object Name="TO_UPPER" ObjectId="8dbc0f8d-b36b-4617-bef8-e28eaec407c6" />
            <Object Name="TRIM" ObjectId="f11d1b35-f31d-4cc5-9771-175e20d802ea" />
            <Object Name="TRIM1" ObjectId="39aa6f74-943e-4ba2-b12f-d9d5fa4e3210" />
            <Object Name="TRIME" ObjectId="052cfc02-d974-4fd2-8e3a-07da9cecb239" />
            <Object Name="UPPERCASE" ObjectId="8b8c35e0-6b6d-45d4-bf90-8793aff29ed6" />
            <Object Name="WEEKDAY_TO_STRING" ObjectId="f5d70291-bf72-48d4-82c2-58f37f153791" />
          </Folder>
          <Folder Name="Time&amp;Date">
            <Object Name="CALENDAR_CALC" ObjectId="a0d7f559-f8b9-4e83-b38e-735df3eabf20" />
            <Object Name="DATE_ADD" ObjectId="86e1accf-c5ef-4d1b-94ef-d15f1044ae68" />
            <Object Name="DAY_OF_DATE" ObjectId="90545b68-c6d8-4549-b372-e3810ea355b5" />
            <Object Name="DAY_OF_MONTH" ObjectId="49b794e1-f924-4fcb-ae9b-b653936e1091" />
            <Object Name="DAY_OF_WEEK" ObjectId="45d6ba9d-c855-4579-9a90-5a7c000653eb" />
            <Object Name="DAY_OF_YEAR" ObjectId="95b76e54-f191-4c6f-b6a0-ca551cf1c2d0" />
            <Object Name="DAY_TO_TIME" ObjectId="fd27b05c-e584-437c-abdf-0c0aa80edc29" />
            <Object Name="DAYS_DELTA" ObjectId="40255d78-49e7-4879-9be0-250b1b0b040b" />
            <Object Name="DAYS_IN_MONTH" ObjectId="5d0a8b0b-f461-4a9d-a023-5079a492fd98" />
            <Object Name="DAYS_IN_YEAR" ObjectId="fffbf974-d5c3-4010-b1b5-db0043b3ba9a" />
            <Object Name="DCF77" ObjectId="d4910713-31a5-4636-8210-99b3c237f2e1" />
            <Object Name="DST" ObjectId="249a7cc4-a4ef-4b8e-82ae-619a857c93b2" />
            <Object Name="DT_TO_SDT" ObjectId="f1f92604-a741-4ab0-adcc-dcd52c866c11" />
            <Object Name="DT2_TO_SDT" ObjectId="06f59a59-1f50-4974-9a85-1bf6872291db" />
            <Object Name="EASTER" ObjectId="44f2bde0-9869-4b49-b410-48cdb6f8824e" />
            <Object Name="EVENTS" ObjectId="0f20ac71-12c0-40d9-965f-b787f42298d5" />
            <Object Name="HOLIDAY" ObjectId="bd0fadbb-035e-4b5f-ab9c-5456b28b7595" />
            <Object Name="HOUR" ObjectId="5acbcb0d-055d-4286-995b-9c9ba7c9401e" />
            <Object Name="HOUR_OF_DT" ObjectId="833ca1f6-c12b-46ac-96f9-e547c19c7f61" />
            <Object Name="HOUR_TO_TIME" ObjectId="08e4a9ed-31e1-48e9-b7af-de3b006c3011" />
            <Object Name="HOUR_TO_TOD" ObjectId="dff9c610-8c77-4f2b-a92c-c1e7b58e6c04" />
            <Object Name="JD2000" ObjectId="7502ff7a-24c0-4c35-8f49-4f11187f2e2a" />
            <Object Name="LEAP_DAY" ObjectId="d5777147-2af1-4389-b6d1-45b5288e8207" />
            <Object Name="LEAP_OF_DATE" ObjectId="52b95997-0b84-4e8f-8f73-7e48243d50e5" />
            <Object Name="LEAP_YEAR" ObjectId="e68f5980-db84-473d-9c43-c14e38d2a0d1" />
            <Object Name="LTIME_TO_UTC" ObjectId="47fac7f2-f0ad-4886-a2b8-362abbbbe038" />
            <Object Name="MINUTE" ObjectId="e8e40b23-b70d-4c21-b684-e01c4b0add79" />
            <Object Name="MINUTE_OF_DT" ObjectId="7c956a4f-dc3a-4ddf-ab3e-7408321bd1b9" />
            <Object Name="MINUTE_TO_TIME" ObjectId="e6312cdd-7b1f-4c60-9a25-bb02ce38f0d6" />
            <Object Name="MONTH_BEGIN" ObjectId="88937bd6-d341-4f3f-98c8-450b1bb4d885" />
            <Object Name="MONTH_END" ObjectId="3592f222-62c4-4d3d-a9eb-320761ecfef5" />
            <Object Name="MONTH_OF_DATE" ObjectId="2fb8623c-618c-4cb3-9c89-25cb3b8877d6" />
            <Object Name="MULTIME" ObjectId="6b36b12e-e773-497f-89c5-272a77a90f5f" />
            <Object Name="PERIOD" ObjectId="38c418f7-14c1-4c74-b758-a1e012f9f465" />
            <Object Name="PERIOD2" ObjectId="fb18d5d5-83d5-410c-9b26-9c0a8b83ab30" />
            <Object Name="REFRACTION" ObjectId="a64a1eca-54f6-40a1-8af4-9248d47829b9" />
            <Object Name="RTC_2" ObjectId="87a077c4-532f-4029-b200-b7c1eab2cfa5" />
            <Object Name="RTC_MS" ObjectId="ecaa85ad-04bd-4149-81e2-0664b6890624" />
            <Object Name="SDT_TO_DATE" ObjectId="acb625c0-27ca-4c98-900e-03a206ec02a2" />
            <Object Name="SDT_TO_DT" ObjectId="a32a221e-786f-45f8-9605-04ef10b97bf7" />
            <Object Name="SDT_TO_TOD" ObjectId="210abb24-14ad-4efe-92c2-22653320d065" />
            <Object Name="SECOND" ObjectId="7f619fdd-a9ba-4d18-aaca-58dc261938d7" />
            <Object Name="SECOND_OF_DT" ObjectId="9ec0da4b-6bdc-4083-b489-509ed6d157a1" />
            <Object Name="SECOND_TO_TIME" ObjectId="cdd6c180-35c1-4172-94be-e5da199ea1fd" />
            <Object Name="SET_DATE" ObjectId="acb9c023-4b0e-47d7-a0a9-2262f64e9e43" />
            <Object Name="SET_DT" ObjectId="96706a04-fbdc-44a2-bcb8-d01049cad4b1" />
            <Object Name="SET_TOD" ObjectId="efa38aa3-436a-4d1d-888d-84c9920d997a" />
            <Object Name="SUN_MIDDAY" ObjectId="43f905ac-d628-4cde-aeb1-b372f4025bb8" />
            <Object Name="SUN_POS" ObjectId="a0d9a87d-a1d3-475d-9f00-28ab27fa9387" />
            <Object Name="SUN_TIME" ObjectId="c5842405-55ba-4638-8df1-8abf6ce39a39" />
            <Object Name="TIMECHECK" ObjectId="05187abb-2a44-429b-b0c9-fea9fbd87d5c" />
            <Object Name="UTC_TO_LTIME" ObjectId="cf43b22a-d28e-46a2-8069-e8c10826c199" />
            <Object Name="WORK_WEEK" ObjectId="c35d3f38-5ec2-4c0d-9f6a-7c6ec6d0256c" />
            <Object Name="YEAR_BEGIN" ObjectId="6bd75b72-063a-4c73-bd21-e3d2163bc0c2" />
            <Object Name="YEAR_END" ObjectId="ec1e45c4-d21a-47fe-ac71-f2a1410849e1" />
            <Object Name="YEAR_OF_DATE" ObjectId="a25f37ab-d749-497d-8d32-bca5f07ad6f3" />
          </Folder>
        </Folder>
        <Object Name="Project Information" ObjectId="11c0fc3a-9bcf-4dd8-ac38-efb93363e521" />
      </ProjectStructure>
    </data>
  </addData>
</project>
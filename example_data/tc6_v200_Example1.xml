<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="TK" productName="TC6_v0200_Example1" productVersion="v2.0" creationDateTime="2020-04-25T16:06:08.4861619" />
  <contentHeader name="CODEYS Common Library Template" version="3.5.15.10" modificationDateTime="2020-04-25T16:01:39.8406952" organization="3S - Smart Software Solutions GmbH" author="3S - Smart Software Solutions GmbH">
    <Comment>Library project template with all possible element types, docu and a sample project structure</Comment>
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation>
          <property name="Author" type="string">3S - Smart Software Solutions GmbH</property>
          <property name="AutoResolveUnbound" type="boolean">true</property>
          <property name="Company" type="string">3S - Smart Software Solutions GmbH</property>
          <property name="CompiledLibraryCompatibilityVersion" type="string">CODESYS V3.5 SP15 Patch 1</property>
          <property name="DefaultNamespace" type="string">TMP</property>
          <property name="Description" type="string">Library project template with all possible element types, docu and a sample project structure</property>
          <property name="DocFormat" type="string">reStructuredText</property>
          <property name="IsEndUserLibrary" type="boolean">false</property>
          <property name="LanguageModelAttribute" type="string">qualified-access-only</property>
          <property name="Placeholder" type="string">PlaceholderTemplate</property>
          <property name="Project" type="string">TestProject</property>
          <property name="Released" type="boolean">false</property>
          <property name="SourceLibrary" type="boolean">false</property>
          <property name="Title" type="string">CODEYS Common Library Template</property>
          <property name="Version" type="version">3.5.15.10</property>
          <property name="library-category-list" type="library-category-list" />
        </ProjectInformation>
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="ERROR">
        <baseType>
          <enum>
            <values>
              <value name="NO_ERROR" />
              <value name="TIME_OUT" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f13851e4-c15c-4448-a3cc-5ae43fe11b73</ObjectId>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'conditionalshow'}
            {attribute 'conditionalshow' := 'SomeText'}
            {attribute 'hide'}</xhtml>
        </documentation>
      </dataType>
    </dataTypes>
    <pous>
      <pou name="ETrig_Temp" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="eErrorID">
              <type>
                <derived name="ERROR" />
              </type>
            </variable>
          </outputVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>CBML.ETrig</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
eErrorID := _Model.iErrorID;

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CleanupAction" ObjectId="97b7f0d9-eaf4-44be-8360-fb87a8163e60">
              <interface>
                <inputVars>
                  <variable name="xAbortProposed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iErrorIDProposed">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="xAbort">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="xAbortProposed" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="iErrorIDProposed" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// ``CleanupAction`` is running until one of the following events occurs:
/// When ``xComplete`` is ``TRUE`` the state |STATE.DONE| is reached.
/// When ``xAbort`` is ``TRUE`` the state |STATE.ABORTED| is reached.
/// When ``iErrorID`` ≠ 0 (Zero) the state |STATE.ERROR| is reached.
///
/// | After a *Ready Condition* as input (``iErrorIDProposed`` = 0 and ``xAbortProposed`` = ``FALSE``), only the output states
/// | `DONE` (``xComplete`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// | After a *Error Condition* as input (``iErrorIDProposed`` ≠ 0), only the output state
/// | `ERROR` (``iErrorID`` ≠ 0) is possible.
///
/// | After a *Abort Condition* as Input (``xAbortProposed`` = ``TRUE``), only the output states
/// | `ABORTED` (``xAbort`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         (* common cleanup -- first steps *) 
///         
///         IF xComplete THEN
///             IF xAbortProposed THEN
///                 (* abort condition -- abort specific cleanup *)
///                 xAbort := TRUE;
///                 xComplete := FALSE;
///             ELSIF iErrorIDProposed &lt;&gt; 0 THEN
///                 (* error condition -- error specific cleanup *)
///                 iErrorID := SEL(xComplete, 0, iErrorIDProposed);
///                 xComplete := FALSE;
///             ELSE
///                 (* ready condition -- done specific cleanup*)
///             END_IF
///         END_IF
///
///         (* common cleanup -- last steps *) 
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CyclicAction" ObjectId="3eafd802-4107-4092-a9f9-10cdce883f08">
              <interface>
                <inputVars>
                  <variable name="itfTimingController">
                    <type>
                      <derived name="CBML.ITimingController" />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The CyclicAction is running until either ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero).
/// If ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
/// With ``itfTimingController`` ≠  0 (Zero) it is possible to check the current invocation time (see: |ITimingController.ControllerCheckTiming|).
/// Function blocks with a ``udiTimeLimit`` input variable (see: |IETrigTl|, |IETrigATl|, |IETrigTlTo|, |IETrigATlTo|, |ILConTl|, |ILConTlTo|, |ILConTlC|)
/// should be implement in such a way that the current invocation is exited when the consumed time for this invocation has exceeded the settings from udiTimeLimit.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         REPEAT
///             // working to reach the ready condition
///             // ⇒ xComplete := TRUE
///             // if the maximum invocation time is reached
///             // ⇒ xTimeLimit := TRUE
///             // if the maximum operating time is reached
///             // ⇒ xTimeOut := TRUE
///             // if an error condition is reached
///             // ⇒ set iErrorID to a value other than 0 (Zero)
///             itfTimingController.ControllerCheckTiming(
///                 xTimeOut=&gt;xTimeOut,
///                 xTimeLimit=&gt;xTimeLimit
///             );
///         
///             xComplete := TRUE;
///             iErrorID := ERROR.NO_ERROR;
///     
///         UNTIL xComplete OR
///               xTimeOut OR xTimeLimit OR
///               iErrorID &lt;&gt; ERROR.NO_ERROR
///         END_REPEAT
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ExitAction" ObjectId="c8160892-d51a-49ac-a198-4ee236d14db3">
              <interface>
                <inputVars>
                  <variable name="xAfterCleanup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="xInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// This method is intended for releasing external resources (like RTS handles).
/// Do not call other internal function block instances in the context of this method.
/// Call only external functions defined inside the RTS.
/// For cleaning up other resources then external ones, please use the ``CleanupAction``.
/// This method should be callable in the context of ``FB_EXIT`` for example
/// before downloading a new application or before reseting an application.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetAction" ObjectId="cd4e12a6-91c4-4868-a2fe-a35b0d85bb95">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``ResetAction`` is running until the output ``xComplete`` is ``TRUE``.
/// If ``xComplete`` is ``TRUE`` the state |STATE.DORMANT| is reached.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SampleAction" ObjectId="5b2a9ee7-14e2-4b50-8c24-a36bbea3f82d">
              <interface>
                <outputVars>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// After leaving the state |STATE.DORMANT| the ``SampleAction`` is running one time then the state |STATE.STARTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached instead.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="StartAction" ObjectId="1ce92b1d-89d7-4dcc-8d31-06c38dda6426">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``StartAction`` is running until either the output ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠ 0 (Zero).
/// If ``xComplete`` is ``TRUE`` the state |STATE.EXECUTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
///
/// .. note::
///
///    To sample the inputs in the first invocation of a function block the method SampleAction is the solution of choice.
///    See: |ISampleActionProvider.SampleAction|
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>df86b7a9-aced-4ec7-bc2d-7959d3246804</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ETrigA_Temp" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="eErrorID">
              <type>
                <derived name="ERROR" />
              </type>
            </variable>
          </outputVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>CBML.ETrigA</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
eErrorID := _Model.iErrorID;
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CleanupAction" ObjectId="08b120a0-c3a9-4eec-bdc6-932f60750e05">
              <interface>
                <inputVars>
                  <variable name="xAbortProposed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iErrorIDProposed">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="xAbort">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="xAbortProposed" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="iErrorIDProposed" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// ``CleanupAction`` is running until one of the following events occurs:
/// When ``xComplete`` is ``TRUE`` the state |STATE.DONE| is reached.
/// When ``xAbort`` is ``TRUE`` the state |STATE.ABORTED| is reached.
/// When ``iErrorID`` ≠ 0 (Zero) the state |STATE.ERROR| is reached.
///
/// | After a *Ready Condition* as input (``iErrorIDProposed`` = 0 and ``xAbortProposed`` = ``FALSE``), only the output states
/// | `DONE` (``xComplete`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// | After a *Error Condition* as input (``iErrorIDProposed`` ≠ 0), only the output state
/// | `ERROR` (``iErrorID`` ≠ 0) is possible.
///
/// | After a *Abort Condition* as Input (``xAbortProposed`` = ``TRUE``), only the output states
/// | `ABORTED` (``xAbort`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         (* common cleanup -- first steps *) 
///         
///         IF xComplete THEN
///             IF xAbortProposed THEN
///                 (* abort condition -- abort specific cleanup *)
///                 xAbort := TRUE;
///                 xComplete := FALSE;
///             ELSIF iErrorIDProposed &lt;&gt; 0 THEN
///                 (* error condition -- error specific cleanup *)
///                 iErrorID := SEL(xComplete, 0, iErrorIDProposed);
///                 xComplete := FALSE;
///             ELSE
///                 (* ready condition -- done specific cleanup*)
///             END_IF
///         END_IF
///
///         (* common cleanup -- last steps *) 
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CyclicAction" ObjectId="7c62c774-d032-4fcb-9d21-d67d1edcacc1">
              <interface>
                <inputVars>
                  <variable name="itfTimingController">
                    <type>
                      <derived name="CBML.ITimingController" />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The CyclicAction is running until either ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero).
/// If ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
/// With ``itfTimingController`` ≠  0 (Zero) it is possible to check the current invocation time (see: |ITimingController.ControllerCheckTiming|).
/// Function blocks with a ``udiTimeLimit`` input variable (see: |IETrigTl|, |IETrigATl|, |IETrigTlTo|, |IETrigATlTo|, |ILConTl|, |ILConTlTo|, |ILConTlC|)
/// should be implement in such a way that the current invocation is exited when the consumed time for this invocation has exceeded the settings from udiTimeLimit.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         REPEAT
///             // working to reach the ready condition
///             // ⇒ xComplete := TRUE
///             // if the maximum invocation time is reached
///             // ⇒ xTimeLimit := TRUE
///             // if the maximum operating time is reached
///             // ⇒ xTimeOut := TRUE
///             // if an error condition is reached
///             // ⇒ set iErrorID to a value other than 0 (Zero)
///             itfTimingController.ControllerCheckTiming(
///                 xTimeOut=&gt;xTimeOut,
///                 xTimeLimit=&gt;xTimeLimit
///             );
///         
///             xComplete := TRUE;
///             iErrorID := ERROR.NO_ERROR;
///     
///         UNTIL xComplete OR
///               xTimeOut OR xTimeLimit OR
///               iErrorID &lt;&gt; ERROR.NO_ERROR
///         END_REPEAT
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ExitAction" ObjectId="85db0efe-ca2c-4d7a-b78f-04d70ad102dc">
              <interface>
                <inputVars>
                  <variable name="xAfterCleanup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="xInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// This method is intended for releasing external resources (like RTS handles).
/// Do not call other internal function block instances in the context of this method.
/// Call only external functions defined inside the RTS.
/// For cleaning up other resources then external ones, please use the ``CleanupAction``.
/// This method should be callable in the context of ``FB_EXIT`` for example
/// before downloading a new application or before reseting an application.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetAction" ObjectId="939d4108-4075-4dd6-a847-74a104316e83">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``ResetAction`` is running until the output ``xComplete`` is ``TRUE``.
/// If ``xComplete`` is ``TRUE`` the state |STATE.DORMANT| is reached.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SampleAction" ObjectId="db4b36e6-9982-4979-b47b-407de9eb32d8">
              <interface>
                <outputVars>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// After leaving the state |STATE.DORMANT| the ``SampleAction`` is running one time then the state |STATE.STARTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached instead.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="StartAction" ObjectId="d6a262c7-d4e9-471e-8482-b2b7bb05df1d">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``StartAction`` is running until either the output ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠ 0 (Zero).
/// If ``xComplete`` is ``TRUE`` the state |STATE.EXECUTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
///
/// .. note::
///
///    To sample the inputs in the first invocation of a function block the method SampleAction is the solution of choice.
///    See: |ISampleActionProvider.SampleAction|
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d6b79a20-f337-409e-a3b4-a1dbdf465a4f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ETrigATl_Temp" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="eErrorID">
              <type>
                <derived name="ERROR" />
              </type>
            </variable>
          </outputVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>CBML.ETrigATl</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
eErrorID := _Model.iErrorID;
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CleanupAction" ObjectId="7c14b139-5963-4ff5-a3de-aa31ad518e3e">
              <interface>
                <inputVars>
                  <variable name="xAbortProposed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iErrorIDProposed">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="xAbort">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="xAbortProposed" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="iErrorIDProposed" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// ``CleanupAction`` is running until one of the following events occurs:
/// When ``xComplete`` is ``TRUE`` the state |STATE.DONE| is reached.
/// When ``xAbort`` is ``TRUE`` the state |STATE.ABORTED| is reached.
/// When ``iErrorID`` ≠ 0 (Zero) the state |STATE.ERROR| is reached.
///
/// | After a *Ready Condition* as input (``iErrorIDProposed`` = 0 and ``xAbortProposed`` = ``FALSE``), only the output states
/// | `DONE` (``xComplete`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// | After a *Error Condition* as input (``iErrorIDProposed`` ≠ 0), only the output state
/// | `ERROR` (``iErrorID`` ≠ 0) is possible.
///
/// | After a *Abort Condition* as Input (``xAbortProposed`` = ``TRUE``), only the output states
/// | `ABORTED` (``xAbort`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         (* common cleanup -- first steps *) 
///         
///         IF xComplete THEN
///             IF xAbortProposed THEN
///                 (* abort condition -- abort specific cleanup *)
///                 xAbort := TRUE;
///                 xComplete := FALSE;
///             ELSIF iErrorIDProposed &lt;&gt; 0 THEN
///                 (* error condition -- error specific cleanup *)
///                 iErrorID := SEL(xComplete, 0, iErrorIDProposed);
///                 xComplete := FALSE;
///             ELSE
///                 (* ready condition -- done specific cleanup*)
///             END_IF
///         END_IF
///
///         (* common cleanup -- last steps *) 
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CyclicAction" ObjectId="0218aac3-0a1e-443b-9ae8-c019032f4ecf">
              <interface>
                <inputVars>
                  <variable name="itfTimingController">
                    <type>
                      <derived name="CBML.ITimingController" />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The CyclicAction is running until either ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero).
/// If ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
/// With ``itfTimingController`` ≠  0 (Zero) it is possible to check the current invocation time (see: |ITimingController.ControllerCheckTiming|).
/// Function blocks with a ``udiTimeLimit`` input variable (see: |IETrigTl|, |IETrigATl|, |IETrigTlTo|, |IETrigATlTo|, |ILConTl|, |ILConTlTo|, |ILConTlC|)
/// should be implement in such a way that the current invocation is exited when the consumed time for this invocation has exceeded the settings from udiTimeLimit.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         REPEAT
///             // working to reach the ready condition
///             // ⇒ xComplete := TRUE
///             // if the maximum invocation time is reached
///             // ⇒ xTimeLimit := TRUE
///             // if the maximum operating time is reached
///             // ⇒ xTimeOut := TRUE
///             // if an error condition is reached
///             // ⇒ set iErrorID to a value other than 0 (Zero)
///             itfTimingController.ControllerCheckTiming(
///                 xTimeOut=&gt;xTimeOut,
///                 xTimeLimit=&gt;xTimeLimit
///             );
///         
///             xComplete := TRUE;
///             iErrorID := ERROR.NO_ERROR;
///     
///         UNTIL xComplete OR
///               xTimeOut OR xTimeLimit OR
///               iErrorID &lt;&gt; ERROR.NO_ERROR
///         END_REPEAT
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ExitAction" ObjectId="64c15a66-fdf0-4689-8344-79c3f5f0290a">
              <interface>
                <inputVars>
                  <variable name="xAfterCleanup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="xInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// This method is intended for releasing external resources (like RTS handles).
/// Do not call other internal function block instances in the context of this method.
/// Call only external functions defined inside the RTS.
/// For cleaning up other resources then external ones, please use the ``CleanupAction``.
/// This method should be callable in the context of ``FB_EXIT`` for example
/// before downloading a new application or before reseting an application.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetAction" ObjectId="c128cc98-117f-40c3-9c3b-ecb54ae8b3c2">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``ResetAction`` is running until the output ``xComplete`` is ``TRUE``.
/// If ``xComplete`` is ``TRUE`` the state |STATE.DORMANT| is reached.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SampleAction" ObjectId="1236e95c-2b9c-448b-bd56-0afcd8eaee5f">
              <interface>
                <outputVars>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// After leaving the state |STATE.DORMANT| the ``SampleAction`` is running one time then the state |STATE.STARTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached instead.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="StartAction" ObjectId="d34a9f55-f777-46e5-997c-3ab357fd1b4a">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``StartAction`` is running until either the output ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠ 0 (Zero).
/// If ``xComplete`` is ``TRUE`` the state |STATE.EXECUTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
///
/// .. note::
///
///    To sample the inputs in the first invocation of a function block the method SampleAction is the solution of choice.
///    See: |ISampleActionProvider.SampleAction|
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f6795eae-dbc8-442c-b319-f8ea7b0a100e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ETrigATlTo_Temp" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="eErrorID">
              <type>
                <derived name="ERROR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> specific Outputs </xhtml>
              </documentation>
            </variable>
          </outputVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>CBML.ETrigATlTo</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
IF _Model.iErrorID = CBML.ERROR.TIME_OUT THEN
	eErrorID := ERROR.TIME_OUT;
ELSE
	eErrorID := _Model.iErrorID;
END_IF
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CleanupAction" ObjectId="1432e7c5-be7d-4b38-8469-5cfa814f80e8">
              <interface>
                <inputVars>
                  <variable name="xAbortProposed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iErrorIDProposed">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="xAbort">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="xAbortProposed" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="iErrorIDProposed" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// ``CleanupAction`` is running until one of the following events occurs:
/// When ``xComplete`` is ``TRUE`` the state |STATE.DONE| is reached.
/// When ``xAbort`` is ``TRUE`` the state |STATE.ABORTED| is reached.
/// When ``iErrorID`` ≠ 0 (Zero) the state |STATE.ERROR| is reached.
///
/// | After a *Ready Condition* as input (``iErrorIDProposed`` = 0 and ``xAbortProposed`` = ``FALSE``), only the output states
/// | `DONE` (``xComplete`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// | After a *Error Condition* as input (``iErrorIDProposed`` ≠ 0), only the output state
/// | `ERROR` (``iErrorID`` ≠ 0) is possible.
///
/// | After a *Abort Condition* as Input (``xAbortProposed`` = ``TRUE``), only the output states
/// | `ABORTED` (``xAbort`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         (* common cleanup -- first steps *) 
///         
///         IF xComplete THEN
///             IF xAbortProposed THEN
///                 (* abort condition -- abort specific cleanup *)
///                 xAbort := TRUE;
///                 xComplete := FALSE;
///             ELSIF iErrorIDProposed &lt;&gt; 0 THEN
///                 (* error condition -- error specific cleanup *)
///                 iErrorID := SEL(xComplete, 0, iErrorIDProposed);
///                 xComplete := FALSE;
///             ELSE
///                 (* ready condition -- done specific cleanup*)
///             END_IF
///         END_IF
///
///         (* common cleanup -- last steps *) 
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CyclicAction" ObjectId="5ff10674-353e-4d48-87fd-bf9c349239e1">
              <interface>
                <inputVars>
                  <variable name="itfTimingController">
                    <type>
                      <derived name="CBML.ITimingController" />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The CyclicAction is running until either ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero).
/// If ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
/// With ``itfTimingController`` ≠  0 (Zero) it is possible to check the current invocation time (see: |ITimingController.ControllerCheckTiming|).
/// Function blocks with a ``udiTimeLimit`` input variable (see: |IETrigTl|, |IETrigATl|, |IETrigTlTo|, |IETrigATlTo|, |ILConTl|, |ILConTlTo|, |ILConTlC|)
/// should be implement in such a way that the current invocation is exited when the consumed time for this invocation has exceeded the settings from udiTimeLimit.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         REPEAT
///             // working to reach the ready condition
///             // ⇒ xComplete := TRUE
///             // if the maximum invocation time is reached
///             // ⇒ xTimeLimit := TRUE
///             // if the maximum operating time is reached
///             // ⇒ xTimeOut := TRUE
///             // if an error condition is reached
///             // ⇒ set iErrorID to a value other than 0 (Zero)
///             itfTimingController.ControllerCheckTiming(
///                 xTimeOut=&gt;xTimeOut,
///                 xTimeLimit=&gt;xTimeLimit
///             );
///         
///             xComplete := TRUE;
///             iErrorID := ERROR.NO_ERROR;
///     
///         UNTIL xComplete OR
///               xTimeOut OR xTimeLimit OR
///               iErrorID &lt;&gt; ERROR.NO_ERROR
///         END_REPEAT
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ExitAction" ObjectId="9a6ebc10-1440-4c89-9474-01999b05190e">
              <interface>
                <inputVars>
                  <variable name="xAfterCleanup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="xInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// This method is intended for releasing external resources (like RTS handles).
/// Do not call other internal function block instances in the context of this method.
/// Call only external functions defined inside the RTS.
/// For cleaning up other resources then external ones, please use the ``CleanupAction``.
/// This method should be callable in the context of ``FB_EXIT`` for example
/// before downloading a new application or before reseting an application.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetAction" ObjectId="dbd329f5-abdb-41a1-8e4c-8941ebe81ec8">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``ResetAction`` is running until the output ``xComplete`` is ``TRUE``.
/// If ``xComplete`` is ``TRUE`` the state |STATE.DORMANT| is reached.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SampleAction" ObjectId="70f4fc0b-937d-4bb0-8f56-5fd0c739a18a">
              <interface>
                <outputVars>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// After leaving the state |STATE.DORMANT| the ``SampleAction`` is running one time then the state |STATE.STARTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached instead.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="StartAction" ObjectId="45719353-6fc3-485a-8d52-77e43dcd65cd">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``StartAction`` is running until either the output ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠ 0 (Zero).
/// If ``xComplete`` is ``TRUE`` the state |STATE.EXECUTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
///
/// .. note::
///
///    To sample the inputs in the first invocation of a function block the method SampleAction is the solution of choice.
///    See: |ISampleActionProvider.SampleAction|
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5a796041-12b6-44ab-80ff-bd54c72659b1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ETrigATo_Temp" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="eErrorID">
              <type>
                <derived name="ERROR" />
              </type>
            </variable>
          </outputVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>CBML.ETrigATo</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
IF _Model.iErrorID = CBML.ERROR.TIME_OUT THEN
	eErrorID := ERROR.TIME_OUT;
ELSE
	eErrorID := _Model.iErrorID;
END_IF
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CleanupAction" ObjectId="709ed019-dc78-4c44-9213-4f49c6066096">
              <interface>
                <inputVars>
                  <variable name="xAbortProposed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iErrorIDProposed">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="xAbort">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="xAbortProposed" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="iErrorIDProposed" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// ``CleanupAction`` is running until one of the following events occurs:
/// When ``xComplete`` is ``TRUE`` the state |STATE.DONE| is reached.
/// When ``xAbort`` is ``TRUE`` the state |STATE.ABORTED| is reached.
/// When ``iErrorID`` ≠ 0 (Zero) the state |STATE.ERROR| is reached.
///
/// | After a *Ready Condition* as input (``iErrorIDProposed`` = 0 and ``xAbortProposed`` = ``FALSE``), only the output states
/// | `DONE` (``xComplete`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// | After a *Error Condition* as input (``iErrorIDProposed`` ≠ 0), only the output state
/// | `ERROR` (``iErrorID`` ≠ 0) is possible.
///
/// | After a *Abort Condition* as Input (``xAbortProposed`` = ``TRUE``), only the output states
/// | `ABORTED` (``xAbort`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         (* common cleanup -- first steps *) 
///         
///         IF xComplete THEN
///             IF xAbortProposed THEN
///                 (* abort condition -- abort specific cleanup *)
///                 xAbort := TRUE;
///                 xComplete := FALSE;
///             ELSIF iErrorIDProposed &lt;&gt; 0 THEN
///                 (* error condition -- error specific cleanup *)
///                 iErrorID := SEL(xComplete, 0, iErrorIDProposed);
///                 xComplete := FALSE;
///             ELSE
///                 (* ready condition -- done specific cleanup*)
///             END_IF
///         END_IF
///
///         (* common cleanup -- last steps *) 
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CyclicAction" ObjectId="1e33516d-b13e-4940-bffa-be32aac94213">
              <interface>
                <inputVars>
                  <variable name="itfTimingController">
                    <type>
                      <derived name="CBML.ITimingController" />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The CyclicAction is running until either ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero).
/// If ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
/// With ``itfTimingController`` ≠  0 (Zero) it is possible to check the current invocation time (see: |ITimingController.ControllerCheckTiming|).
/// Function blocks with a ``udiTimeLimit`` input variable (see: |IETrigTl|, |IETrigATl|, |IETrigTlTo|, |IETrigATlTo|, |ILConTl|, |ILConTlTo|, |ILConTlC|)
/// should be implement in such a way that the current invocation is exited when the consumed time for this invocation has exceeded the settings from udiTimeLimit.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         REPEAT
///             // working to reach the ready condition
///             // ⇒ xComplete := TRUE
///             // if the maximum invocation time is reached
///             // ⇒ xTimeLimit := TRUE
///             // if the maximum operating time is reached
///             // ⇒ xTimeOut := TRUE
///             // if an error condition is reached
///             // ⇒ set iErrorID to a value other than 0 (Zero)
///             itfTimingController.ControllerCheckTiming(
///                 xTimeOut=&gt;xTimeOut,
///                 xTimeLimit=&gt;xTimeLimit
///             );
///         
///             xComplete := TRUE;
///             iErrorID := ERROR.NO_ERROR;
///     
///         UNTIL xComplete OR
///               xTimeOut OR xTimeLimit OR
///               iErrorID &lt;&gt; ERROR.NO_ERROR
///         END_REPEAT
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ExitAction" ObjectId="39dfb963-ea12-4e41-b2cc-51d123bd5e10">
              <interface>
                <inputVars>
                  <variable name="xAfterCleanup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="xInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// This method is intended for releasing external resources (like RTS handles).
/// Do not call other internal function block instances in the context of this method.
/// Call only external functions defined inside the RTS.
/// For cleaning up other resources then external ones, please use the ``CleanupAction``.
/// This method should be callable in the context of ``FB_EXIT`` for example
/// before downloading a new application or before reseting an application.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetAction" ObjectId="750e08a0-2742-47ca-8f37-c9ce5ad82931">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``ResetAction`` is running until the output ``xComplete`` is ``TRUE``.
/// If ``xComplete`` is ``TRUE`` the state |STATE.DORMANT| is reached.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SampleAction" ObjectId="c5ee6552-dde9-4db3-9b50-40165601ffcf">
              <interface>
                <outputVars>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// After leaving the state |STATE.DORMANT| the ``SampleAction`` is running one time then the state |STATE.STARTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached instead.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="StartAction" ObjectId="dda229ac-9d89-4ef2-9984-ada9e0ee8f7e">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``StartAction`` is running until either the output ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠ 0 (Zero).
/// If ``xComplete`` is ``TRUE`` the state |STATE.EXECUTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
///
/// .. note::
///
///    To sample the inputs in the first invocation of a function block the method SampleAction is the solution of choice.
///    See: |ISampleActionProvider.SampleAction|
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0e18ea33-b46d-48ea-8eaa-5c2bcaaafa0d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ETrigTl_Temp" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="eErrorID">
              <type>
                <derived name="ERROR" />
              </type>
            </variable>
          </outputVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>CBML.ETrigTl</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
eErrorID := _Model.iErrorID;
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CleanupAction" ObjectId="28e4f168-8a11-4316-87d1-d341d8a165bb">
              <interface>
                <inputVars>
                  <variable name="xAbortProposed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iErrorIDProposed">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="xAbort">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="xAbortProposed" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="iErrorIDProposed" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// ``CleanupAction`` is running until one of the following events occurs:
/// When ``xComplete`` is ``TRUE`` the state |STATE.DONE| is reached.
/// When ``xAbort`` is ``TRUE`` the state |STATE.ABORTED| is reached.
/// When ``iErrorID`` ≠ 0 (Zero) the state |STATE.ERROR| is reached.
///
/// | After a *Ready Condition* as input (``iErrorIDProposed`` = 0 and ``xAbortProposed`` = ``FALSE``), only the output states
/// | `DONE` (``xComplete`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// | After a *Error Condition* as input (``iErrorIDProposed`` ≠ 0), only the output state
/// | `ERROR` (``iErrorID`` ≠ 0) is possible.
///
/// | After a *Abort Condition* as Input (``xAbortProposed`` = ``TRUE``), only the output states
/// | `ABORTED` (``xAbort`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         (* common cleanup -- first steps *) 
///         
///         IF xComplete THEN
///             IF xAbortProposed THEN
///                 (* abort condition -- abort specific cleanup *)
///                 xAbort := TRUE;
///                 xComplete := FALSE;
///             ELSIF iErrorIDProposed &lt;&gt; 0 THEN
///                 (* error condition -- error specific cleanup *)
///                 iErrorID := SEL(xComplete, 0, iErrorIDProposed);
///                 xComplete := FALSE;
///             ELSE
///                 (* ready condition -- done specific cleanup*)
///             END_IF
///         END_IF
///
///         (* common cleanup -- last steps *) 
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CyclicAction" ObjectId="ed28022c-f20e-4f7c-ad5e-e474e189f31e">
              <interface>
                <inputVars>
                  <variable name="itfTimingController">
                    <type>
                      <derived name="CBML.ITimingController" />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The CyclicAction is running until either ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero).
/// If ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
/// With ``itfTimingController`` ≠  0 (Zero) it is possible to check the current invocation time (see: |ITimingController.ControllerCheckTiming|).
/// Function blocks with a ``udiTimeLimit`` input variable (see: |IETrigTl|, |IETrigATl|, |IETrigTlTo|, |IETrigATlTo|, |ILConTl|, |ILConTlTo|, |ILConTlC|)
/// should be implement in such a way that the current invocation is exited when the consumed time for this invocation has exceeded the settings from udiTimeLimit.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         REPEAT
///             // working to reach the ready condition
///             // ⇒ xComplete := TRUE
///             // if the maximum invocation time is reached
///             // ⇒ xTimeLimit := TRUE
///             // if the maximum operating time is reached
///             // ⇒ xTimeOut := TRUE
///             // if an error condition is reached
///             // ⇒ set iErrorID to a value other than 0 (Zero)
///             itfTimingController.ControllerCheckTiming(
///                 xTimeOut=&gt;xTimeOut,
///                 xTimeLimit=&gt;xTimeLimit
///             );
///         
///             xComplete := TRUE;
///             iErrorID := ERROR.NO_ERROR;
///     
///         UNTIL xComplete OR
///               xTimeOut OR xTimeLimit OR
///               iErrorID &lt;&gt; ERROR.NO_ERROR
///         END_REPEAT
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ExitAction" ObjectId="0d7fa0d0-945e-4c86-aeef-e4781d2b9d49">
              <interface>
                <inputVars>
                  <variable name="xAfterCleanup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="xInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// This method is intended for releasing external resources (like RTS handles).
/// Do not call other internal function block instances in the context of this method.
/// Call only external functions defined inside the RTS.
/// For cleaning up other resources then external ones, please use the ``CleanupAction``.
/// This method should be callable in the context of ``FB_EXIT`` for example
/// before downloading a new application or before reseting an application.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetAction" ObjectId="2d884bdf-1d12-46bc-95b3-66c6b236bd55">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``ResetAction`` is running until the output ``xComplete`` is ``TRUE``.
/// If ``xComplete`` is ``TRUE`` the state |STATE.DORMANT| is reached.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SampleAction" ObjectId="f35942c3-08b1-42b9-9357-4ecc0d650280">
              <interface>
                <outputVars>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// After leaving the state |STATE.DORMANT| the ``SampleAction`` is running one time then the state |STATE.STARTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached instead.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="StartAction" ObjectId="66826820-a7d6-43c6-9ac1-bbac396fda84">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``StartAction`` is running until either the output ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠ 0 (Zero).
/// If ``xComplete`` is ``TRUE`` the state |STATE.EXECUTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
///
/// .. note::
///
///    To sample the inputs in the first invocation of a function block the method SampleAction is the solution of choice.
///    See: |ISampleActionProvider.SampleAction|
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>9921db3c-1753-4d52-b3fc-0aca2a3e820b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ETrigTlTo_Temp" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="eErrorID">
              <type>
                <derived name="ERROR" />
              </type>
            </variable>
          </outputVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>CBML.ETrigTlTo</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
IF _Model.iErrorID = CBML.ERROR.TIME_OUT THEN
	eErrorID := ERROR.TIME_OUT;
ELSE
	eErrorID := _Model.iErrorID;
END_IF
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CleanupAction" ObjectId="c3b08fe2-9c1e-456b-81b3-0563160bcac4">
              <interface>
                <inputVars>
                  <variable name="xAbortProposed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iErrorIDProposed">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="xAbort">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="xAbortProposed" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="iErrorIDProposed" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// ``CleanupAction`` is running until one of the following events occurs:
/// When ``xComplete`` is ``TRUE`` the state |STATE.DONE| is reached.
/// When ``xAbort`` is ``TRUE`` the state |STATE.ABORTED| is reached.
/// When ``iErrorID`` ≠ 0 (Zero) the state |STATE.ERROR| is reached.
///
/// | After a *Ready Condition* as input (``iErrorIDProposed`` = 0 and ``xAbortProposed`` = ``FALSE``), only the output states
/// | `DONE` (``xComplete`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// | After a *Error Condition* as input (``iErrorIDProposed`` ≠ 0), only the output state
/// | `ERROR` (``iErrorID`` ≠ 0) is possible.
///
/// | After a *Abort Condition* as Input (``xAbortProposed`` = ``TRUE``), only the output states
/// | `ABORTED` (``xAbort`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         (* common cleanup -- first steps *) 
///         
///         IF xComplete THEN
///             IF xAbortProposed THEN
///                 (* abort condition -- abort specific cleanup *)
///                 xAbort := TRUE;
///                 xComplete := FALSE;
///             ELSIF iErrorIDProposed &lt;&gt; 0 THEN
///                 (* error condition -- error specific cleanup *)
///                 iErrorID := SEL(xComplete, 0, iErrorIDProposed);
///                 xComplete := FALSE;
///             ELSE
///                 (* ready condition -- done specific cleanup*)
///             END_IF
///         END_IF
///
///         (* common cleanup -- last steps *) 
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CyclicAction" ObjectId="14c27d02-0c8c-454c-812f-a0b1bb86d2b0">
              <interface>
                <inputVars>
                  <variable name="itfTimingController">
                    <type>
                      <derived name="CBML.ITimingController" />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The CyclicAction is running until either ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero).
/// If ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
/// With ``itfTimingController`` ≠  0 (Zero) it is possible to check the current invocation time (see: |ITimingController.ControllerCheckTiming|).
/// Function blocks with a ``udiTimeLimit`` input variable (see: |IETrigTl|, |IETrigATl|, |IETrigTlTo|, |IETrigATlTo|, |ILConTl|, |ILConTlTo|, |ILConTlC|)
/// should be implement in such a way that the current invocation is exited when the consumed time for this invocation has exceeded the settings from udiTimeLimit.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         REPEAT
///             // working to reach the ready condition
///             // ⇒ xComplete := TRUE
///             // if the maximum invocation time is reached
///             // ⇒ xTimeLimit := TRUE
///             // if the maximum operating time is reached
///             // ⇒ xTimeOut := TRUE
///             // if an error condition is reached
///             // ⇒ set iErrorID to a value other than 0 (Zero)
///             itfTimingController.ControllerCheckTiming(
///                 xTimeOut=&gt;xTimeOut,
///                 xTimeLimit=&gt;xTimeLimit
///             );
///         
///             xComplete := TRUE;
///             iErrorID := ERROR.NO_ERROR;
///     
///         UNTIL xComplete OR
///               xTimeOut OR xTimeLimit OR
///               iErrorID &lt;&gt; ERROR.NO_ERROR
///         END_REPEAT
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ExitAction" ObjectId="ef7a9874-fabd-4cec-b947-c5ad95976994">
              <interface>
                <inputVars>
                  <variable name="xAfterCleanup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="xInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// This method is intended for releasing external resources (like RTS handles).
/// Do not call other internal function block instances in the context of this method.
/// Call only external functions defined inside the RTS.
/// For cleaning up other resources then external ones, please use the ``CleanupAction``.
/// This method should be callable in the context of ``FB_EXIT`` for example
/// before downloading a new application or before reseting an application.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetAction" ObjectId="73bbf7df-5c21-46ba-8830-f971a04f795b">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``ResetAction`` is running until the output ``xComplete`` is ``TRUE``.
/// If ``xComplete`` is ``TRUE`` the state |STATE.DORMANT| is reached.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SampleAction" ObjectId="77a33482-3dc1-4098-abec-08b8848ebcd3">
              <interface>
                <outputVars>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// After leaving the state |STATE.DORMANT| the ``SampleAction`` is running one time then the state |STATE.STARTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached instead.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="StartAction" ObjectId="61d3090c-dd09-4c0c-a9a2-10767ca27835">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``StartAction`` is running until either the output ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠ 0 (Zero).
/// If ``xComplete`` is ``TRUE`` the state |STATE.EXECUTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
///
/// .. note::
///
///    To sample the inputs in the first invocation of a function block the method SampleAction is the solution of choice.
///    See: |ISampleActionProvider.SampleAction|
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>302d1c8b-000f-4dc1-904c-e60d002b810c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ETrigTo_Temp" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="eErrorID">
              <type>
                <derived name="ERROR" />
              </type>
            </variable>
          </outputVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>CBML.ETrigTo</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
IF _Model.iErrorID = CBML.ERROR.TIME_OUT THEN
	eErrorID := ERROR.TIME_OUT;
ELSE
	eErrorID := _Model.iErrorID;
END_IF
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CleanupAction" ObjectId="9d37ba21-0741-4600-9772-c54af54991ab">
              <interface>
                <inputVars>
                  <variable name="xAbortProposed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iErrorIDProposed">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="xAbort">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="xAbortProposed" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="iErrorIDProposed" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// ``CleanupAction`` is running until one of the following events occurs:
/// When ``xComplete`` is ``TRUE`` the state |STATE.DONE| is reached.
/// When ``xAbort`` is ``TRUE`` the state |STATE.ABORTED| is reached.
/// When ``iErrorID`` ≠ 0 (Zero) the state |STATE.ERROR| is reached.
///
/// | After a *Ready Condition* as input (``iErrorIDProposed`` = 0 and ``xAbortProposed`` = ``FALSE``), only the output states
/// | `DONE` (``xComplete`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// | After a *Error Condition* as input (``iErrorIDProposed`` ≠ 0), only the output state
/// | `ERROR` (``iErrorID`` ≠ 0) is possible.
///
/// | After a *Abort Condition* as Input (``xAbortProposed`` = ``TRUE``), only the output states
/// | `ABORTED` (``xAbort`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         (* common cleanup -- first steps *) 
///         
///         IF xComplete THEN
///             IF xAbortProposed THEN
///                 (* abort condition -- abort specific cleanup *)
///                 xAbort := TRUE;
///                 xComplete := FALSE;
///             ELSIF iErrorIDProposed &lt;&gt; 0 THEN
///                 (* error condition -- error specific cleanup *)
///                 iErrorID := SEL(xComplete, 0, iErrorIDProposed);
///                 xComplete := FALSE;
///             ELSE
///                 (* ready condition -- done specific cleanup*)
///             END_IF
///         END_IF
///
///         (* common cleanup -- last steps *) 
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CyclicAction" ObjectId="d7c246b0-27f8-40b1-a1b1-2ed3500648af">
              <interface>
                <inputVars>
                  <variable name="itfTimingController">
                    <type>
                      <derived name="CBML.ITimingController" />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The CyclicAction is running until either ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero).
/// If ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
/// With ``itfTimingController`` ≠  0 (Zero) it is possible to check the current invocation time (see: |ITimingController.ControllerCheckTiming|).
/// Function blocks with a ``udiTimeLimit`` input variable (see: |IETrigTl|, |IETrigATl|, |IETrigTlTo|, |IETrigATlTo|, |ILConTl|, |ILConTlTo|, |ILConTlC|)
/// should be implement in such a way that the current invocation is exited when the consumed time for this invocation has exceeded the settings from udiTimeLimit.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         REPEAT
///             // working to reach the ready condition
///             // ⇒ xComplete := TRUE
///             // if the maximum invocation time is reached
///             // ⇒ xTimeLimit := TRUE
///             // if the maximum operating time is reached
///             // ⇒ xTimeOut := TRUE
///             // if an error condition is reached
///             // ⇒ set iErrorID to a value other than 0 (Zero)
///             itfTimingController.ControllerCheckTiming(
///                 xTimeOut=&gt;xTimeOut,
///                 xTimeLimit=&gt;xTimeLimit
///             );
///         
///             xComplete := TRUE;
///             iErrorID := ERROR.NO_ERROR;
///     
///         UNTIL xComplete OR
///               xTimeOut OR xTimeLimit OR
///               iErrorID &lt;&gt; ERROR.NO_ERROR
///         END_REPEAT
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ExitAction" ObjectId="4dad0011-9b73-479e-bfc7-00e55ba16121">
              <interface>
                <inputVars>
                  <variable name="xAfterCleanup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="xInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// This method is intended for releasing external resources (like RTS handles).
/// Do not call other internal function block instances in the context of this method.
/// Call only external functions defined inside the RTS.
/// For cleaning up other resources then external ones, please use the ``CleanupAction``.
/// This method should be callable in the context of ``FB_EXIT`` for example
/// before downloading a new application or before reseting an application.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetAction" ObjectId="de7a8b0e-1eef-4389-8661-782141d2b8a2">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``ResetAction`` is running until the output ``xComplete`` is ``TRUE``.
/// If ``xComplete`` is ``TRUE`` the state |STATE.DORMANT| is reached.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SampleAction" ObjectId="a946d826-27fa-4baf-a90a-2aaaf7688c3c">
              <interface>
                <outputVars>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// After leaving the state |STATE.DORMANT| the ``SampleAction`` is running one time then the state |STATE.STARTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached instead.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="StartAction" ObjectId="142108c9-1acd-4e90-bb52-53ffb142e5c0">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``StartAction`` is running until either the output ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠ 0 (Zero).
/// If ``xComplete`` is ``TRUE`` the state |STATE.EXECUTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
///
/// .. note::
///
///    To sample the inputs in the first invocation of a function block the method SampleAction is the solution of choice.
///    See: |ISampleActionProvider.SampleAction|
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f89c7486-e894-4f40-a3d2-2de75de71ad0</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LCon_Temp" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="eErrorID">
              <type>
                <derived name="ERROR" />
              </type>
            </variable>
          </outputVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>CBML.LCon</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
eErrorID := _Model.iErrorID;

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CleanupAction" ObjectId="f2328ecc-4112-42da-88d2-3d730117a691">
              <interface>
                <inputVars>
                  <variable name="xAbortProposed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iErrorIDProposed">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="xAbort">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="xAbortProposed" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="iErrorIDProposed" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// ``CleanupAction`` is running until one of the following events occurs:
/// When ``xComplete`` is ``TRUE`` the state |STATE.DONE| is reached.
/// When ``xAbort`` is ``TRUE`` the state |STATE.ABORTED| is reached.
/// When ``iErrorID`` ≠ 0 (Zero) the state |STATE.ERROR| is reached.
///
/// | After a *Ready Condition* as input (``iErrorIDProposed`` = 0 and ``xAbortProposed`` = ``FALSE``), only the output states
/// | `DONE` (``xComplete`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// | After a *Error Condition* as input (``iErrorIDProposed`` ≠ 0), only the output state
/// | `ERROR` (``iErrorID`` ≠ 0) is possible.
///
/// | After a *Abort Condition* as Input (``xAbortProposed`` = ``TRUE``), only the output states
/// | `ABORTED` (``xAbort`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         (* common cleanup -- first steps *) 
///         
///         IF xComplete THEN
///             IF xAbortProposed THEN
///                 (* abort condition -- abort specific cleanup *)
///                 xAbort := TRUE;
///                 xComplete := FALSE;
///             ELSIF iErrorIDProposed &lt;&gt; 0 THEN
///                 (* error condition -- error specific cleanup *)
///                 iErrorID := SEL(xComplete, 0, iErrorIDProposed);
///                 xComplete := FALSE;
///             ELSE
///                 (* ready condition -- done specific cleanup*)
///             END_IF
///         END_IF
///
///         (* common cleanup -- last steps *) 
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CyclicAction" ObjectId="c57fa5bc-6317-4710-9730-42e1389a29d9">
              <interface>
                <inputVars>
                  <variable name="itfTimingController">
                    <type>
                      <derived name="CBML.ITimingController" />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The CyclicAction is running until either ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero).
/// If ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
/// With ``itfTimingController`` ≠  0 (Zero) it is possible to check the current invocation time (see: |ITimingController.ControllerCheckTiming|).
/// Function blocks with a ``udiTimeLimit`` input variable (see: |IETrigTl|, |IETrigATl|, |IETrigTlTo|, |IETrigATlTo|, |ILConTl|, |ILConTlTo|, |ILConTlC|)
/// should be implement in such a way that the current invocation is exited when the consumed time for this invocation has exceeded the settings from udiTimeLimit.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         REPEAT
///             // working to reach the ready condition
///             // ⇒ xComplete := TRUE
///             // if the maximum invocation time is reached
///             // ⇒ xTimeLimit := TRUE
///             // if the maximum operating time is reached
///             // ⇒ xTimeOut := TRUE
///             // if an error condition is reached
///             // ⇒ set iErrorID to a value other than 0 (Zero)
///             itfTimingController.ControllerCheckTiming(
///                 xTimeOut=&gt;xTimeOut,
///                 xTimeLimit=&gt;xTimeLimit
///             );
///         
///             xComplete := TRUE;
///             iErrorID := ERROR.NO_ERROR;
///     
///         UNTIL xComplete OR
///               xTimeOut OR xTimeLimit OR
///               iErrorID &lt;&gt; ERROR.NO_ERROR
///         END_REPEAT
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ExitAction" ObjectId="ed4f02d0-024f-40cc-920c-0dbd42c0bacc">
              <interface>
                <inputVars>
                  <variable name="xAfterCleanup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="xInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// This method is intended for releasing external resources (like RTS handles).
/// Do not call other internal function block instances in the context of this method.
/// Call only external functions defined inside the RTS.
/// For cleaning up other resources then external ones, please use the ``CleanupAction``.
/// This method should be callable in the context of ``FB_EXIT`` for example
/// before downloading a new application or before reseting an application.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetAction" ObjectId="f4cedef7-d550-4cdb-b0f6-05406194cc7b">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``ResetAction`` is running until the output ``xComplete`` is ``TRUE``.
/// If ``xComplete`` is ``TRUE`` the state |STATE.DORMANT| is reached.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="StartAction" ObjectId="2fad947c-899e-4c19-a77f-41f475a58155">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``StartAction`` is running until either the output ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠ 0 (Zero).
/// If ``xComplete`` is ``TRUE`` the state |STATE.EXECUTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
///
/// .. note::
///
///    To sample the inputs in the first invocation of a function block the method SampleAction is the solution of choice.
///    See: |ISampleActionProvider.SampleAction|
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5f6d7413-d76b-433c-9ec2-ffd9a2b04317</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LConC_Temp" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="eErrorID">
              <type>
                <derived name="ERROR" />
              </type>
            </variable>
          </outputVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>CBML.LConC</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
eErrorID := _Model.iErrorID;

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CleanupAction" ObjectId="dde821fd-38fd-4b48-a96e-163d90926f5b">
              <interface>
                <inputVars>
                  <variable name="xAbortProposed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iErrorIDProposed">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="xAbort">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="xAbortProposed" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="iErrorIDProposed" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// ``CleanupAction`` is running until one of the following events occurs:
/// When ``xComplete`` is ``TRUE`` the state |STATE.DONE| is reached.
/// When ``xAbort`` is ``TRUE`` the state |STATE.ABORTED| is reached.
/// When ``iErrorID`` ≠ 0 (Zero) the state |STATE.ERROR| is reached.
///
/// | After a *Ready Condition* as input (``iErrorIDProposed`` = 0 and ``xAbortProposed`` = ``FALSE``), only the output states
/// | `DONE` (``xComplete`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// | After a *Error Condition* as input (``iErrorIDProposed`` ≠ 0), only the output state
/// | `ERROR` (``iErrorID`` ≠ 0) is possible.
///
/// | After a *Abort Condition* as Input (``xAbortProposed`` = ``TRUE``), only the output states
/// | `ABORTED` (``xAbort`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         (* common cleanup -- first steps *) 
///         
///         IF xComplete THEN
///             IF xAbortProposed THEN
///                 (* abort condition -- abort specific cleanup *)
///                 xAbort := TRUE;
///                 xComplete := FALSE;
///             ELSIF iErrorIDProposed &lt;&gt; 0 THEN
///                 (* error condition -- error specific cleanup *)
///                 iErrorID := SEL(xComplete, 0, iErrorIDProposed);
///                 xComplete := FALSE;
///             ELSE
///                 (* ready condition -- done specific cleanup*)
///             END_IF
///         END_IF
///
///         (* common cleanup -- last steps *) 
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CyclicAction" ObjectId="2790bff2-affc-4a10-94ca-477516e286e4">
              <interface>
                <inputVars>
                  <variable name="itfTimingController">
                    <type>
                      <derived name="CBML.ITimingController" />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The CyclicAction is running until either ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero).
/// If ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
/// With ``itfTimingController`` ≠  0 (Zero) it is possible to check the current invocation time (see: |ITimingController.ControllerCheckTiming|).
/// Function blocks with a ``udiTimeLimit`` input variable (see: |IETrigTl|, |IETrigATl|, |IETrigTlTo|, |IETrigATlTo|, |ILConTl|, |ILConTlTo|, |ILConTlC|)
/// should be implement in such a way that the current invocation is exited when the consumed time for this invocation has exceeded the settings from udiTimeLimit.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         REPEAT
///             // working to reach the ready condition
///             // ⇒ xComplete := TRUE
///             // if the maximum invocation time is reached
///             // ⇒ xTimeLimit := TRUE
///             // if the maximum operating time is reached
///             // ⇒ xTimeOut := TRUE
///             // if an error condition is reached
///             // ⇒ set iErrorID to a value other than 0 (Zero)
///             itfTimingController.ControllerCheckTiming(
///                 xTimeOut=&gt;xTimeOut,
///                 xTimeLimit=&gt;xTimeLimit
///             );
///         
///             xComplete := TRUE;
///             iErrorID := ERROR.NO_ERROR;
///     
///         UNTIL xComplete OR
///               xTimeOut OR xTimeLimit OR
///               iErrorID &lt;&gt; ERROR.NO_ERROR
///         END_REPEAT
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ExitAction" ObjectId="c858ae94-318b-4dde-862f-d3a89f9e3901">
              <interface>
                <inputVars>
                  <variable name="xAfterCleanup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="xInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// This method is intended for releasing external resources (like RTS handles).
/// Do not call other internal function block instances in the context of this method.
/// Call only external functions defined inside the RTS.
/// For cleaning up other resources then external ones, please use the ``CleanupAction``.
/// This method should be callable in the context of ``FB_EXIT`` for example
/// before downloading a new application or before reseting an application.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetAction" ObjectId="241c3095-4a09-4b94-a063-8ae488169e76">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``ResetAction`` is running until the output ``xComplete`` is ``TRUE``.
/// If ``xComplete`` is ``TRUE`` the state |STATE.DORMANT| is reached.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="StartAction" ObjectId="40c6dcaa-20d1-483c-af88-19e7888d47ee">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``StartAction`` is running until either the output ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠ 0 (Zero).
/// If ``xComplete`` is ``TRUE`` the state |STATE.EXECUTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
///
/// .. note::
///
///    To sample the inputs in the first invocation of a function block the method SampleAction is the solution of choice.
///    See: |ISampleActionProvider.SampleAction|
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>52ed2cf0-eda1-44f9-9591-8a61aeebd5c3</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LConTl_Temp" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="eErrorID">
              <type>
                <derived name="ERROR" />
              </type>
            </variable>
          </outputVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>CBML.LConTl</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
eErrorID := _Model.iErrorID;

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CleanupAction" ObjectId="638c5255-0533-4eb2-a238-b1a1a64968de">
              <interface>
                <inputVars>
                  <variable name="xAbortProposed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iErrorIDProposed">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="xAbort">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="xAbortProposed" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="iErrorIDProposed" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// ``CleanupAction`` is running until one of the following events occurs:
/// When ``xComplete`` is ``TRUE`` the state |STATE.DONE| is reached.
/// When ``xAbort`` is ``TRUE`` the state |STATE.ABORTED| is reached.
/// When ``iErrorID`` ≠ 0 (Zero) the state |STATE.ERROR| is reached.
///
/// | After a *Ready Condition* as input (``iErrorIDProposed`` = 0 and ``xAbortProposed`` = ``FALSE``), only the output states
/// | `DONE` (``xComplete`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// | After a *Error Condition* as input (``iErrorIDProposed`` ≠ 0), only the output state
/// | `ERROR` (``iErrorID`` ≠ 0) is possible.
///
/// | After a *Abort Condition* as Input (``xAbortProposed`` = ``TRUE``), only the output states
/// | `ABORTED` (``xAbort`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         (* common cleanup -- first steps *) 
///         
///         IF xComplete THEN
///             IF xAbortProposed THEN
///                 (* abort condition -- abort specific cleanup *)
///                 xAbort := TRUE;
///                 xComplete := FALSE;
///             ELSIF iErrorIDProposed &lt;&gt; 0 THEN
///                 (* error condition -- error specific cleanup *)
///                 iErrorID := SEL(xComplete, 0, iErrorIDProposed);
///                 xComplete := FALSE;
///             ELSE
///                 (* ready condition -- done specific cleanup*)
///             END_IF
///         END_IF
///
///         (* common cleanup -- last steps *) 
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CyclicAction" ObjectId="d0992de5-a40a-4876-a405-8bcf6e87dadc">
              <interface>
                <inputVars>
                  <variable name="itfTimingController">
                    <type>
                      <derived name="CBML.ITimingController" />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The CyclicAction is running until either ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero).
/// If ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
/// With ``itfTimingController`` ≠  0 (Zero) it is possible to check the current invocation time (see: |ITimingController.ControllerCheckTiming|).
/// Function blocks with a ``udiTimeLimit`` input variable (see: |IETrigTl|, |IETrigATl|, |IETrigTlTo|, |IETrigATlTo|, |ILConTl|, |ILConTlTo|, |ILConTlC|)
/// should be implement in such a way that the current invocation is exited when the consumed time for this invocation has exceeded the settings from udiTimeLimit.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         REPEAT
///             // working to reach the ready condition
///             // ⇒ xComplete := TRUE
///             // if the maximum invocation time is reached
///             // ⇒ xTimeLimit := TRUE
///             // if the maximum operating time is reached
///             // ⇒ xTimeOut := TRUE
///             // if an error condition is reached
///             // ⇒ set iErrorID to a value other than 0 (Zero)
///             itfTimingController.ControllerCheckTiming(
///                 xTimeOut=&gt;xTimeOut,
///                 xTimeLimit=&gt;xTimeLimit
///             );
///         
///             xComplete := TRUE;
///             iErrorID := ERROR.NO_ERROR;
///     
///         UNTIL xComplete OR
///               xTimeOut OR xTimeLimit OR
///               iErrorID &lt;&gt; ERROR.NO_ERROR
///         END_REPEAT
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ExitAction" ObjectId="39fb2595-a1c2-48ef-9683-7a4b8604cc80">
              <interface>
                <inputVars>
                  <variable name="xAfterCleanup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="xInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// This method is intended for releasing external resources (like RTS handles).
/// Do not call other internal function block instances in the context of this method.
/// Call only external functions defined inside the RTS.
/// For cleaning up other resources then external ones, please use the ``CleanupAction``.
/// This method should be callable in the context of ``FB_EXIT`` for example
/// before downloading a new application or before reseting an application.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetAction" ObjectId="c3d72220-acae-4580-99f3-ee357e616dd9">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``ResetAction`` is running until the output ``xComplete`` is ``TRUE``.
/// If ``xComplete`` is ``TRUE`` the state |STATE.DORMANT| is reached.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="StartAction" ObjectId="f60069a1-fa24-4ccd-bc6e-1305ce60f8d4">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``StartAction`` is running until either the output ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠ 0 (Zero).
/// If ``xComplete`` is ``TRUE`` the state |STATE.EXECUTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
///
/// .. note::
///
///    To sample the inputs in the first invocation of a function block the method SampleAction is the solution of choice.
///    See: |ISampleActionProvider.SampleAction|
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7fb8f383-dbe0-4433-8133-69bfde0e26ac</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LConTlC_Temp" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="eErrorID">
              <type>
                <derived name="ERROR" />
              </type>
            </variable>
          </outputVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>CBML.LConTlC</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
eErrorID := _Model.iErrorID;

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CleanupAction" ObjectId="a5c0473a-5bab-419f-b2b0-db8fc5c3c2d2">
              <interface>
                <inputVars>
                  <variable name="xAbortProposed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iErrorIDProposed">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="xAbort">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="xAbortProposed" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="iErrorIDProposed" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// ``CleanupAction`` is running until one of the following events occurs:
/// When ``xComplete`` is ``TRUE`` the state |STATE.DONE| is reached.
/// When ``xAbort`` is ``TRUE`` the state |STATE.ABORTED| is reached.
/// When ``iErrorID`` ≠ 0 (Zero) the state |STATE.ERROR| is reached.
///
/// | After a *Ready Condition* as input (``iErrorIDProposed`` = 0 and ``xAbortProposed`` = ``FALSE``), only the output states
/// | `DONE` (``xComplete`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// | After a *Error Condition* as input (``iErrorIDProposed`` ≠ 0), only the output state
/// | `ERROR` (``iErrorID`` ≠ 0) is possible.
///
/// | After a *Abort Condition* as Input (``xAbortProposed`` = ``TRUE``), only the output states
/// | `ABORTED` (``xAbort`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         (* common cleanup -- first steps *) 
///         
///         IF xComplete THEN
///             IF xAbortProposed THEN
///                 (* abort condition -- abort specific cleanup *)
///                 xAbort := TRUE;
///                 xComplete := FALSE;
///             ELSIF iErrorIDProposed &lt;&gt; 0 THEN
///                 (* error condition -- error specific cleanup *)
///                 iErrorID := SEL(xComplete, 0, iErrorIDProposed);
///                 xComplete := FALSE;
///             ELSE
///                 (* ready condition -- done specific cleanup*)
///             END_IF
///         END_IF
///
///         (* common cleanup -- last steps *) 
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CyclicAction" ObjectId="b6d7953d-707d-475b-8db2-c8be750ededf">
              <interface>
                <inputVars>
                  <variable name="itfTimingController">
                    <type>
                      <derived name="CBML.ITimingController" />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The CyclicAction is running until either ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero).
/// If ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
/// With ``itfTimingController`` ≠  0 (Zero) it is possible to check the current invocation time (see: |ITimingController.ControllerCheckTiming|).
/// Function blocks with a ``udiTimeLimit`` input variable (see: |IETrigTl|, |IETrigATl|, |IETrigTlTo|, |IETrigATlTo|, |ILConTl|, |ILConTlTo|, |ILConTlC|)
/// should be implement in such a way that the current invocation is exited when the consumed time for this invocation has exceeded the settings from udiTimeLimit.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         REPEAT
///             // working to reach the ready condition
///             // ⇒ xComplete := TRUE
///             // if the maximum invocation time is reached
///             // ⇒ xTimeLimit := TRUE
///             // if the maximum operating time is reached
///             // ⇒ xTimeOut := TRUE
///             // if an error condition is reached
///             // ⇒ set iErrorID to a value other than 0 (Zero)
///             itfTimingController.ControllerCheckTiming(
///                 xTimeOut=&gt;xTimeOut,
///                 xTimeLimit=&gt;xTimeLimit
///             );
///         
///             xComplete := TRUE;
///             iErrorID := ERROR.NO_ERROR;
///     
///         UNTIL xComplete OR
///               xTimeOut OR xTimeLimit OR
///               iErrorID &lt;&gt; ERROR.NO_ERROR
///         END_REPEAT
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ExitAction" ObjectId="0cb34ba4-6df2-4e6b-b64a-0507ec648a8b">
              <interface>
                <inputVars>
                  <variable name="xAfterCleanup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="xInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// This method is intended for releasing external resources (like RTS handles).
/// Do not call other internal function block instances in the context of this method.
/// Call only external functions defined inside the RTS.
/// For cleaning up other resources then external ones, please use the ``CleanupAction``.
/// This method should be callable in the context of ``FB_EXIT`` for example
/// before downloading a new application or before reseting an application.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetAction" ObjectId="3219a275-1226-40e2-811e-11101e757d37">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``ResetAction`` is running until the output ``xComplete`` is ``TRUE``.
/// If ``xComplete`` is ``TRUE`` the state |STATE.DORMANT| is reached.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="StartAction" ObjectId="2c913c78-ba20-4b97-bc6b-0c8b1416fc79">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``StartAction`` is running until either the output ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠ 0 (Zero).
/// If ``xComplete`` is ``TRUE`` the state |STATE.EXECUTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
///
/// .. note::
///
///    To sample the inputs in the first invocation of a function block the method SampleAction is the solution of choice.
///    See: |ISampleActionProvider.SampleAction|
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f40d75e5-5d45-48c3-847e-f39b92255ca9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LConTlTo_Temp" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="eErrorID">
              <type>
                <derived name="ERROR" />
              </type>
            </variable>
          </outputVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>CBML.LConTlTo</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
IF _Model.iErrorID = CBML.ERROR.TIME_OUT THEN
	eErrorID := ERROR.TIME_OUT;
ELSE
	eErrorID := _Model.iErrorID;
END_IF
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CleanupAction" ObjectId="a475bcac-346a-452b-b259-a3b42788bec9">
              <interface>
                <inputVars>
                  <variable name="xAbortProposed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iErrorIDProposed">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="xAbort">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="xAbortProposed" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="iErrorIDProposed" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// ``CleanupAction`` is running until one of the following events occurs:
/// When ``xComplete`` is ``TRUE`` the state |STATE.DONE| is reached.
/// When ``xAbort`` is ``TRUE`` the state |STATE.ABORTED| is reached.
/// When ``iErrorID`` ≠ 0 (Zero) the state |STATE.ERROR| is reached.
///
/// | After a *Ready Condition* as input (``iErrorIDProposed`` = 0 and ``xAbortProposed`` = ``FALSE``), only the output states
/// | `DONE` (``xComplete`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// | After a *Error Condition* as input (``iErrorIDProposed`` ≠ 0), only the output state
/// | `ERROR` (``iErrorID`` ≠ 0) is possible.
///
/// | After a *Abort Condition* as Input (``xAbortProposed`` = ``TRUE``), only the output states
/// | `ABORTED` (``xAbort`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         (* common cleanup -- first steps *) 
///         
///         IF xComplete THEN
///             IF xAbortProposed THEN
///                 (* abort condition -- abort specific cleanup *)
///                 xAbort := TRUE;
///                 xComplete := FALSE;
///             ELSIF iErrorIDProposed &lt;&gt; 0 THEN
///                 (* error condition -- error specific cleanup *)
///                 iErrorID := SEL(xComplete, 0, iErrorIDProposed);
///                 xComplete := FALSE;
///             ELSE
///                 (* ready condition -- done specific cleanup*)
///             END_IF
///         END_IF
///
///         (* common cleanup -- last steps *) 
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CyclicAction" ObjectId="e27c935a-3d34-4418-b8d1-67e27f654879">
              <interface>
                <inputVars>
                  <variable name="itfTimingController">
                    <type>
                      <derived name="CBML.ITimingController" />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The CyclicAction is running until either ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero).
/// If ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
/// With ``itfTimingController`` ≠  0 (Zero) it is possible to check the current invocation time (see: |ITimingController.ControllerCheckTiming|).
/// Function blocks with a ``udiTimeLimit`` input variable (see: |IETrigTl|, |IETrigATl|, |IETrigTlTo|, |IETrigATlTo|, |ILConTl|, |ILConTlTo|, |ILConTlC|)
/// should be implement in such a way that the current invocation is exited when the consumed time for this invocation has exceeded the settings from udiTimeLimit.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         REPEAT
///             // working to reach the ready condition
///             // ⇒ xComplete := TRUE
///             // if the maximum invocation time is reached
///             // ⇒ xTimeLimit := TRUE
///             // if the maximum operating time is reached
///             // ⇒ xTimeOut := TRUE
///             // if an error condition is reached
///             // ⇒ set iErrorID to a value other than 0 (Zero)
///             itfTimingController.ControllerCheckTiming(
///                 xTimeOut=&gt;xTimeOut,
///                 xTimeLimit=&gt;xTimeLimit
///             );
///         
///             xComplete := TRUE;
///             iErrorID := ERROR.NO_ERROR;
///     
///         UNTIL xComplete OR
///               xTimeOut OR xTimeLimit OR
///               iErrorID &lt;&gt; ERROR.NO_ERROR
///         END_REPEAT
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ExitAction" ObjectId="473f56ea-cdcd-41c2-876c-9b7dabdbf136">
              <interface>
                <inputVars>
                  <variable name="xAfterCleanup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="xInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// This method is intended for releasing external resources (like RTS handles).
/// Do not call other internal function block instances in the context of this method.
/// Call only external functions defined inside the RTS.
/// For cleaning up other resources then external ones, please use the ``CleanupAction``.
/// This method should be callable in the context of ``FB_EXIT`` for example
/// before downloading a new application or before reseting an application.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetAction" ObjectId="c3ca2861-9cfe-49ef-84c0-3b7786890641">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``ResetAction`` is running until the output ``xComplete`` is ``TRUE``.
/// If ``xComplete`` is ``TRUE`` the state |STATE.DORMANT| is reached.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="StartAction" ObjectId="3fe7677d-6180-4bfa-8574-4a3f389be4b5">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``StartAction`` is running until either the output ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠ 0 (Zero).
/// If ``xComplete`` is ``TRUE`` the state |STATE.EXECUTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
///
/// .. note::
///
///    To sample the inputs in the first invocation of a function block the method SampleAction is the solution of choice.
///    See: |ISampleActionProvider.SampleAction|
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ac0eebfb-0843-462c-bd0c-afb4453ef6f1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="LConTo_Temp" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="eErrorID">
              <type>
                <derived name="ERROR" />
              </type>
            </variable>
          </outputVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>CBML.LConTo</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
IF _Model.iErrorID = CBML.ERROR.TIME_OUT THEN
	eErrorID := ERROR.TIME_OUT;
ELSE
	eErrorID := _Model.iErrorID;
END_IF
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CleanupAction" ObjectId="faa051f3-c4ab-46ba-b15e-ac1b9eccf212">
              <interface>
                <inputVars>
                  <variable name="xAbortProposed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iErrorIDProposed">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="xAbort">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="xAbortProposed" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="iErrorIDProposed" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// ``CleanupAction`` is running until one of the following events occurs:
/// When ``xComplete`` is ``TRUE`` the state |STATE.DONE| is reached.
/// When ``xAbort`` is ``TRUE`` the state |STATE.ABORTED| is reached.
/// When ``iErrorID`` ≠ 0 (Zero) the state |STATE.ERROR| is reached.
///
/// | After a *Ready Condition* as input (``iErrorIDProposed`` = 0 and ``xAbortProposed`` = ``FALSE``), only the output states
/// | `DONE` (``xComplete`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// | After a *Error Condition* as input (``iErrorIDProposed`` ≠ 0), only the output state
/// | `ERROR` (``iErrorID`` ≠ 0) is possible.
///
/// | After a *Abort Condition* as Input (``xAbortProposed`` = ``TRUE``), only the output states
/// | `ABORTED` (``xAbort`` is ``TRUE``) or `ERROR` (``iErrorID`` ≠ 0) are possible.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         (* common cleanup -- first steps *) 
///         
///         IF xComplete THEN
///             IF xAbortProposed THEN
///                 (* abort condition -- abort specific cleanup *)
///                 xAbort := TRUE;
///                 xComplete := FALSE;
///             ELSIF iErrorIDProposed &lt;&gt; 0 THEN
///                 (* error condition -- error specific cleanup *)
///                 iErrorID := SEL(xComplete, 0, iErrorIDProposed);
///                 xComplete := FALSE;
///             ELSE
///                 (* ready condition -- done specific cleanup*)
///             END_IF
///         END_IF
///
///         (* common cleanup -- last steps *) 
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CyclicAction" ObjectId="1d189e92-7206-4db1-890f-702430dc21cf">
              <interface>
                <inputVars>
                  <variable name="itfTimingController">
                    <type>
                      <derived name="CBML.ITimingController" />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The CyclicAction is running until either ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero).
/// If ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
/// With ``itfTimingController`` ≠  0 (Zero) it is possible to check the current invocation time (see: |ITimingController.ControllerCheckTiming|).
/// Function blocks with a ``udiTimeLimit`` input variable (see: |IETrigTl|, |IETrigATl|, |IETrigTlTo|, |IETrigATlTo|, |ILConTl|, |ILConTlTo|, |ILConTlC|)
/// should be implement in such a way that the current invocation is exited when the consumed time for this invocation has exceeded the settings from udiTimeLimit.
///
/// .. admonition:: Example
///
///     .. code-block:: codesys
///     
///         REPEAT
///             // working to reach the ready condition
///             // ⇒ xComplete := TRUE
///             // if the maximum invocation time is reached
///             // ⇒ xTimeLimit := TRUE
///             // if the maximum operating time is reached
///             // ⇒ xTimeOut := TRUE
///             // if an error condition is reached
///             // ⇒ set iErrorID to a value other than 0 (Zero)
///             itfTimingController.ControllerCheckTiming(
///                 xTimeOut=&gt;xTimeOut,
///                 xTimeLimit=&gt;xTimeLimit
///             );
///         
///             xComplete := TRUE;
///             iErrorID := ERROR.NO_ERROR;
///     
///         UNTIL xComplete OR
///               xTimeOut OR xTimeLimit OR
///               iErrorID &lt;&gt; ERROR.NO_ERROR
///         END_REPEAT
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ExitAction" ObjectId="0eb9a093-000e-43af-b63f-e8153419b4e8">
              <interface>
                <inputVars>
                  <variable name="xAfterCleanup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="xInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// This method is intended for releasing external resources (like RTS handles).
/// Do not call other internal function block instances in the context of this method.
/// Call only external functions defined inside the RTS.
/// For cleaning up other resources then external ones, please use the ``CleanupAction``.
/// This method should be callable in the context of ``FB_EXIT`` for example
/// before downloading a new application or before reseting an application.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetAction" ObjectId="da18a879-fb54-4c86-a61d-fe93ca72ef93">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``ResetAction`` is running until the output ``xComplete`` is ``TRUE``.
/// If ``xComplete`` is ``TRUE`` the state |STATE.DORMANT| is reached.
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="StartAction" ObjectId="effcf94c-fce6-46a7-87b1-7bb65384d89d">
              <interface>
                <outputVars>
                  <variable name="xComplete">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="iErrorID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </outputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{analysis -2} 
/// The ``StartAction`` is running until either the output ``xComplete`` is ``TRUE`` or ``iErrorID`` ≠ 0 (Zero).
/// If ``xComplete`` is ``TRUE`` the state |STATE.EXECUTING| is reached.
/// If there is a ``iErrorID`` ≠  0 (Zero) the state |STATE.CLEANING| is reached.
///
/// .. note::
///
///    To sample the inputs in the first invocation of a function block the method SampleAction is the solution of choice.
///    See: |ISampleActionProvider.SampleAction|
///
/// .. note::
///
///    If this method will not provide any implementation, please remove it!
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>6bf565de-039d-47b1-a1ad-ea25632460bd</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CustomData" pouType="functionBlock">
        <interface>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FBF.InstanceData</Extends>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="enable_dynamic_creation" Value="" />
              </Attributes>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"> This is a container to carry init data from the Create methode of the factory
 to the prvInstInit methode of the new generated function block instance
{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* !! Do not add any executable code here !! *)
SUPER^();</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>db45ddab-dc4d-486c-9550-0d5be994b6b3</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CustomFB" pouType="functionBlock">
        <interface>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FBF.InstanceBase</Extends>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="enable_dynamic_creation" Value="" />
              </Attributes>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="prvInstInit" ObjectId="3db5aa5b-5a5e-470c-b650-072cfb24dca7">
              <interface>
                <returnType>
                  <derived name="FBF.ERROR" />
                </returnType>
                <inputVars>
                  <variable name="itfData">
                    <type>
                      <derived name="FBF.IData" />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="pData">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="CustomData" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="xOk">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </localVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> This methode is called from the factory to give a chance
 to initialize the new fb instance with the content of itfData
{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.prvInstInit(itfData);
xOk := __QUERYPOINTER(itfData, pData);
IF xOk THEN
	(* THIS^.iLocalVar := pData^.iInitValue *);
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>6ea43518-7579-40bd-9799-2a29c6d2aa26</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CustomFBFactory_heap" pouType="functionBlock">
        <interface>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FBF.FactoryBase</Extends>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="enable_dynamic_creation" Value="" />
              </Attributes>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"> This is a template for a factory with an heap based extendable memory pool
{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Create" ObjectId="e9776bbb-f03b-4ab9-8320-73b3f9fecaab">
              <interface>
                <returnType>
                  <pointer>
                    <baseType>
                      <derived name="CustomFB" />
                    </baseType>
                  </pointer>
                </returnType>
                <inputVars>
                  <variable name="itfData">
                    <type>
                      <derived name="FBF.IData" />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="eError">
                    <type>
                      <derived name="FBF.ERROR" />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="hInst">
                    <type>
                      <derived name="CAA.HANDLE" />
                    </type>
                  </variable>
                  <variable name="itfInst">
                    <type>
                      <derived name="FBF.IInstance" />
                    </type>
                  </variable>
                  <variable name="xOk">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </localVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Please replace CustonFB with your specific function block type 
                    There is no need to change anything else !!! </xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(* !!! This code must not be subject to change !!! *)
                      hInst := SUPER^.prvAllocInstMem(eError =&gt; eError);
                      Create := SUPER^.prvGetInstPointer(hInst);
                      IF Create &lt;&gt; 0 AND eError = FBF.ERROR.NO_ERROR THEN

                        {implicit on}
                        Create^.__vfInit();
                        Create^.FB_Init(TRUE, FALSE);
                        {implicit off}

                        xOk := __QUERYINTERFACE(Create^, itfInst);
                        IF xOk THEN
                          xOk := SUPER^.prvInstInit(itfInst, hInst, itfData, eError=&gt;eError);
                        ELSE
                          eError := FBF.ERROR.WRONG_INTERFACE;
                        END_IF

                        IF NOT xOk THEN
                          SUPER^.prvFreeInstMem(hInst);
                          Create := CAA.gc_pNULL;
                        END_IF
                      END_IF
                    </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation" >
            <Dummy />
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation" />
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation" />
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>316e457d-5510-4d85-b754-ef6f3d838097</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CustomFBFactory_static" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="abyPoolMemory">
              <type>
                <array>
                  <dimension lower="0" upper="529" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Please change the size of abyPoolMemory with your specific application need</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FBF.FactoryBase</Extends>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="enable_dynamic_creation" Value="" />
              </Attributes>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"> This is a template for a factory with an static iec memory based memory pool which a fixed capacity
{attribute 'hide_all_locals'}
{attribute 'conditionalshow_all_locals' := 'SomeText'}
{attribute 'conditionalshow_all_locals'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'conditionalshow'}
{attribute 'hide'}</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Create" ObjectId="a8107472-cd7b-4a67-986b-da385f2c008e">
              <interface>
                <returnType>
                  <pointer>
                    <baseType>
                      <derived name="CustomFB" />
                    </baseType>
                  </pointer>
                </returnType>
                <inputVars>
                  <variable name="itfData">
                    <type>
                      <derived name="FBF.IData" />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="eError">
                    <type>
                      <derived name="FBF.ERROR" />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="hInst">
                    <type>
                      <derived name="CAA.HANDLE" />
                    </type>
                  </variable>
                  <variable name="itfInst">
                    <type>
                      <derived name="FBF.IInstance" />
                    </type>
                  </variable>
                  <variable name="xOk">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </localVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Please replace CustonFB with our specific function block type 
 There is no need to change anything else !!! </xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(* !!! This code must not be subject to change !!! *)
hInst := SUPER^.prvAllocInstMem(eError =&gt; eError);
Create := SUPER^.prvGetInstPointer(hInst);
IF Create &lt;&gt; 0 AND eError = FBF.ERROR.NO_ERROR THEN

	{implicit on}
	Create^.__vfInit();
	Create^.FB_Init(TRUE, FALSE);
	{implicit off}

	xOk := __QUERYINTERFACE(Create^, itfInst);
	IF xOk THEN
		xOk := SUPER^.prvInstInit(itfInst, hInst, itfData, eError=&gt;eError);
	ELSE
		eError := FBF.ERROR.WRONG_INTERFACE;
	END_IF

	IF NOT xOk THEN
		SUPER^.prvFreeInstMem(hInst);
		Create := CAA.gc_pNULL;
	END_IF
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation" />
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation" />
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation" />
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5cf0ccdb-1d2c-4d9e-9db8-2d5ef951350e</ObjectId>
          </data>
        </addData>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations />
  </instances>
  <addData>
    <data name="http://www.3s-software.com/plcopenxml/globalvars" handleUnknown="implementation">
      <globalVars name="Constants" constant="true">
        <variable name="gc_iDummy">
          <type>
            <INT />
          </type>
          <initialValue>
            <simpleValue value="42" />
          </initialValue>
        </variable>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>61a71296-3b39-4b4c-9e67-cea520fcd5cc</ObjectId>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'conditionalshow'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'hide'}</xhtml>
        </documentation>
      </globalVars>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/globalvars" handleUnknown="implementation">
      <globalVars name="Variables">
        <variable name="g_iDummy">
          <type>
            <INT />
          </type>
        </variable>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>cd51317e-3db2-44da-bb88-6b22ca144fe3</ObjectId>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'conditionalshow'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'hide'}</xhtml>
        </documentation>
      </globalVars>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/projectstructure" handleUnknown="discard">
      <ProjectStructure>
        <Folder Name="Libname">
          <Folder Name="Enums">
            <Object Name="ERROR" ObjectId="f13851e4-c15c-4448-a3cc-5ae43fe11b73" />
          </Folder>
          <Folder Name="GlobalConstants">
            <Object Name="Constants" ObjectId="61a71296-3b39-4b4c-9e67-cea520fcd5cc" />
          </Folder>
          <Folder Name="GlobalVariables">
            <Object Name="Variables" ObjectId="cd51317e-3db2-44da-bb88-6b22ca144fe3" />
          </Folder>
          <Folder Name="Templates">
            <Folder Name="Behaviour Model">
              <Object Name="ETrigATlTo_Temp" ObjectId="5a796041-12b6-44ab-80ff-bd54c72659b1">
                <Object Name="CleanupAction" ObjectId="1432e7c5-be7d-4b38-8469-5cfa814f80e8" />
                <Object Name="CyclicAction" ObjectId="5ff10674-353e-4d48-87fd-bf9c349239e1" />
                <Object Name="ExitAction" ObjectId="9a6ebc10-1440-4c89-9474-01999b05190e" />
                <Object Name="ResetAction" ObjectId="dbd329f5-abdb-41a1-8e4c-8941ebe81ec8" />
                <Object Name="SampleAction" ObjectId="70f4fc0b-937d-4bb0-8f56-5fd0c739a18a" />
                <Object Name="StartAction" ObjectId="45719353-6fc3-485a-8d52-77e43dcd65cd" />
              </Object>
              <Object Name="ETrigATl_Temp" ObjectId="f6795eae-dbc8-442c-b319-f8ea7b0a100e">
                <Object Name="CleanupAction" ObjectId="7c14b139-5963-4ff5-a3de-aa31ad518e3e" />
                <Object Name="CyclicAction" ObjectId="0218aac3-0a1e-443b-9ae8-c019032f4ecf" />
                <Object Name="ExitAction" ObjectId="64c15a66-fdf0-4689-8344-79c3f5f0290a" />
                <Object Name="ResetAction" ObjectId="c128cc98-117f-40c3-9c3b-ecb54ae8b3c2" />
                <Object Name="SampleAction" ObjectId="1236e95c-2b9c-448b-bd56-0afcd8eaee5f" />
                <Object Name="StartAction" ObjectId="d34a9f55-f777-46e5-997c-3ab357fd1b4a" />
              </Object>
              <Object Name="ETrigATo_Temp" ObjectId="0e18ea33-b46d-48ea-8eaa-5c2bcaaafa0d">
                <Object Name="CleanupAction" ObjectId="709ed019-dc78-4c44-9213-4f49c6066096" />
                <Object Name="CyclicAction" ObjectId="1e33516d-b13e-4940-bffa-be32aac94213" />
                <Object Name="ExitAction" ObjectId="39dfb963-ea12-4e41-b2cc-51d123bd5e10" />
                <Object Name="ResetAction" ObjectId="750e08a0-2742-47ca-8f37-c9ce5ad82931" />
                <Object Name="SampleAction" ObjectId="c5ee6552-dde9-4db3-9b50-40165601ffcf" />
                <Object Name="StartAction" ObjectId="dda229ac-9d89-4ef2-9984-ada9e0ee8f7e" />
              </Object>
              <Object Name="ETrigA_Temp" ObjectId="d6b79a20-f337-409e-a3b4-a1dbdf465a4f">
                <Object Name="CleanupAction" ObjectId="08b120a0-c3a9-4eec-bdc6-932f60750e05" />
                <Object Name="CyclicAction" ObjectId="7c62c774-d032-4fcb-9d21-d67d1edcacc1" />
                <Object Name="ExitAction" ObjectId="85db0efe-ca2c-4d7a-b78f-04d70ad102dc" />
                <Object Name="ResetAction" ObjectId="939d4108-4075-4dd6-a847-74a104316e83" />
                <Object Name="SampleAction" ObjectId="db4b36e6-9982-4979-b47b-407de9eb32d8" />
                <Object Name="StartAction" ObjectId="d6a262c7-d4e9-471e-8482-b2b7bb05df1d" />
              </Object>
              <Object Name="ETrigTlTo_Temp" ObjectId="302d1c8b-000f-4dc1-904c-e60d002b810c">
                <Object Name="CleanupAction" ObjectId="c3b08fe2-9c1e-456b-81b3-0563160bcac4" />
                <Object Name="CyclicAction" ObjectId="14c27d02-0c8c-454c-812f-a0b1bb86d2b0" />
                <Object Name="ExitAction" ObjectId="ef7a9874-fabd-4cec-b947-c5ad95976994" />
                <Object Name="ResetAction" ObjectId="73bbf7df-5c21-46ba-8830-f971a04f795b" />
                <Object Name="SampleAction" ObjectId="77a33482-3dc1-4098-abec-08b8848ebcd3" />
                <Object Name="StartAction" ObjectId="61d3090c-dd09-4c0c-a9a2-10767ca27835" />
              </Object>
              <Object Name="ETrigTl_Temp" ObjectId="9921db3c-1753-4d52-b3fc-0aca2a3e820b">
                <Object Name="CleanupAction" ObjectId="28e4f168-8a11-4316-87d1-d341d8a165bb" />
                <Object Name="CyclicAction" ObjectId="ed28022c-f20e-4f7c-ad5e-e474e189f31e" />
                <Object Name="ExitAction" ObjectId="0d7fa0d0-945e-4c86-aeef-e4781d2b9d49" />
                <Object Name="ResetAction" ObjectId="2d884bdf-1d12-46bc-95b3-66c6b236bd55" />
                <Object Name="SampleAction" ObjectId="f35942c3-08b1-42b9-9357-4ecc0d650280" />
                <Object Name="StartAction" ObjectId="66826820-a7d6-43c6-9ac1-bbac396fda84" />
              </Object>
              <Object Name="ETrigTo_Temp" ObjectId="f89c7486-e894-4f40-a3d2-2de75de71ad0">
                <Object Name="CleanupAction" ObjectId="9d37ba21-0741-4600-9772-c54af54991ab" />
                <Object Name="CyclicAction" ObjectId="d7c246b0-27f8-40b1-a1b1-2ed3500648af" />
                <Object Name="ExitAction" ObjectId="4dad0011-9b73-479e-bfc7-00e55ba16121" />
                <Object Name="ResetAction" ObjectId="de7a8b0e-1eef-4389-8661-782141d2b8a2" />
                <Object Name="SampleAction" ObjectId="a946d826-27fa-4baf-a90a-2aaaf7688c3c" />
                <Object Name="StartAction" ObjectId="142108c9-1acd-4e90-bb52-53ffb142e5c0" />
              </Object>
              <Object Name="ETrig_Temp" ObjectId="df86b7a9-aced-4ec7-bc2d-7959d3246804">
                <Object Name="CleanupAction" ObjectId="97b7f0d9-eaf4-44be-8360-fb87a8163e60" />
                <Object Name="CyclicAction" ObjectId="3eafd802-4107-4092-a9f9-10cdce883f08" />
                <Object Name="ExitAction" ObjectId="c8160892-d51a-49ac-a198-4ee236d14db3" />
                <Object Name="ResetAction" ObjectId="cd4e12a6-91c4-4868-a2fe-a35b0d85bb95" />
                <Object Name="SampleAction" ObjectId="5b2a9ee7-14e2-4b50-8c24-a36bbea3f82d" />
                <Object Name="StartAction" ObjectId="1ce92b1d-89d7-4dcc-8d31-06c38dda6426" />
              </Object>
              <Object Name="LConC_Temp" ObjectId="52ed2cf0-eda1-44f9-9591-8a61aeebd5c3">
                <Object Name="CleanupAction" ObjectId="dde821fd-38fd-4b48-a96e-163d90926f5b" />
                <Object Name="CyclicAction" ObjectId="2790bff2-affc-4a10-94ca-477516e286e4" />
                <Object Name="ExitAction" ObjectId="c858ae94-318b-4dde-862f-d3a89f9e3901" />
                <Object Name="ResetAction" ObjectId="241c3095-4a09-4b94-a063-8ae488169e76" />
                <Object Name="StartAction" ObjectId="40c6dcaa-20d1-483c-af88-19e7888d47ee" />
              </Object>
              <Object Name="LConTlC_Temp" ObjectId="f40d75e5-5d45-48c3-847e-f39b92255ca9">
                <Object Name="CleanupAction" ObjectId="a5c0473a-5bab-419f-b2b0-db8fc5c3c2d2" />
                <Object Name="CyclicAction" ObjectId="b6d7953d-707d-475b-8db2-c8be750ededf" />
                <Object Name="ExitAction" ObjectId="0cb34ba4-6df2-4e6b-b64a-0507ec648a8b" />
                <Object Name="ResetAction" ObjectId="3219a275-1226-40e2-811e-11101e757d37" />
                <Object Name="StartAction" ObjectId="2c913c78-ba20-4b97-bc6b-0c8b1416fc79" />
              </Object>
              <Object Name="LConTlTo_Temp" ObjectId="ac0eebfb-0843-462c-bd0c-afb4453ef6f1">
                <Object Name="CleanupAction" ObjectId="a475bcac-346a-452b-b259-a3b42788bec9" />
                <Object Name="CyclicAction" ObjectId="e27c935a-3d34-4418-b8d1-67e27f654879" />
                <Object Name="ExitAction" ObjectId="473f56ea-cdcd-41c2-876c-9b7dabdbf136" />
                <Object Name="ResetAction" ObjectId="c3ca2861-9cfe-49ef-84c0-3b7786890641" />
                <Object Name="StartAction" ObjectId="3fe7677d-6180-4bfa-8574-4a3f389be4b5" />
              </Object>
              <Object Name="LConTl_Temp" ObjectId="7fb8f383-dbe0-4433-8133-69bfde0e26ac">
                <Object Name="CleanupAction" ObjectId="638c5255-0533-4eb2-a238-b1a1a64968de" />
                <Object Name="CyclicAction" ObjectId="d0992de5-a40a-4876-a405-8bcf6e87dadc" />
                <Object Name="ExitAction" ObjectId="39fb2595-a1c2-48ef-9683-7a4b8604cc80" />
                <Object Name="ResetAction" ObjectId="c3d72220-acae-4580-99f3-ee357e616dd9" />
                <Object Name="StartAction" ObjectId="f60069a1-fa24-4ccd-bc6e-1305ce60f8d4" />
              </Object>
              <Object Name="LConTo_Temp" ObjectId="6bf565de-039d-47b1-a1ad-ea25632460bd">
                <Object Name="CleanupAction" ObjectId="faa051f3-c4ab-46ba-b15e-ac1b9eccf212" />
                <Object Name="CyclicAction" ObjectId="1d189e92-7206-4db1-890f-702430dc21cf" />
                <Object Name="ExitAction" ObjectId="0eb9a093-000e-43af-b63f-e8153419b4e8" />
                <Object Name="ResetAction" ObjectId="da18a879-fb54-4c86-a61d-fe93ca72ef93" />
                <Object Name="StartAction" ObjectId="effcf94c-fce6-46a7-87b1-7bb65384d89d" />
              </Object>
              <Object Name="LCon_Temp" ObjectId="5f6d7413-d76b-433c-9ec2-ffd9a2b04317">
                <Object Name="CleanupAction" ObjectId="f2328ecc-4112-42da-88d2-3d730117a691" />
                <Object Name="CyclicAction" ObjectId="c57fa5bc-6317-4710-9730-42e1389a29d9" />
                <Object Name="ExitAction" ObjectId="ed4f02d0-024f-40cc-920c-0dbd42c0bacc" />
                <Object Name="ResetAction" ObjectId="f4cedef7-d550-4cdb-b0f6-05406194cc7b" />
                <Object Name="StartAction" ObjectId="2fad947c-899e-4c19-a77f-41f475a58155" />
              </Object>
            </Folder>
            <Folder Name="FB Factory">
              <Object Name="CustomData" ObjectId="db45ddab-dc4d-486c-9550-0d5be994b6b3" />
              <Object Name="CustomFB" ObjectId="6ea43518-7579-40bd-9799-2a29c6d2aa26">
                <Object Name="prvInstInit" ObjectId="3db5aa5b-5a5e-470c-b650-072cfb24dca7" />
              </Object>
              <Object Name="CustomFBFactory_heap" ObjectId="316e457d-5510-4d85-b754-ef6f3d838097">
                <Object Name="Create" ObjectId="e9776bbb-f03b-4ab9-8320-73b3f9fecaab" />
                <Object Name="prvInstCount" ObjectId="a53b95dc-baeb-41b4-8925-c16f438091a0" />
                <Object Name="prvInstPoolExtendsFactor" ObjectId="85804db1-4c64-4e7c-9bd4-85530fd84cba" />
                <Object Name="prvInstSize" ObjectId="9dc8f4bf-79e8-4063-9fe4-357c877dec3e" />
              </Object>
              <Object Name="CustomFBFactory_static" ObjectId="5cf0ccdb-1d2c-4d9e-9db8-2d5ef951350e">
                <Object Name="Create" ObjectId="a8107472-cd7b-4a67-986b-da385f2c008e" />
                <Object Name="prvInstPoolAdr" ObjectId="1a1426bc-7696-49cd-93c6-2b82cdf3222d" />
                <Object Name="prvInstPoolSize" ObjectId="e59ae956-84d1-4a4f-b768-de8990c4404d" />
                <Object Name="prvInstSize" ObjectId="9ea450c1-a758-4730-886a-71f45b45e0e9" />
              </Object>
            </Folder>
          </Folder>
        </Folder>
      </ProjectStructure>
    </data>
  </addData>
</project>